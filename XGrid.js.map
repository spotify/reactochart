{"version":3,"sources":["src/XGrid.js"],"names":["XGrid","props","height","xScale","tickCount","lineClassName","lineStyle","spacingTop","spacingBottom","spacingLeft","spacingRight","ticks","className","map","tick","i","value","style","key","defaults","defaultProps","xTickDomain","Component","propTypes","width","number","func","nice","bool","array","string","object"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;;;IAEqBA,K;;;;;;;;;;;6BA0BV;AAAA,mBAWH,KAAKC,KAXF;AAAA,UAELC,MAFK,UAELA,MAFK;AAAA,UAGLC,MAHK,UAGLA,MAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,aALK,UAKLA,aALK;AAAA,UAMLC,SANK,UAMLA,SANK;AAAA,UAOLC,UAPK,UAOLA,UAPK;AAAA,UAQLC,aARK,UAQLA,aARK;AAAA,UASLC,WATK,UASLA,WATK;AAAA,UAULC,YAVK,UAULA,YAVK;;AAYP,UAAMC,QAAQ,KAAKV,KAAL,CAAWU,KAAX,IAAoB,0BAAcR,MAAd,EAAsB,IAAtB,EAA4BC,SAA5B,CAAlC;AACA,UAAMQ,oDAAiDP,iBACrD,EADI,CAAN;;AAGA,aACE;AAAA;AAAA,UAAG,WAAU,cAAb;AACGM,cAAME,GAAN,CAAU,UAACC,IAAD,EAAOC,CAAP,EAAa;AACtB,iBACE,+CACM;AACFb,0BADE;AAEFC,0BAFE;AAGFS,gCAHE;AAIFL,kCAJE;AAKFC,wCALE;AAMFC,oCANE;AAOFC,sCAPE;AAQFM,mBAAOF,IARL;AASFG,mBAAOX,SATL;AAUFY,kCAAoBH;AAVlB,WADN,CADF;AAgBD,SAjBA;AADH,OADF;AAsBD;;;kCA5CoBd,K,EAAO;AAC1B,UAAI,CAACA,MAAME,MAAX,EAAmB;AACnBF,cAAQ,iBAAEkB,QAAF,CAAW,EAAX,EAAelB,KAAf,EAAsBD,MAAMoB,YAA5B,CAAR;AACA,aAAO,EAAEC,aAAa,0BAAcpB,MAAME,MAApB,EAA4BF,KAA5B,CAAf,EAAP;AACD;;;;EAxBgC,gBAAMqB,S;;AAApBtB,K,CACZuB,S,GAAY;AACjBC,SAAO,oBAAUC,MADA;AAEjBvB,UAAQ,oBAAUuB,MAFD;AAGjBtB,UAAQ,oBAAUuB,IAHD;AAIjBnB,cAAY,oBAAUkB,MAJL;AAKjBjB,iBAAe,oBAAUiB,MALR;AAMjBhB,eAAa,oBAAUgB,MANN;AAOjBf,gBAAc,oBAAUe,MAPP;AAQjBE,QAAM,oBAAUC,IARC;AASjBjB,SAAO,oBAAUkB,KATA;AAUjBzB,aAAW,oBAAUqB,MAVJ;AAWjBpB,iBAAe,oBAAUyB,MAXR;AAYjBxB,aAAW,oBAAUyB;AAZJ,C;AADA/B,K,CAeZoB,Y,GAAe;AACpBO,QAAM,IADc;AAEpBrB,aAAW;AAFS,C;kBAfHN,K","file":"XGrid.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nimport { getScaleTicks, getTickDomain } from \"./utils/Scale\";\nimport XLine from \"./XLine\";\n\nexport default class XGrid extends React.Component {\n  static propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number,\n    xScale: PropTypes.func,\n    spacingTop: PropTypes.number,\n    spacingBottom: PropTypes.number,\n    spacingLeft: PropTypes.number,\n    spacingRight: PropTypes.number,\n    nice: PropTypes.bool,\n    ticks: PropTypes.array,\n    tickCount: PropTypes.number,\n    lineClassName: PropTypes.string,\n    lineStyle: PropTypes.object\n  };\n  static defaultProps = {\n    nice: true,\n    lineStyle: {}\n  };\n\n  static getTickDomain(props) {\n    if (!props.xScale) return;\n    props = _.defaults({}, props, XGrid.defaultProps);\n    return { xTickDomain: getTickDomain(props.xScale, props) };\n  }\n\n  render() {\n    const {\n      height,\n      xScale,\n      tickCount,\n      lineClassName,\n      lineStyle,\n      spacingTop,\n      spacingBottom,\n      spacingLeft,\n      spacingRight\n    } = this.props;\n    const ticks = this.props.ticks || getScaleTicks(xScale, null, tickCount);\n    const className = `chart-grid-line chart-grid-line-x ${lineClassName ||\n      \"\"}`;\n\n    return (\n      <g className=\"chart-grid-x\">\n        {ticks.map((tick, i) => {\n          return (\n            <XLine\n              {...{\n                height,\n                xScale,\n                className,\n                spacingTop,\n                spacingBottom,\n                spacingLeft,\n                spacingRight,\n                value: tick,\n                style: lineStyle,\n                key: `grid-x-line-${i}`\n              }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"]}