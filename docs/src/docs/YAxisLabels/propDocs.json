{
  "description": "",
  "methods": [
    {
      "name": "getTickDomain",
      "docblock": null,
      "modifiers": [
        "static"
      ],
      "params": [
        {
          "name": "props",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "getMargin",
      "docblock": null,
      "modifiers": [
        "static"
      ],
      "params": [
        {
          "name": "props",
          "type": null
        }
      ],
      "returns": null
    },
    {
      "name": "getLabels",
      "docblock": null,
      "modifiers": [
        "static"
      ],
      "params": [
        {
          "name": "props",
          "type": null
        }
      ],
      "returns": null
    }
  ],
  "props": {
    "yScale": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "D3 scale for Y axis - provided by XYPlot."
    },
    "height": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "250",
        "computed": false
      }
    },
    "width": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "400",
        "computed": false
      }
    },
    "position": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "\"left\"",
            "computed": false
          },
          {
            "value": "\"right\"",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "Position of y axis labels. Accepted options are \"left\" or \"right\".",
      "defaultValue": {
        "value": "\"left\"",
        "computed": false
      }
    },
    "placement": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "\"before\"",
            "computed": false
          },
          {
            "value": "\"after\"",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "Placement of labels in regards to the y axis. Accepted options are \"before\" or \"after\"."
    },
    "distance": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Label distance from Y Axis.",
      "defaultValue": {
        "value": "4",
        "computed": false
      }
    },
    "nice": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Round ticks to capture extent of given y domain from XYPlot.",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "tickCount": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Number of ticks on axis.",
      "defaultValue": {
        "value": "10",
        "computed": false
      }
    },
    "ticks": {
      "type": {
        "name": "array"
      },
      "required": false,
      "description": "Custom ticks to display.",
      "defaultValue": {
        "value": "null",
        "computed": false
      }
    },
    "labelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "func"
          },
          {
            "name": "object"
          }
        ]
      },
      "required": false,
      "description": "Inline style object applied to each label,\nor accessor function which returns a style object\n\nDisclaimer: labelStyle will merge its defaults with the given labelStyle prop\nin order to ensure that our collision library measureText is able to calculate the\nsmallest amount of possible collisions along the axis. It's therefore dependent on\nfontFamily, size and fontStyle to always be passed in. If you're looking to have a centralized\nstylesheet, we suggest creating a styled label component that wraps YAxisLabels with your preferred styles.",
      "defaultValue": {
        "value": "{\n  fontFamily: \"Helvetica, sans-serif\",\n  fontSize: \"14px\",\n  lineHeight: 1,\n  textAnchor: \"end\"\n}",
        "computed": false
      }
    },
    "labelClassName": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      }
    },
    "spacingLeft": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Spacing - provided by XYPlot and used to determine the placement of the label given spacingLeft"
    },
    "spacingRight": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Spacing - provided by XYPlot and used to determine the placement of the label given spacingRight"
    },
    "onMouseEnterLabel": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mouseenter` event handler callback, called when user's mouse enters the label."
    },
    "onMouseMoveLabel": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mousemove` event handler callback, called when user's mouse moves within the label."
    },
    "onMouseLeaveLabel": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mouseleave` event handler callback, called when user's mouse leaves the label."
    },
    "onMouseClickLabel": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mouseclick` event handler callback, called when user's mouse clicks the label."
    },
    "format": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "An accessor function that returns the updated label.\n\nFor example, given labels with real numbers one can pass in the following accessor,\n(label) => `${label}%`, to display percentages."
    },
    "formats": {
      "type": {
        "name": "array"
      },
      "required": false,
      "description": "Formats to use for the labels in priority order. XAxisLabels will try to be smart about which format\nto use that keeps the labels distinct and provides the least amount of collisions when rendered. Formats\ncan be either string(s) or function(s), utilizing d3-format.\n\nFor example, given labels with real numbers one can pass in [\".0%\"] for a rounded percentage, like 12%."
    },
    "labels": {
      "type": {
        "name": "array"
      },
      "required": false,
      "description": "Custom labels provided. Note that each object in the array has to be of shape.\n`{\n value,\n text,\n height,\n width\n}`\nvalue - value you'd like this label to be aligned with\ntext - text you'd like displayed\nheight - height of the given label\nwidth - width of the given label"
    },
    "offset": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Adds vertical offset (along the YAxis) to the labels.",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    }
  }
}