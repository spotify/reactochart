{
  "description": "`TreeMap` displays hierarchical data where a leaf node's rectangle has an area proportional to a specified dimension of the data.",
  "methods": [],
  "props": {
    "width": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "height": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "data": {
      "type": {
        "name": "object"
      },
      "required": true,
      "description": ""
    },
    "getValue": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "Key or accessor to retrieve value of data point",
      "defaultValue": {
        "value": "\"value\"",
        "computed": false
      }
    },
    "getChildren": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "Key or accessor to retrieve children of data point",
      "defaultValue": {
        "value": "\"children\"",
        "computed": false
      }
    },
    "getLabel": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "Key or accessor to retrieve label for given Node",
      "defaultValue": {
        "value": "\"name\"",
        "computed": false
      }
    },
    "sort": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Function passed in to sort nodes"
    },
    "padding": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "See d3 docs for treemap - Adds outer and inner padding to tree"
    },
    "round": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "See d3 docs for treemap - Enables or disables rounding"
    },
    "sticky": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "If sticky, on data change the TreeMap will not force a recreation of the tree and animate data changes.\nOtherwise we recreate the tree given its new props"
    },
    "ratio": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Sets the desired aspect ratio of the generated rectangles"
    },
    "nodeStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "func"
          },
          {
            "name": "object"
          }
        ]
      },
      "required": false,
      "description": "Inline style object applied to each Node,\nor accessor function which returns a style object"
    },
    "labelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "func"
          },
          {
            "name": "object"
          }
        ]
      },
      "required": false,
      "description": "Inline style object applied to each Label,\nor accessor function which returns a style object"
    },
    "minLabelWidth": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    },
    "minLabelHeight": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    },
    "onClickNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`onClick` event handler callback, called when user clicks a NodeComponent."
    },
    "onMouseEnterNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mouseenter` event handler callback, called when user's mouse enters a NodeComponent."
    },
    "onMouseLeaveNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mouseleave` event handler callback, called when user's mouse leaves a NodeComponent."
    },
    "onMouseMoveNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "`mousemove` event handler callback, called when user's mouse moves within a NodeComponent."
    },
    "NodeComponent": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Optional treemap node, otherwise we default to our TreeMapNode component",
      "defaultValue": {
        "value": "props => {\n  const {\n    node,\n    getLabel,\n    nodeStyle,\n    labelStyle,\n    minLabelWidth,\n    minLabelHeight,\n    NodeLabelComponent,\n    parentNames\n  } = props;\n  const { depth, parent, x0, y0, x1, y1 } = node;\n\n  var parentName = _.get(parent, \"data.name\");\n  const nodeGroupClass = parent\n    ? `node-group-${_.kebabCase(parentName)} node-group-i-${parentNames.indexOf(\n        parentName\n      )}`\n    : \"\";\n  const className = `rct-tree-map-node node-depth-${depth} ${nodeGroupClass}`;\n\n  let style = {\n    position: \"absolute\",\n    width: x1 - x0,\n    height: y1 - y0,\n    top: y0,\n    left: x0,\n    transition: \"all .2s\"\n  };\n  const customStyle = _.isFunction(nodeStyle)\n    ? nodeStyle(node)\n    : _.isObject(nodeStyle)\n      ? nodeStyle\n      : {};\n  _.assign(style, customStyle);\n\n  let handlers = [\n    \"onClick\",\n    \"onMouseEnter\",\n    \"onMouseLeave\",\n    \"onMouseMove\"\n  ].reduce((handlers, eventName) => {\n    const handler = props[`${eventName}Node`];\n    if (handler) handlers[eventName] = handler.bind(null, node);\n    return handlers;\n  }, {});\n\n  return (\n    <div {...{ className, style }} {...handlers}>\n      {x1 - x0 > minLabelWidth && y1 - y0 > minLabelHeight ? ( // show label if node is big enough\n        <NodeLabelComponent {...{ node, getLabel, labelStyle }} />\n      ) : null}\n    </div>\n  );\n}",
        "computed": false
      }
    },
    "NodeLabelComponent": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Optional treemap node label, otherwise we default to our TreeMapNodeLabel component",
      "defaultValue": {
        "value": "props => {\n  const { node, getLabel, labelStyle } = props;\n  const { x1, x0 } = node;\n  let style = { width: x1 - x0 };\n  const customStyle = _.isFunction(labelStyle)\n    ? labelStyle(node)\n    : _.isObject(labelStyle)\n      ? labelStyle\n      : {};\n  _.assign(style, customStyle);\n\n  return (\n    <div className=\"rct-node-label\" {...{ style }}>\n      {makeAccessor(getLabel)(node)}\n    </div>\n  );\n}",
        "computed": false
      }
    }
  }
}