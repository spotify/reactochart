{
  "description": "",
  "methods": [],
  "props": {
    "width": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "height": {
      "type": {
        "name": "number"
      },
      "required": true,
      "description": ""
    },
    "data": {
      "type": {
        "name": "object"
      },
      "required": true,
      "description": ""
    },
    "getValue": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "\"value\"",
        "computed": false
      }
    },
    "getChildren": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "\"children\"",
        "computed": false
      }
    },
    "getLabel": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.getter"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "\"name\"",
        "computed": false
      }
    },
    "sort": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "padding": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "round": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "sticky": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": ""
    },
    "mode": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": ""
    },
    "ratio": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": ""
    },
    "nodeStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "func"
          },
          {
            "name": "object"
          }
        ]
      },
      "required": false,
      "description": ""
    },
    "labelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "func"
          },
          {
            "name": "object"
          }
        ]
      },
      "required": false,
      "description": ""
    },
    "minLabelWidth": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    },
    "minLabelHeight": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    },
    "onClickNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseEnterNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseLeaveNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "onMouseMoveNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": ""
    },
    "NodeComponent": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "class TreeMapNode extends React.Component {\n  static propTypes = {\n    node: PropTypes.shape({\n      parent: PropTypes.object,\n      children: PropTypes.array,\n      value: PropTypes.number,\n      depth: PropTypes.number,\n      x: PropTypes.number,\n      y: PropTypes.number,\n      dx: PropTypes.number,\n      dy: PropTypes.number\n    }),\n    nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number,\n\n    getLabel: CustomPropTypes.getter,\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    NodeLabelComponent: PropTypes.func\n  };\n  static defaultProps = {\n    minLabelWidth: 0,\n    minLabelHeight: 0\n  };\n\n  render() {\n    const {\n      node,\n      getLabel,\n      nodeStyle,\n      labelStyle,\n      minLabelWidth,\n      minLabelHeight,\n      NodeLabelComponent,\n      parentNames\n    } = this.props;\n    const { depth, parent, x0, y0, x1, y1 } = node;\n\n    var parentName = _.get(parent, \"data.name\");\n    const nodeGroupClass = parent\n      ? `node-group-${_.kebabCase(\n          parentName\n        )} node-group-i-${parentNames.indexOf(parentName)}`\n      : \"\";\n    const className = `tree-map-node node-depth-${depth} ${nodeGroupClass}`;\n\n    let style = {\n      position: \"absolute\",\n      width: x1 - x0,\n      height: y1 - y0,\n      top: y0,\n      left: x0,\n      transition: \"all .2s\"\n    };\n    const customStyle = _.isFunction(nodeStyle)\n      ? nodeStyle(node)\n      : _.isObject(nodeStyle)\n        ? nodeStyle\n        : {};\n    _.assign(style, customStyle);\n\n    let handlers = [\n      \"onClick\",\n      \"onMouseEnter\",\n      \"onMouseLeave\",\n      \"onMouseMove\"\n    ].reduce((handlers, eventName) => {\n      const handler = this.props[`${eventName}Node`];\n      if (handler) handlers[eventName] = handler.bind(null, node);\n      return handlers;\n    }, {});\n\n    return (\n      <div {...{ className, style }} {...handlers}>\n        {x1 - x0 > minLabelWidth && y1 - y0 > minLabelHeight ? ( // show label if node is big enough\n          <NodeLabelComponent {...{ node, getLabel, labelStyle }} />\n        ) : null}\n      </div>\n    );\n  }\n}",
        "computed": false
      }
    },
    "NodeLabelComponent": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "",
      "defaultValue": {
        "value": "class TreeMapNodeLabel extends React.Component {\n  static propTypes = {\n    node: PropTypes.object,\n    getLabel: CustomPropTypes.getter,\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number\n  };\n\n  render() {\n    const { node, getLabel, labelStyle } = this.props;\n    const { x1, x0 } = node;\n    let style = { width: x1 - x0 };\n    const customStyle = _.isFunction(labelStyle)\n      ? labelStyle(node)\n      : _.isObject(labelStyle)\n        ? labelStyle\n        : {};\n    _.assign(style, customStyle);\n\n    return (\n      <div className=\"node-label\" {...{ style }}>\n        {makeAccessor(getLabel)(node)}\n      </div>\n    );\n  }\n}",
        "computed": false
      }
    }
  }
}