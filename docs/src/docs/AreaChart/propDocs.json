{
  "description": "",
  "methods": [
    {
      "name": "getDomain",
      "docblock": null,
      "modifiers": [
        "static"
      ],
      "params": [
        {
          "name": "props",
          "type": null
        }
      ],
      "returns": null
    }
  ],
  "props": {
    "data": {
      "type": {
        "name": "array"
      },
      "required": true,
      "description": "the array of data objects"
    },
    "x": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.valueOrAccessor"
      },
      "required": false,
      "description": "Accessor function for area X values, called once per datum"
    },
    "y": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.valueOrAccessor"
      },
      "required": false,
      "description": "Accessor function for area's starting (minimum) Y values, called once per datum,\nor a single Y value to be used for the entire line.\nShould return the minimum of the Y range spanned by the area at this point."
    },
    "yEnd": {
      "type": {
        "name": "custom",
        "raw": "CustomPropTypes.valueOrAccessor"
      },
      "required": false,
      "description": "Accessor function for area's ending (maximum) Y values, called once per datum,\nor a single Y value to be used for the entire line.\nShould return the maximum of the Y range spanned by the area at this point."
    },
    "pathClassName": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "classname applied to area path element",
      "defaultValue": {
        "value": "\"\"",
        "computed": false
      }
    },
    "pathStyle": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "style applied to area path element"
    },
    "isDifference": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "if isDifference is true, AreaChart generates a \"difference chart\" with two area paths instead of one:\none path which shows when YEnd > Y, and one vice versa, allowing them to be styled differently (eg red/green)"
    },
    "pathStylePositive": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "when isDifference is true, pathStylePositive and pathStyleNegative can be passed to give 2 different inline\nstyles to the two different paths which are generated.\nIgnored if isDifference is false."
    },
    "pathStyleNegative": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": ""
    },
    "shouldShowGaps": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "if true, will show gaps in the shaded area for data where props.isDefined(datum) returns false",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "isDefined": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "if shouldShowGaps is true, isDefined function describes when a datum should be considered \"defined\" vs. when to show gap\nby default, shows gap if either y or yEnd are undefined",
      "defaultValue": {
        "value": "(d, i, accessors) => {\n  return (\n    !_.isUndefined(accessors.y(d, i)) &&\n    !_.isUndefined(accessors.yEnd(d, i))\n  );\n}",
        "computed": false
      }
    },
    "xScale": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "D3 scale for X axis - provided by XYPlot"
    },
    "yScale": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "D3 scale for Y axis - provided by XYPlot"
    },
    "xScaleType": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Type of X scale - provided by XYPlot"
    },
    "yScaleType": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "Type of Y scale - provided by XYPlot"
    }
  }
}