{
  "description": "A `SankeyDiagram` is a type of flow diagram which visualizes directed flow between nodes\nof a network graph. Currently only *acyclic* networks are supported.",
  "displayName": "SankeyDiagram",
  "methods": [
    {
      "name": "makeSankeyGraph",
      "docblock": null,
      "modifiers": ["static"],
      "params": [
        {
          "name": "props",
          "type": null
        }
      ],
      "returns": null
    }
  ],
  "props": {
    "nodes": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "object"
        }
      },
      "required": true,
      "description": "Array of node objects, represented by vertical rectangles.\nThese represent the base entities which links flow into & out of."
    },
    "links": {
      "type": {
        "name": "arrayOf",
        "value": {
          "name": "shape",
          "value": {
            "source": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "target": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "number"
                }
              ],
              "required": false
            },
            "value": {
              "name": "number",
              "required": false
            }
          }
        }
      },
      "required": true,
      "description": "Array of link objects, represented by curved paths between nodes.\nLinks represent a magnitude of flow between one node and another.\nEach should have a 'source' node [identifier], a 'target' node [identifier],\nand a numerical value representing flow magnitude."
    },
    "width": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Width of the SVG element.",
      "defaultValue": {
        "value": "400",
        "computed": false
      }
    },
    "height": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Height of the SVG element.",
      "defaultValue": {
        "value": "300",
        "computed": false
      }
    },
    "shouldClone": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Boolean which decides if the nodes & links props should be cloned before being mutated into\nthe Sankey data structure. Passing `false` is faster, but may cause unintended side effects\nif nodes or links data are used elsewhere",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "className": {
      "type": {
        "name": "string"
      },
      "required": false,
      "description": "`className` attribute to be applied to the SVG element.",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "style": {
      "type": {
        "name": "object"
      },
      "required": false,
      "description": "Inline style object to be applied to the SVG element.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "standalone": {
      "type": {
        "name": "bool"
      },
      "required": false,
      "description": "Boolean which determines whether the chart should be rendered as a standalone `<svg>` element\nor a `<g>` group element (as a child within an existing `<svg>`).\nTrue by default, pass `false` to render in a `<g>`.",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "marginTop": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Internal top margin, in pixels. Generally used to leave extra space inside the SVG for labels.",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    },
    "marginBottom": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Internal bottom margin, in pixels.",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    },
    "marginLeft": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Internal left margin, in pixels.",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    },
    "marginRight": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Internal right margin, in pixels.",
      "defaultValue": {
        "value": "0",
        "computed": false
      }
    },
    "showNodes": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if node rectangles should be shown,\nor function (`showNode(node, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "nodeId": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accessor function `nodeId(node, graph)` which specifies how to access the ID of each node object.\nThese should be the same identifiers used by `links[].source` and `.target`.\nUses the node's index in `nodes` array by default.",
      "defaultValue": {
        "value": "node => node.index",
        "computed": false
      }
    },
    "nodeWidth": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Width (in pixels) of the vertical node rectangles.",
      "defaultValue": {
        "value": "12",
        "computed": false
      }
    },
    "nodePadding": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Vertical padding (in pixels) between each of the node lines.",
      "defaultValue": {
        "value": "8",
        "computed": false
      }
    },
    "nodeAlignment": {
      "type": {
        "name": "enum",
        "value": [
          {
            "value": "'left'",
            "computed": false
          },
          {
            "value": "'right'",
            "computed": false
          },
          {
            "value": "'center'",
            "computed": false
          },
          {
            "value": "'justify'",
            "computed": false
          }
        ]
      },
      "required": false,
      "description": "Node alignment method used to layout the nodes.\nMust be 'left', 'right', 'center', or 'justify'.\nSee [d3-sankey alignment docs](https://github.com/d3/d3-sankey#alignments) for more details.",
      "defaultValue": {
        "value": "'justify'",
        "computed": false
      }
    },
    "nodeClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each node,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "nodeStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each node,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "nodeSort": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node sort function"
    },
    "onMouseEnterNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node `mouseenter` event handler, called when user's mouse enters a node."
    },
    "onMouseLeaveNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node `mouseleave` event handler, called when user's mouse leaves a node."
    },
    "onMouseMoveNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node `mousemove` event handler, called when user's mouse moves within a node."
    },
    "onMouseDownNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node `mousedown` event handler, called when user's mouse button is depressed within a node."
    },
    "onMouseUpNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node `mouseup` event handler, called when user's mouse button is released within a node."
    },
    "onClickNode": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node `click` event handler, called when user clicks within a node."
    },
    "showLinks": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if link paths should be shown,\nor function (`showLink(link, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "linkClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Class attribute to be applied to each link,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "linkSort": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Link sort function"
    },
    "linkStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each link,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "onMouseEnterLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Link `mouseenter` event handler, called when user's mouse enters a link."
    },
    "onMouseLeaveLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Link `mouseleave` event handler, called when user's mouse leaves a link."
    },
    "onMouseMoveLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Link `mousemove` event handler, called when user's mouse moves within a link."
    },
    "onMouseDownLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Link `mousedown` event handler, called when user's mouse button is depressed within a link."
    },
    "onMouseUpLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Link `mouseup` event handler, called when user's mouse button is released within a link."
    },
    "onClickLink": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Link `click` event handler, called when user clicks within a link."
    },
    "showNodeTerminals": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if node terminals should be shown,\nor function (`showLink(link, graph)`) which returns a boolean.\nTerminals are bars that run alongside to show the amount\nwhich has flowed *in* but not *out*",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "nodeTerminalWidth": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "number"
          }
        ]
      },
      "required": false,
      "description": "Width (in pixels) of the node terminal rectangles,\nor accessor function `f(node, graph)` which returns a width.",
      "defaultValue": {
        "value": "5",
        "computed": false
      }
    },
    "nodeTerminalDistance": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "number"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Distance (in pixels) between nodes and their terminals,\nor accessor function `f(node, graph)` which returns a distance.",
      "defaultValue": {
        "value": "1",
        "computed": false
      }
    },
    "nodeTerminalClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each node terminal,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "nodeTerminalStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each node terminal,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "nodeTerminalAttributes": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Attributes object to be applied to each node terminal element,\nor accessor function which returns an object.",
      "defaultValue": {
        "value": "{ rx: 2, ry: 2 }",
        "computed": false
      }
    },
    "onMouseEnterNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node terminal `mouseenter` event handler, called when user's mouse enters a node terminal."
    },
    "onMouseLeaveNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node terminal `mouseleave` event handler, called when user's mouse leaves a node terminal."
    },
    "onMouseMoveNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node terminal `mousemove` event handler, called when user's mouse moves within a node terminal."
    },
    "onMouseDownNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node terminal `mousedown` event handler, called when user's mouse button is depressed within a node terminal."
    },
    "onMouseUpNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node terminal `mouseup` event handler, called when user's mouse button is released within a node terminal."
    },
    "onClickNodeTerminal": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Node terminal `click` event handler, called when user clicks within a node terminal."
    },
    "showNodeLabels": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if node labels should be shown,\nor function (`showLink(link, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "true",
        "computed": false
      }
    },
    "nodeLabelPlacement": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "enum",
            "value": [
              {
                "value": "'before'",
                "computed": false
              },
              {
                "value": "'after'",
                "computed": false
              },
              {
                "value": "'above'",
                "computed": false
              },
              {
                "value": "'below'",
                "computed": false
              }
            ]
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Placement of the node label relative to the node rectangle.\nExpects 'before', 'after', 'above' or 'below', or a function which returns one of these.\nBy default, labels in the left half of the diagram are placed 'after' and those in the right half 'before'",
      "defaultValue": {
        "value": "(node, graph) => {\n  return node.depth < graph.maxDepth / 2 ? 'after' : 'before';\n}",
        "computed": false
      }
    },
    "nodeLabelDistance": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "number"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Distance (in pixels) between nodes and their labels,\nor accessor function `f(node, graph)` which returns a distance.",
      "defaultValue": {
        "value": "4",
        "computed": false
      }
    },
    "nodeLabelText": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accessor function `nodeLabelText(node, graph)` which returns the content to be used for node labels.\nThe function may return a string/number (rendered as SVG `<text>`),\nor arbitrary React SVG element(s) (rendered as-is inside the SVG).\nNOTE: in the latter case (returning arbitrary SVG), `nodeLabelPlacement`, `nodeLabelDistance`,\n`nodeLabelClassName` and `nodeLabelStyle` props will not be applied -\nuser is responsible for all positioning and attributes on this element.",
      "defaultValue": {
        "value": "(node, graph, props) => {\n  if (has(node, 'name')) return node.name;\n  if (has(node, 'label')) return node.label;\n  return getValue(props.nodeId, node, graph, props);\n}",
        "computed": false
      }
    },
    "nodeLabelClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each node label,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "nodeLabelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each node label,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "showLinkLabels": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if link labels should be shown,\nor function (`showLink(link, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "false",
        "computed": false
      }
    },
    "linkLabelText": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accessor function `f(link, graph)` which returns the text to be used for link labels.",
      "defaultValue": {
        "value": "(link, graph, props) => {\n  const linkValue = link.value || 0;\n  const valueText = formatPrefix('.1~f', linkValue)(linkValue);\n  const sourceText = getValue(\n    props.nodeLabelText,\n    link.source,\n    graph,\n    props,\n  );\n  const targetText = getValue(\n    props.nodeLabelText,\n    link.target,\n    graph,\n    props,\n  );\n  return `${sourceText}→${targetText}: ${valueText}`;\n}",
        "computed": false
      }
    },
    "linkLabelClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each link label,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "linkLabelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each link label,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "linkLabelAttributes": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Attributes object to be applied to each link label element,\nor accessor function which returns an object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "linkLabelStartOffset": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "number"
          }
        ]
      },
      "required": false,
      "description": "`startOffset` attribute to apply to the link label `<textpath>` element.\nMay be a number (in SVG units) or percent string (`\"25%\"`)",
      "defaultValue": {
        "value": "'25%'",
        "computed": false
      }
    },
    "showLinkSourceLabels": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if link *source* labels should be shown,\nor function (`showLink(link, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "false",
        "computed": false
      }
    },
    "linkSourceLabelText": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accessor function `f(link, graph)` which returns the text to be used for link *source* labels.",
      "defaultValue": {
        "value": "(link, graph, props) => {\n  const valueRelative = link.valueSourceRelative;\n  if (valueRelative === null || !isFinite(valueRelative)) return '';\n  const percentText =\n    valueRelative < 0.001 ? '<0.1%' : numberFormat('.1~%')(valueRelative);\n  return `${percentText} to ${getValue(\n    props.nodeLabelText,\n    link.target,\n    graph,\n    props,\n  )}`;\n}",
        "computed": false
      }
    },
    "linkSourceLabelClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each link *source* label,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "linkSourceLabelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each link *source* label,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "linkSourceLabelAttributes": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Attributes object to be applied to each link *source* label,\nor accessor function which returns an object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "linkSourceLabelStartOffset": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "number"
          }
        ]
      },
      "required": false,
      "description": "`startOffset` attribute to apply to the link *source* label `<textpath>` element.\nMay be a number (in SVG units) or percent string (`\"25%\"`)",
      "defaultValue": {
        "value": "'2%'",
        "computed": false
      }
    },
    "showLinkTargetLabels": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "bool"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Boolean which determines if link *target* labels should be shown,\nor function (`showLink(link, graph)`) which returns a boolean",
      "defaultValue": {
        "value": "false",
        "computed": false
      }
    },
    "linkTargetLabelText": {
      "type": {
        "name": "func"
      },
      "required": false,
      "description": "Accessor function `f(link, graph)` which returns the text to be used for link *target* labels.",
      "defaultValue": {
        "value": "(link, graph, props) => {\n  const valueRelative = link.valueTargetRelative;\n  if (valueRelative === null || !isFinite(valueRelative)) return '';\n  const percentText =\n    valueRelative < 0.001 ? '<0.1%' : numberFormat('.1~%')(valueRelative);\n  return `${percentText} from ${getValue(\n    props.nodeLabelText,\n    link.source,\n    graph,\n    props,\n  )}`;\n}",
        "computed": false
      }
    },
    "linkTargetLabelClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute to be applied to each link *target* label,\nor accessor function which returns a class (string).",
      "defaultValue": {
        "value": "''",
        "computed": false
      }
    },
    "linkTargetLabelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each link *target* label,\nor accessor function which returns a style object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "linkTargetLabelAttributes": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Attributes object to be applied to each link *target* label,\nor accessor function which returns an object.",
      "defaultValue": {
        "value": "{}",
        "computed": false
      }
    },
    "linkTargetLabelStartOffset": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "number"
          }
        ]
      },
      "required": false,
      "description": "`startOffset` attribute to apply to the link *target* label `<textpath>` element.\nMay be a number (in SVG units) or percent string (`\"25%\"`)",
      "defaultValue": {
        "value": "'98%'",
        "computed": false
      }
    },
    "stepLabelText": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Text for step label or\naccessor function `f(step)` that returns the label text"
    },
    "stepLabelClassName": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "string"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "`className` attribute applied to each label,\nor accessor function which returns a class (string)"
    },
    "stepLabelStyle": {
      "type": {
        "name": "union",
        "value": [
          {
            "name": "object"
          },
          {
            "name": "func"
          }
        ]
      },
      "required": false,
      "description": "Inline style object to be applied to each label,\nor accessor function which returns an object"
    },
    "stepLabelPadding": {
      "type": {
        "name": "number"
      },
      "required": false,
      "description": "Vertical padding (in pixels) between step label and uppermost positioned node of that step",
      "defaultValue": {
        "value": "8",
        "computed": false
      }
    }
  }
}
