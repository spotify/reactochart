{"version":3,"sources":["src/AreaBarChart.js"],"names":["CustomPropTypes","AreaBarChart","nextProps","nextState","shouldUpdate","props","xScale","yScale","data","horizontal","x","xEnd","y","yEnd","barClassName","barStyle","map","d","i","callback","get","eventName","isFunction","partial","onMouseEnter","onMouseMove","onMouseLeave","className","style","key","xScaleType","yScaleType","rangeAxis","rangeDataType","rangeStartAccessor","rangeEndAccessor","Component","propTypes","func","array","bool","valueOrAccessor","oneOfType","string","object","onMouseMoveBar","onMouseEnterBar","onMouseLeaveBar","defaultProps"],"mappings":"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","file":"AreaBarChart.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport invariant from \"invariant\";\nimport PropTypes from \"prop-types\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport { hasXYScales, dataTypeFromScaleType } from \"./utils/Scale\";\nimport {\n  makeAccessor,\n  makeAccessor2,\n  getValue,\n  domainFromRangeData\n} from \"./utils/Data\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\nimport RangeRect from \"./RangeRect\";\n\n/**\n * `AreaBarChart` is a variation on the standard bar chart. Just like a normal bar chart, each bar represents a single\n * value on the *dependent* axis (Y axis for vertical bars), and the bar stretches from zero to this value.\n * However, on the *independent* axis, each bar represents a *range* (min/max) of values,\n * rather than being centered on a specific value.\n * In other words, the bar *lengths* act the same way as standard bar chart bars,\n * but their *thicknesses* are variable and meaningful.\n * `AreaBarChart`s are the correct way to display histograms with variable bin sizes.\n * They are so named because, in cases like these histograms, since both the bar thickness and length are meaningful,\n * so too is the bar's total *area*, unlike in other bar charts.\n */\n\nexport default class AreaBarChart extends React.Component {\n  static propTypes = {\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * Array of data to be plotted. One bar will be rendered per datum in this array.\n     */\n    data: PropTypes.array,\n    /**\n     * Boolean which determines whether the chart will use horizontal or vertical bars.\n     * When `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.\n     */\n    horizontal: PropTypes.bool,\n\n    /**\n     * Accessor function for bar X values, called once per bar (datum).\n     * If `horizontal` is `false`, this gets the start (min value) of the *independent* variable range, spanned by the bar's thickness.\n     * If `horizontal` is `true`, this gets the *dependent* variable value, the end of the bar's length\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (max X value) of the *independent* variable range, spanned by the bar's thickness.\n     * Should only be passed when `horizontal` is `false` (ignored otherwise).\n     */\n    xEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for bar Y values, called once per bar (datum).\n     * If `horizontal` is `true`, this gets the start (min value) of the *independent* variable range which is spanned by the bar's thickness.\n     * If `horizontal` is `false`, this gets the *dependent* variable value, the end of the bar's length\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (max Y value) of the *independent* variable range, spanned by the bar's thickness.\n     * Should only be passed when `horizontal` is `true` (ignored otherwise).\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n\n    /**\n     * Class attribute to be applied to each bar.\n     * or accessor function which returns a class;\n     */\n    barClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each bar,\n     * or accessor function which returns a style object;\n     */\n    barStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a bar.\n     */\n    onMouseMoveBar: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a bar.\n     */\n    onMouseEnterBar: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a bar.\n     */\n    onMouseLeaveBar: PropTypes.func\n  };\n  static defaultProps = {\n    data: [],\n    horizontal: false,\n    barClassName: \"\",\n    barStyle: {}\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\"barStyle\"]);\n    // console.log('should areabarchart update?', shouldUpdate);\n    return shouldUpdate;\n  }\n\n  static getDomain(props) {\n    const { xScaleType, yScaleType, horizontal, data } = props;\n\n    // only have to specify range axis domain, other axis uses default domainFromData\n    // for area bar chart, the independent variable is the range\n    // ie. the range controls the thickness of the bar\n    const rangeAxis = horizontal ? \"y\" : \"x\";\n    const rangeDataType = dataTypeFromScaleType(\n      rangeAxis === \"x\" ? xScaleType : yScaleType\n    );\n    // make accessor functions from getX|Y and getX|YEnd\n    const rangeStartAccessor = makeAccessor2(props[`${rangeAxis}`]);\n    const rangeEndAccessor = makeAccessor2(props[`${rangeAxis}End`]);\n\n    return {\n      [rangeAxis + \"Domain\"]: domainFromRangeData(\n        data,\n        rangeStartAccessor,\n        rangeEndAccessor,\n        rangeDataType\n      )\n    };\n  }\n\n  render() {\n    const {\n      xScale,\n      yScale,\n      data,\n      horizontal,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      barClassName,\n      barStyle\n    } = this.props;\n\n    return (\n      <g>\n        {data.map((d, i) => {\n          const [onMouseEnter, onMouseMove, onMouseLeave] = [\n            \"onMouseEnterBar\",\n            \"onMouseMoveBar\",\n            \"onMouseLeaveBar\"\n          ].map(eventName => {\n            // partially apply this bar's data point as 2nd callback argument\n            const callback = _.get(this.props, eventName);\n            return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n          });\n\n          return (\n            <RangeRect\n              {...{\n                xScale,\n                yScale,\n                className: `chart-area-bar ${getValue(barClassName, d, i)}`,\n                style: getValue(barStyle, d, i),\n                x: horizontal ? 0 : getValue(x, d, i),\n                xEnd: horizontal ? getValue(x, d, i) : getValue(xEnd, d, i),\n                y: !horizontal ? 0 : getValue(y, d, i),\n                yEnd: !horizontal ? getValue(y, d, i) : getValue(yEnd, d, i),\n                key: `chart-area-bar-${i}`,\n                onMouseEnter,\n                onMouseMove,\n                onMouseLeave\n              }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"]}