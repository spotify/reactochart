{"version":3,"sources":["src/AreaBarChart.js"],"names":["AreaBarChart","React","Component","shouldComponentUpdate","nextProps","nextState","shouldUpdate","props","getDomain","xScaleType","yScaleType","horizontal","data","rangeAxis","rangeDataType","rangeStartAccessor","rangeEndAccessor","render","xScale","yScale","x","xEnd","y","yEnd","barClassName","barStyle","map","d","i","onMouseEnter","onMouseMove","onMouseLeave","eventName","callback","_","get","isFunction","partial","className","style","key","PropTypes","func","array","bool","CustomPropTypes","valueOrAccessor","oneOfType","string","object","onMouseMoveBar","onMouseEnterBar","onMouseLeaveBar"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport RangeRect from \"./RangeRect\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport { domainFromRangeData, getValue, makeAccessor2 } from \"./utils/Data\";\nimport { dataTypeFromScaleType } from \"./utils/Scale\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\n\n/**\n * `AreaBarChart` is a variation on the standard bar chart. Just like a normal bar chart, each bar represents a single\n * value on the *dependent* axis (Y axis for vertical bars), and the bar stretches from zero to this value.\n * However, on the *independent* axis, each bar represents a *range* (min/max) of values,\n * rather than being centered on a specific value.\n * In other words, the bar *lengths* act the same way as standard bar chart bars,\n * but their *thicknesses* are variable and meaningful.\n * `AreaBarChart`s are the correct way to display histograms with variable bin sizes.\n * They are so named because, in cases like these histograms, since both the bar thickness and length are meaningful,\n * so too is the bar's total *area*, unlike in other bar charts.\n */\n\nexport default class AreaBarChart extends React.Component {\n  static propTypes = {\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * Array of data to be plotted. One bar will be rendered per datum in this array.\n     */\n    data: PropTypes.array,\n    /**\n     * Boolean which determines whether the chart will use horizontal or vertical bars.\n     * When `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.\n     */\n    horizontal: PropTypes.bool,\n\n    /**\n     * Accessor function for bar X values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the start (min value) of the *independent* variable range, spanned by the bar's thickness.\n     * If `horizontal` is `true`, this gets the *dependent* variable value, the end of the bar's length\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (max X value) of the *independent* variable range, spanned by the bar's thickness.\n     * Should only be passed when `horizontal` is `false` (ignored otherwise).\n     */\n    xEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for bar Y values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `true`, this gets the start (min value) of the *independent* variable range which is spanned by the bar's thickness.\n     * If `horizontal` is `false`, this gets the *dependent* variable value, the end of the bar's length\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (max Y value) of the *independent* variable range, spanned by the bar's thickness.\n     * Should only be passed when `horizontal` is `true` (ignored otherwise).\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n\n    /**\n     * Class attribute to be applied to each bar.\n     * or accessor function which returns a class;\n     */\n    barClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each bar,\n     * or accessor function which returns a style object;\n     */\n    barStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a bar.\n     */\n    onMouseMoveBar: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a bar.\n     */\n    onMouseEnterBar: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a bar.\n     */\n    onMouseLeaveBar: PropTypes.func\n  };\n  static defaultProps = {\n    data: [],\n    horizontal: false,\n    barClassName: \"\",\n    barStyle: {}\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\"barStyle\"]);\n    // console.log('should areabarchart update?', shouldUpdate);\n    return shouldUpdate;\n  }\n\n  static getDomain(props) {\n    const { xScaleType, yScaleType, horizontal, data } = props;\n\n    // only have to specify range axis domain, other axis uses default domainFromData\n    // for area bar chart, the independent variable is the range\n    // ie. the range controls the thickness of the bar\n    const rangeAxis = horizontal ? \"y\" : \"x\";\n    const rangeDataType = dataTypeFromScaleType(\n      rangeAxis === \"x\" ? xScaleType : yScaleType\n    );\n    // make accessor functions from getX|Y and getX|YEnd\n    const rangeStartAccessor = makeAccessor2(props[`${rangeAxis}`]);\n    const rangeEndAccessor = makeAccessor2(props[`${rangeAxis}End`]);\n\n    return {\n      [rangeAxis + \"Domain\"]: domainFromRangeData(\n        data,\n        rangeStartAccessor,\n        rangeEndAccessor,\n        rangeDataType\n      )\n    };\n  }\n\n  render() {\n    const {\n      xScale,\n      yScale,\n      data,\n      horizontal,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      barClassName,\n      barStyle\n    } = this.props;\n\n    return (\n      <g>\n        {data.map((d, i) => {\n          const [onMouseEnter, onMouseMove, onMouseLeave] = [\n            \"onMouseEnterBar\",\n            \"onMouseMoveBar\",\n            \"onMouseLeaveBar\"\n          ].map(eventName => {\n            // partially apply this bar's data point as 2nd callback argument\n            const callback = _.get(this.props, eventName);\n            return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n          });\n\n          return (\n            <RangeRect\n              {...{\n                xScale,\n                yScale,\n                className: `rct-chart-area-bar ${getValue(barClassName, d, i)}`,\n                style: getValue(barStyle, d, i),\n                x: horizontal ? 0 : getValue(x, d, i),\n                xEnd: horizontal ? getValue(x, d, i) : getValue(xEnd, d, i),\n                y: !horizontal ? 0 : getValue(y, d, i),\n                yEnd: !horizontal ? getValue(y, d, i) : getValue(yEnd, d, i),\n                key: `rct-chart-area-bar-${i}`,\n                onMouseEnter,\n                onMouseMove,\n                onMouseLeave\n              }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"],"file":"AreaBarChart.js"}