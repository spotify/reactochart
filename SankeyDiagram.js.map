{"version":3,"sources":["src/SankeyDiagram.js"],"names":["SankeyNode","props","graph","node","nodeClassName","nodeStyle","makeHandler","origHandler","_","isFunction","partial","x0","y0","Math","abs","x1","y1","onMouseEnterNode","onMouseLeaveNode","onMouseMoveNode","onMouseDownNode","onMouseUpNode","onClickNode","SankeyLink","link","linkPath","linkClassName","linkStyle","strokeWidth","width","onMouseEnterLink","onMouseLeaveLink","onMouseMoveLink","onMouseDownLink","onMouseUpLink","onClickLink","SankeyNodeTerminal","terminalValue","getWithNode","accessor","nodeTerminalWidth","distance","nodeTerminalDistance","nodeHeight","height","value","style","nodeTerminalStyle","className","nodeTerminalClassName","attributes","nodeTerminalAttributes","onMouseEnterNodeTerminal","onMouseLeaveNodeTerminal","onMouseMoveNodeTerminal","onMouseDownNodeTerminal","onMouseUpNodeTerminal","onClickNodeTerminal","SankeyNodeLabel","nodeLabelText","nodeId","getLabelText","placement","nodeLabelPlacement","nodeLabelDistance","labelContent","isNull","isUndefined","isTextLabel","isString","isNumber","baseClassName","nodeLabelClassName","baseStyle","nodeLabelStyle","position","textStyle","alignmentBaseline","textAnchor","x","y","console","warn","SankeyLinkLabel","getWithLink","linkLabelClassName","linkLabelStyle","linkLabelAttributes","startOffset","linkLabelStartOffset","linkPathId","linkLabelText","SankeyStepLabel","stepLabelPadding","stepLabelText","stepLabelClassName","stepLabelStyle","step","yPos","SVGContainer","otherProps","omit","standalone","enhanceGraph","nodes","forEach","sourceLinksSum","sourceLinks","reduce","sum","max","links","valueSourceRelative","get","valueTargetRelative","maxDepth","maxBy","depth","getLinkId","source","target","nodeAlignmentsByName","left","sankeyLeft","right","sankeyRight","center","sankeyCenter","justify","sankeyJustify","SankeyDiagram","React","Component","_makeSankeyGraph","innerWidth","marginLeft","marginRight","innerHeight","marginTop","marginBottom","makeSankey","size","nodeWidth","nodePadding","nodeAlign","nodeAlignment","shouldClone","cloneDeep","sankeyGraph","_graph","componentWillMount","componentWillReceiveProps","nextProps","sankeyLayoutPropKeys","hasChangedSankey","some","key","render","makeLinkPath","mapNodesInGroupIf","shouldShow","groupClassName","mapFunc","map","i","mapLinksInGroupIf","displayStepLabelsIf","depthMapXPos","depthMapYPos","n","min","stepLabelProps","showLinks","linkProps","showNodes","showNodeTerminals","showLinkLabels","showLinkSourceLabels","showLinkTargetLabels","hasLabel","labelProps","showNodeLabels","commonProps","linkSourceLabelText","linkSourceLabelClassName","linkSourceLabelStyle","linkSourceLabelAttributes","linkSourceLabelStartOffset","linkTargetLabelText","linkTargetLabelClassName","linkTargetLabelStyle","linkTargetLabelAttributes","linkTargetLabelStartOffset","PropTypes","arrayOf","object","isRequired","shape","oneOfType","string","number","bool","func","oneOf","index","rx","ry","has","name","label","valueText","format","sourceText","targetText","valueRelative","isFinite","percentText"],"mappings":";;;;;;;AAAA;;AAQA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,UAAU,GAAGC,KAAK,IAAI;AAC1B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,aAAf;AAA8BC,IAAAA;AAA9B,MAA4CJ,KAAlD,CAD0B,CAE1B;;AACA,QAAMK,WAAW,GAAGC,WAAW,IAC7BC,gBAAEC,UAAF,CAAaF,WAAb,IACIC,gBAAEE,OAAF,CAAUH,WAAV,EAAuBC,eAAvB,EAA0B;AAAEL,IAAAA,IAAF;AAAQD,IAAAA;AAAR,GAA1B,CADJ,GAEI,IAHN;;AAKA,SACE;AACE,IAAA,CAAC,EAAEC,IAAI,CAACQ,EADV;AAEE,IAAA,CAAC,EAAER,IAAI,CAACS,EAFV;AAGE,IAAA,KAAK,EAAEC,IAAI,CAACC,GAAL,CAASX,IAAI,CAACY,EAAL,GAAUZ,IAAI,CAACQ,EAAxB,CAHT;AAIE,IAAA,MAAM,EAAEE,IAAI,CAACC,GAAL,CAASX,IAAI,CAACa,EAAL,GAAUb,IAAI,CAACS,EAAxB,CAJV;AAKE,IAAA,SAAS,4BAAqB,oBAASR,aAAT,EAAwBD,IAAxB,EAA8BD,KAA9B,CAArB,CALX;AAME,IAAA,KAAK,EAAE,oBAASG,SAAT,EAAoBF,IAApB,EAA0BD,KAA1B,CANT;AAOE,IAAA,YAAY,EAAEI,WAAW,CAACL,KAAK,CAACgB,gBAAP,CAP3B;AAQE,IAAA,YAAY,EAAEX,WAAW,CAACL,KAAK,CAACiB,gBAAP,CAR3B;AASE,IAAA,WAAW,EAAEZ,WAAW,CAACL,KAAK,CAACkB,eAAP,CAT1B;AAUE,IAAA,WAAW,EAAEb,WAAW,CAACL,KAAK,CAACmB,eAAP,CAV1B;AAWE,IAAA,SAAS,EAAEd,WAAW,CAACL,KAAK,CAACoB,aAAP,CAXxB;AAYE,IAAA,OAAO,EAAEf,WAAW,CAACL,KAAK,CAACqB,WAAP;AAZtB,IADF;AAgBD,CAxBD;;AA0BA,MAAMC,UAAU,GAAGtB,KAAK,IAAI;AAC1B,QAAM;AAAEC,IAAAA,KAAF;AAASsB,IAAAA,IAAT;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA,aAAzB;AAAwCC,IAAAA;AAAxC,MAAsD1B,KAA5D,CAD0B,CAE1B;;AACA,QAAMK,WAAW,GAAGC,WAAW,IAC7BC,gBAAEC,UAAF,CAAaF,WAAb,IACIC,gBAAEE,OAAF,CAAUH,WAAV,EAAuBC,eAAvB,EAA0B;AAAEgB,IAAAA,IAAF;AAAQtB,IAAAA;AAAR,GAA1B,CADJ,GAEI,IAHN;;AAKA,SACE;AACE,IAAA,CAAC,EAAEuB,QADL;AAEE,IAAA,SAAS,4BAAqB,oBAASC,aAAT,EAAwBF,IAAxB,EAA8BtB,KAA9B,CAArB,CAFX;AAGE,IAAA,KAAK,oBACA,oBAASyB,SAAT,EAAoBH,IAApB,EAA0BtB,KAA1B,CADA;AAEH0B,MAAAA,WAAW,EAAEJ,IAAI,CAACK;AAFf,MAHP;AAOE,IAAA,YAAY,EAAEvB,WAAW,CAACL,KAAK,CAAC6B,gBAAP,CAP3B;AAQE,IAAA,YAAY,EAAExB,WAAW,CAACL,KAAK,CAAC8B,gBAAP,CAR3B;AASE,IAAA,WAAW,EAAEzB,WAAW,CAACL,KAAK,CAAC+B,eAAP,CAT1B;AAUE,IAAA,WAAW,EAAE1B,WAAW,CAACL,KAAK,CAACgC,eAAP,CAV1B;AAWE,IAAA,SAAS,EAAE3B,WAAW,CAACL,KAAK,CAACiC,aAAP,CAXxB;AAYE,IAAA,OAAO,EAAE5B,WAAW,CAACL,KAAK,CAACkC,WAAP;AAZtB,IADF;AAgBD,CAxBD;;AA0BA,MAAMC,kBAAkB,GAAGnC,KAAK,IAAI;AAClC,QAAM;AAAEE,IAAAA,IAAF;AAAQD,IAAAA;AAAR,MAAkBD,KAAxB;AACA,MAAI,CAACE,IAAI,CAACkC,aAAV,EAAyB,OAAO,IAAP;;AACzB,QAAM/B,WAAW,GAAGC,WAAW,IAC7BC,gBAAEC,UAAF,CAAaF,WAAb,IACIC,gBAAEE,OAAF,CAAUH,WAAV,EAAuBC,eAAvB,EAA0B;AAAEL,IAAAA,IAAF;AAAQD,IAAAA,KAAR;AAAeD,IAAAA;AAAf,GAA1B,CADJ,GAEI,IAHN;;AAIA,QAAMqC,WAAW,GAAGC,QAAQ,IAAI,oBAASA,QAAT,EAAmBpC,IAAnB,EAAyBD,KAAzB,EAAgCD,KAAhC,CAAhC;;AACA,QAAM4B,KAAK,GAAGS,WAAW,CAACrC,KAAK,CAACuC,iBAAP,CAAX,IAAwC,CAAtD;AACA,QAAMC,QAAQ,GAAGH,WAAW,CAACrC,KAAK,CAACyC,oBAAP,CAAX,IAA2C,CAA5D;AACA,QAAMC,UAAU,GAAG9B,IAAI,CAACC,GAAL,CAASX,IAAI,CAACa,EAAL,GAAUb,IAAI,CAACS,EAAxB,KAA+B,CAAlD;AACA,QAAMgC,MAAM,GACV,CAACD,UAAU,GAAGxC,IAAI,CAACkC,aAAlB,IAAmC,CAApC,KAA0ClC,IAAI,CAAC0C,KAAL,IAAc,CAAxD,KAA8D,CADhE;AAEA,QAAMC,KAAK,GAAGR,WAAW,CAACrC,KAAK,CAAC8C,iBAAP,CAAzB;AACA,QAAMC,SAAS,sCAA+BV,WAAW,CACvDrC,KAAK,CAACgD,qBADiD,CAA1C,CAAf;AAGA,QAAMC,UAAU,GAAGZ,WAAW,CAACrC,KAAK,CAACkD,sBAAP,CAA9B;AAEA,SACE;AACE,IAAA,CAAC,EAAEhD,IAAI,CAACY,EAAL,GAAU0B,QADf;AAEE,IAAA,CAAC,EAAEtC,IAAI,CAACS,EAAL,IAAW+B,UAAU,GAAGC,MAAxB;AAFL,KAGM;AAAEf,IAAAA,KAAF;AAASe,IAAAA,MAAT;AAAiBE,IAAAA,KAAjB;AAAwBE,IAAAA;AAAxB,GAHN,EAIME,UAJN;AAKE,IAAA,YAAY,EAAE5C,WAAW,CAACL,KAAK,CAACmD,wBAAP,CAL3B;AAME,IAAA,YAAY,EAAE9C,WAAW,CAACL,KAAK,CAACoD,wBAAP,CAN3B;AAOE,IAAA,WAAW,EAAE/C,WAAW,CAACL,KAAK,CAACqD,uBAAP,CAP1B;AAQE,IAAA,WAAW,EAAEhD,WAAW,CAACL,KAAK,CAACsD,uBAAP,CAR1B;AASE,IAAA,SAAS,EAAEjD,WAAW,CAACL,KAAK,CAACuD,qBAAP,CATxB;AAUE,IAAA,OAAO,EAAElD,WAAW,CAACL,KAAK,CAACwD,mBAAP;AAVtB,KADF;AAcD,CAjCD;;AAmCA,MAAMC,eAAe,GAAGzD,KAAK,IAAI;AAC/B,QAAM;AAAEE,IAAAA,IAAF;AAAQD,IAAAA,KAAR;AAAeyD,IAAAA,aAAf;AAA8BC,IAAAA;AAA9B,MAAyC3D,KAA/C;;AACA,QAAMqC,WAAW,GAAGC,QAAQ,IAAI,oBAASA,QAAT,EAAmBpC,IAAnB,EAAyBD,KAAzB,EAAgCD,KAAhC,CAAhC;;AACA,QAAM4D,YAAY,GAAGrD,gBAAEC,UAAF,CAAakD,aAAb,IAA8BA,aAA9B,GAA8CC,MAAnE;AACA,QAAME,SAAS,GAAGxB,WAAW,CAACrC,KAAK,CAAC8D,kBAAP,CAA7B;AACA,QAAMtB,QAAQ,GAAGH,WAAW,CAACrC,KAAK,CAAC+D,iBAAP,CAAX,IAAwC,CAAzD;AACA,QAAMC,YAAY,GAAG3B,WAAW,CAACuB,YAAD,CAAhC,CAN+B,CAO/B;;AACA,MACErD,gBAAE0D,MAAF,CAASD,YAAT,KACAzD,gBAAE2D,WAAF,CAAcF,YAAd,CADA,IAEAA,YAAY,KAAK,KAFjB,IAGAA,YAAY,KAAK,EAJnB,EAKE;AACA,WAAO,IAAP;AACD,GAf8B,CAiB/B;AACA;AACA;;;AACA,QAAMG,WAAW,GAAG5D,gBAAE6D,QAAF,CAAWJ,YAAX,KAA4BzD,gBAAE8D,QAAF,CAAWL,YAAX,CAAhD;;AACA,MAAI,CAACG,WAAL,EAAkB;AAChB,WAAOH,YAAP;AACD;;AAED,QAAMM,aAAa,mCAA4BjC,WAAW,CACxDrC,KAAK,CAACuE,kBADkD,CAAvC,CAAnB;AAGA,QAAMC,SAAS,GAAGnC,WAAW,CAACrC,KAAK,CAACyE,cAAP,CAA7B;AACA,MAAIC,QAAJ;AACA,MAAIC,SAAJ,CA9B+B,CAgC/B;;AACA,MAAId,SAAS,KAAK,OAAlB,EAA2B;AACzB;AACAc,IAAAA,SAAS;AACPC,MAAAA,iBAAiB,EAAE,UADZ;AAEPC,MAAAA,UAAU,EAAE;AAFL,OAGJL,SAHI,CAAT;AAKAE,IAAAA,QAAQ,GAAG;AACTI,MAAAA,CAAC,EAAE5E,IAAI,CAACQ,EAAL,GAAUE,IAAI,CAACC,GAAL,CAASX,IAAI,CAACY,EAAL,GAAUZ,IAAI,CAACQ,EAAxB,IAA8B,CADlC;AAETqE,MAAAA,CAAC,EAAE7E,IAAI,CAACS,EAAL,GAAU6B;AAFJ,KAAX;AAID,GAXD,MAWO,IAAIqB,SAAS,KAAK,OAAlB,EAA2B;AAChC;AACAc,IAAAA,SAAS;AACPC,MAAAA,iBAAiB,EAAE,SADZ;AAEPC,MAAAA,UAAU,EAAE;AAFL,OAGJL,SAHI,CAAT;AAKAE,IAAAA,QAAQ,GAAG;AACTI,MAAAA,CAAC,EAAE5E,IAAI,CAACQ,EAAL,GAAUE,IAAI,CAACC,GAAL,CAASX,IAAI,CAACY,EAAL,GAAUZ,IAAI,CAACQ,EAAxB,IAA8B,CADlC;AAETqE,MAAAA,CAAC,EAAE7E,IAAI,CAACa,EAAL,GAAUyB;AAFJ,KAAX;AAID,GAXM,MAWA,IAAIqB,SAAS,KAAK,QAAlB,EAA4B;AACjC;AACAc,IAAAA,SAAS;AACPC,MAAAA,iBAAiB,EAAE,QADZ;AAEPC,MAAAA,UAAU,EAAE;AAFL,OAGJL,SAHI,CAAT;AAKAE,IAAAA,QAAQ,GAAG;AACTI,MAAAA,CAAC,EAAE5E,IAAI,CAACQ,EAAL,GAAU8B,QADJ;AAETuC,MAAAA,CAAC,EAAE7E,IAAI,CAACS,EAAL,GAAUC,IAAI,CAACC,GAAL,CAASX,IAAI,CAACa,EAAL,GAAUb,IAAI,CAACS,EAAxB,IAA8B;AAFlC,KAAX;AAID,GAXM,MAWA;AACL,QAAI,CAACJ,gBAAE2D,WAAF,CAAcL,SAAd,CAAD,IAA6BA,SAAS,KAAK,OAA/C,EACEmB,OAAO,CAACC,IAAR,WACKpB,SADL,6EAFG,CAKL;;AACAc,IAAAA,SAAS;AACPC,MAAAA,iBAAiB,EAAE,QADZ;AAEPC,MAAAA,UAAU,EAAE;AAFL,OAGJL,SAHI,CAAT;AAKAE,IAAAA,QAAQ,GAAG;AACTI,MAAAA,CAAC,EAAE5E,IAAI,CAACY,EAAL,GAAU0B,QADJ;AAETuC,MAAAA,CAAC,EAAE7E,IAAI,CAACS,EAAL,GAAUC,IAAI,CAACC,GAAL,CAASX,IAAI,CAACa,EAAL,GAAUb,IAAI,CAACS,EAAxB,IAA8B;AAFlC,KAAX;AAID;;AAED,QAAMoC,SAAS,aAAMuB,aAAN,gCAAf;AACA,SACE,kDAAUI,QAAV;AAAoB,IAAA,SAAS,EAAE3B,SAA/B;AAA0C,IAAA,KAAK,EAAE4B;AAAjD,MACGX,YADH,CADF;AAKD,CAzFD;;AA2FA,MAAMkB,eAAe,GAAGlF,KAAK,IAAI;AAC/B,QAAM;AAAEuB,IAAAA,IAAF;AAAQtB,IAAAA;AAAR,MAAkBD,KAAxB;;AACA,QAAMmF,WAAW,GAAG7C,QAAQ,IAAI,oBAASA,QAAT,EAAmBf,IAAnB,EAAyBtB,KAAzB,EAAgCD,KAAhC,CAAhC;;AACA,QAAM+C,SAAS,mCAA4BoC,WAAW,CACpDnF,KAAK,CAACoF,kBAAN,IAA4B,EADwB,CAAvC,CAAf;AAGA,QAAMvC,KAAK,GAAGsC,WAAW,CAACnF,KAAK,CAACqF,cAAN,IAAwB,EAAzB,CAAzB;AACA,QAAMpC,UAAU,GAAGkC,WAAW,CAACnF,KAAK,CAACsF,mBAAN,IAA6B,EAA9B,CAA9B;AACA,QAAMC,WAAW,GAAGJ,WAAW,CAACnF,KAAK,CAACwF,oBAAN,IAA8B,CAA/B,CAA/B;AAEA,SACE;AAAM,IAAA,SAAS,EAAEzC,SAAjB;AAA4B,IAAA,KAAK,EAAEF;AAAnC,KAA8CI,UAA9C,GACE;AAAU,IAAA,WAAW,EAAEsC,WAAvB;AAAoC,IAAA,SAAS,aAAMvF,KAAK,CAACyF,UAAZ;AAA7C,KACGN,WAAW,CAACnF,KAAK,CAAC0F,aAAP,CADd,CADF,CADF;AAOD,CAjBD;;AAmBA,MAAMC,eAAe,GAAG3F,KAAK,IAAI;AAC/B,QAAM;AACJ8E,IAAAA,CADI;AAEJC,IAAAA,CAFI;AAGJa,IAAAA,gBAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,kBALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA;AAPI,MAQFhG,KARJ;AAUA,MAAIiG,IAAI,GAAGlB,CAAX;;AAEA,MAAIxE,gBAAE8D,QAAF,CAAWuB,gBAAX,CAAJ,EAAkC;AAChCK,IAAAA,IAAI,GAAGA,IAAI,GAAGL,gBAAd;AACD;;AAED,SACE;AACE,IAAA,SAAS,2BAAoB,oBAASE,kBAAT,EAA6BE,IAA7B,CAApB,CADX;AAEE,IAAA,KAAK,EAAE,oBAASD,cAAT,EAAyBC,IAAzB,CAFT;AAGE,IAAA,CAAC,EAAElB,CAHL;AAIE,IAAA,CAAC,EAAEmB,IAJL;AAKE,IAAA,GAAG,iBAAUnB,CAAV,cAAekB,IAAf;AALL,KAOG,oBAASH,aAAT,EAAwBG,IAAxB,CAPH,CADF;AAWD,CA5BD;;AA8BA,MAAME,YAAY,GAAGlG,KAAK,IAAI;AAC5B,QAAMmG,UAAU,GAAG5F,gBAAE6F,IAAF,CAAOpG,KAAP,EAAc,CAAC,YAAD,CAAd,CAAnB;;AACA,MAAIA,KAAK,CAACqG,UAAV,EAAsB;AACpB,WAAO,oCAASF,UAAT,CAAP;AACD;;AACD,SAAO,kCAAOA,UAAP,CAAP;AACD,CAND;AAQA;;;;;;;AAKA,SAASG,YAAT,CAAsBrG,KAAtB,EAA6B;AAC3BA,EAAAA,KAAK,CAACsG,KAAN,CAAYC,OAAZ,CAAoBtG,IAAI,IAAI;AAC1B,UAAMuG,cAAc,GAAG,CAACvG,IAAI,CAACwG,WAAL,IAAoB,EAArB,EAAyBC,MAAzB,CACrB,CAACC,GAAD,EAAMrF,IAAN,KAAeqF,GAAG,GAAGrF,IAAI,CAACqB,KADL,EAErB,CAFqB,CAAvB;AAIA1C,IAAAA,IAAI,CAACkC,aAAL,GAAqBxB,IAAI,CAACiG,GAAL,CAAS3G,IAAI,CAAC0C,KAAL,GAAa6D,cAAtB,EAAsC,CAAtC,CAArB;AACD,GAND;AAOAxG,EAAAA,KAAK,CAAC6G,KAAN,CAAYN,OAAZ,CAAoBjF,IAAI,IAAI;AAC1BA,IAAAA,IAAI,CAACwF,mBAAL,GACE,CAACxF,IAAI,CAACqB,KAAL,IAAc,CAAf,IAAoBrC,gBAAEyG,GAAF,CAAMzF,IAAN,EAAY,cAAZ,EAA4B,CAA5B,CADtB;AAEAA,IAAAA,IAAI,CAAC0F,mBAAL,GACE,CAAC1F,IAAI,CAACqB,KAAL,IAAc,CAAf,IAAoBrC,gBAAEyG,GAAF,CAAMzF,IAAN,EAAY,cAAZ,EAA4B,CAA5B,CADtB;AAED,GALD;AAOAtB,EAAAA,KAAK,CAACiH,QAAN,GAAiB3G,gBAAE4G,KAAF,CAAQlH,KAAK,CAACsG,KAAd,EAAqB,OAArB,CAAjB;AACAtG,EAAAA,KAAK,CAACiH,QAAN,GAAiBjH,KAAK,CAACsG,KAAN,CAAYI,MAAZ,CACf,CAACE,GAAD,EAAM3G,IAAN,KAAeU,IAAI,CAACiG,GAAL,CAAS3G,IAAI,CAACkH,KAAL,IAAc,CAAvB,EAA0BP,GAA1B,CADA,EAEf,CAFe,CAAjB;AAIA,SAAO5G,KAAP;AACD;;AAED,SAASoH,SAAT,CAAmB9F,IAAnB,EAAyBoC,MAAzB,EAAiC;AAC/B,wBAAeA,MAAM,CAACpC,IAAI,CAAC+F,MAAN,CAArB,iBAAyC3D,MAAM,CAACpC,IAAI,CAACgG,MAAN,CAA/C;AACD;;AAED,MAAMC,oBAAoB,GAAG;AAC3BC,EAAAA,IAAI,EAAEC,oBADqB;AAE3BC,EAAAA,KAAK,EAAEC,qBAFoB;AAG3BC,EAAAA,MAAM,EAAEC,sBAHmB;AAI3BC,EAAAA,OAAO,EAAEC;AAJkB,CAA7B;AAOA;;;;;AAIe,MAAMC,aAAN,SAA4BC,eAAMC,SAAlC,CAA4C;AA+fzDC,EAAAA,gBAAgB,GAAG;AACjB,UAAMC,UAAU,GACd,KAAKrI,KAAL,CAAW4B,KAAX,IAAoB,KAAK5B,KAAL,CAAWsI,UAAX,GAAwB,KAAKtI,KAAL,CAAWuI,WAAvD,CADF;AAEA,UAAMC,WAAW,GACf,KAAKxI,KAAL,CAAW2C,MAAX,IAAqB,KAAK3C,KAAL,CAAWyI,SAAX,GAAuB,KAAKzI,KAAL,CAAW0I,YAAvD,CADF;AAEA,UAAMC,UAAU,GAAG,wBAChBC,IADgB,CACX,CAACP,UAAD,EAAaG,WAAb,CADW,EAEhB7E,MAFgB,CAET,KAAK3D,KAAL,CAAW2D,MAFF,EAGhBkF,SAHgB,CAGN,KAAK7I,KAAL,CAAW6I,SAHL,EAIhBC,WAJgB,CAIJ,KAAK9I,KAAL,CAAW8I,WAJP,EAKhBC,SALgB,CAMfvB,oBAAoB,CAAC,KAAKxH,KAAL,CAAWgJ,aAAZ,CAApB,IACExB,oBAAoB,CAACO,OAPR,CAAnB;AAUA,UAAMxB,KAAK,GAAG,KAAKvG,KAAL,CAAWiJ,WAAX,GACV1I,gBAAE2I,SAAF,CAAY,KAAKlJ,KAAL,CAAWuG,KAAvB,CADU,GAEV,KAAKvG,KAAL,CAAWuG,KAFf;AAGA,UAAMO,KAAK,GAAG,KAAK9G,KAAL,CAAWiJ,WAAX,GACV1I,gBAAE2I,SAAF,CAAY,KAAKlJ,KAAL,CAAW8G,KAAvB,CADU,GAEV,KAAK9G,KAAL,CAAW8G,KAFf;AAGA,UAAMqC,WAAW,GAAGR,UAAU,CAAC;AAAEpC,MAAAA,KAAF;AAASO,MAAAA;AAAT,KAAD,CAA9B;AACA,SAAKsC,MAAL,GAAc9C,YAAY,CAAC6C,WAAD,CAA1B;AACD;;AAEDE,EAAAA,kBAAkB,GAAG;AACnB,SAAKjB,gBAAL;AACD;;AACDkB,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC;AACA,UAAMC,oBAAoB,GAAG,CAC3B,OAD2B,EAE3B,OAF2B,EAG3B,OAH2B,EAI3B,QAJ2B,EAK3B,WAL2B,EAM3B,cAN2B,EAO3B,YAP2B,EAQ3B,aAR2B,EAS3B,QAT2B,EAU3B,WAV2B,EAW3B,aAX2B,EAY3B,eAZ2B,CAA7B;;AAeA,UAAMC,gBAAgB,GAAGlJ,gBAAEmJ,IAAF,CAAOF,oBAAP,EAA6BG,GAAG,IAAI;AAC3D,aAAOJ,SAAS,CAACI,GAAD,CAAT,KAAmB,KAAK3J,KAAL,CAAW2J,GAAX,CAA1B;AACD,KAFwB,CAAzB;;AAGA,QAAIF,gBAAJ,EAAsB,KAAKrB,gBAAL;AACvB;;AAEDwB,EAAAA,MAAM,GAAG;AACP,UAAM;AACJhI,MAAAA,KADI;AAEJe,MAAAA,MAFI;AAGJE,MAAAA,KAHI;AAIJwD,MAAAA,UAJI;AAKJ1C,MAAAA,MALI;AAMJ8E,MAAAA,SANI;AAOJC,MAAAA,YAPI;AAQJJ,MAAAA,UARI;AASJC,MAAAA;AATI,QAUF,KAAKvI,KAVT;AAYA,UAAMC,KAAK,GAAG,KAAKmJ,MAAnB;AACA,UAAMS,YAAY,GAAG,qCAArB;AACA,UAAM9G,SAAS,gCAAyB,KAAK/C,KAAL,CAAW+C,SAApC,CAAf;AACA,UAAMsF,UAAU,GAAGzG,KAAK,IAAI0G,UAAU,GAAGC,WAAjB,CAAxB;AACA,UAAMC,WAAW,GAAG7F,MAAM,IAAI8F,SAAS,GAAGC,YAAhB,CAA1B;;AAEA,aAASoB,iBAAT,CAA2BC,UAA3B,EAAuCC,cAAvC,EAAuDC,OAAvD,EAAgE;AAC9D,UAAI,CAACF,UAAL,EAAiB,OAAO,IAAP;AACjB,aACE;AAAG,QAAA,SAAS,EAAEC;AAAd,SACG,CAAC/J,KAAK,CAACsG,KAAN,IAAe,EAAhB,EAAoB2D,GAApB,CAAwB,CAAChK,IAAD,EAAOiK,CAAP,KAAa;AACpC,YAAI,CAAC,oBAASJ,UAAT,EAAqB7J,IAArB,EAA2BD,KAA3B,CAAL,EAAwC,OAAO,IAAP;AACxC,cAAM0J,GAAG,kBAAWhG,MAAM,CAACzD,IAAD,CAAjB,CAAT;AACA,eAAO+J,OAAO,CAAC/J,IAAD,EAAOiK,CAAP,EAAUR,GAAV,CAAd;AACD,OAJA,CADH,CADF;AASD;;AAED,aAASS,iBAAT,CAA2BL,UAA3B,EAAuCC,cAAvC,EAAuDC,OAAvD,EAAgE;AAC9D,UAAI,CAACF,UAAL,EAAiB,OAAO,IAAP;AACjB,aACE;AAAG,QAAA,SAAS,EAAEC;AAAd,SACG,CAAC/J,KAAK,CAAC6G,KAAN,IAAe,EAAhB,EAAoBoD,GAApB,CAAwB,CAAC3I,IAAD,EAAO4I,CAAP,KAAa;AACpC,YAAI,CAAC,oBAASJ,UAAT,EAAqBxI,IAArB,EAA2BtB,KAA3B,CAAL,EAAwC,OAAO,IAAP;AACxC,cAAM0J,GAAG,kBAAWhG,MAAM,CAACpC,IAAI,CAAC+F,MAAN,CAAjB,iBAAqC3D,MAAM,CAACpC,IAAI,CAACgG,MAAN,CAA3C,CAAT;AACA,eAAO0C,OAAO,CAAC1I,IAAD,EAAO4I,CAAP,EAAUR,GAAV,CAAd;AACD,OAJA,CADH,CADF;AASD;;AAED,aAASU,mBAAT,CACExE,aADF,EAEEC,kBAFF,EAGEC,cAHF,EAIEH,gBAJF,EAKEW,KALF,EAME;AACA,UAAI,CAACV,aAAL,EAAoB;AAClB,eAAO,IAAP;AACD;;AAED,YAAMyE,YAAY,GAAG,EAArB;AACA,YAAMC,YAAY,GAAG,EAArB;AAEAhE,MAAAA,KAAK,CAACC,OAAN,CAAcgE,CAAC,IAAI;AACjBF,QAAAA,YAAY,CAACE,CAAC,CAACpD,KAAH,CAAZ,GAAwBoD,CAAC,CAAC9J,EAA1B,CADiB,CAGjB;;AACA6J,QAAAA,YAAY,CAACC,CAAC,CAACpD,KAAH,CAAZ,GAAwBmD,YAAY,CAACC,CAAC,CAACpD,KAAH,CAAZ,GACpBxG,IAAI,CAAC6J,GAAL,CAASD,CAAC,CAAC7J,EAAX,EAAe4J,YAAY,CAACC,CAAC,CAACpD,KAAH,CAA3B,CADoB,GAEpBoD,CAAC,CAAC7J,EAFN;AAGD,OAPD;AASA,aACE;AAAG,QAAA,SAAS,EAAC,iBAAb;AAA+B,QAAA,KAAK,EAAE0H,UAAtC;AAAkD,QAAA,MAAM,EAAE;AAA1D,SACG9H,gBAAE2J,GAAF,CAAMI,YAAN,EAAoB,CAACxF,CAAD,EAAIkB,IAAJ,KAAa;AAChC,cAAM0E,cAAc,GAAG;AACrB3F,UAAAA,CAAC,EAAEwF,YAAY,CAACvE,IAAD,CADM;AAErBA,UAAAA,IAFqB;AAGrBlB,UAAAA,CAHqB;AAIrBe,UAAAA,aAJqB;AAKrBC,UAAAA,kBALqB;AAMrBF,UAAAA,gBANqB;AAOrBG,UAAAA;AAPqB,SAAvB;AAUA,eACE,6BAAC,eAAD;AAAiB,UAAA,GAAG,qBAAcC,IAAd;AAApB,WAA8C0E,cAA9C,EADF;AAGD,OAdA,CADH,CADF;AAmBD;;AAED,WACE,6BAAC,YAAD,EAAkB;AAAErE,MAAAA,UAAF;AAAczE,MAAAA,KAAd;AAAqBe,MAAAA,MAArB;AAA6BI,MAAAA,SAA7B;AAAwCF,MAAAA;AAAxC,KAAlB,EACE;AACE,MAAA,KAAK,EAAEwF,UADT;AAEE,MAAA,MAAM,EAAEG,WAFV;AAGE,MAAA,SAAS,sBAAeF,UAAf,eAA8BG,SAA9B;AAHX,OAKG4B,mBAAmB,CAClB,KAAKrK,KAAL,CAAW6F,aADO,EAElB,KAAK7F,KAAL,CAAW8F,kBAFO,EAGlB,KAAK9F,KAAL,CAAW+F,cAHO,EAIlB,KAAK/F,KAAL,CAAW4F,gBAJO,EAKlB3F,KAAK,CAACsG,KALY,CALtB,EAYG6D,iBAAiB,CAChB,KAAKpK,KAAL,CAAW2K,SADK,EAEhB,kBAFgB,EAGhB,CAACpJ,IAAD,EAAO4I,CAAP,EAAUR,GAAV,KAAkB;AAChB,YAAMiB,SAAS,qBACV,KAAK5K,KADK;AAEb2J,QAAAA,GAFa;AAGb1J,QAAAA,KAHa;AAIbsB,QAAAA,IAJa;AAKbC,QAAAA,QAAQ,EAAEqI,YAAY,CAACtI,IAAD;AALT,QAAf;;AAOA,aAAO,6BAAC,UAAD,EAAgBqJ,SAAhB,CAAP;AACD,KAZe,CAZpB,EA0BGd,iBAAiB,CAChB,KAAK9J,KAAL,CAAW6K,SADK,EAEhB,kBAFgB,EAGhB,CAAC3K,IAAD,EAAOiK,CAAP,EAAUR,GAAV,KAAkB;AAChB,aAAO,6BAAC,UAAD,eAAgB,KAAK3J,KAArB,EAAgC;AAAE2J,QAAAA,GAAF;AAAO1J,QAAAA,KAAP;AAAcC,QAAAA;AAAd,OAAhC,EAAP;AACD,KALe,CA1BpB,OAiCG4J,iBAAiB,CAChB,KAAK9J,KAAL,CAAW8K,iBADK,EAEhB,2BAFgB,EAGhB,CAAC5K,IAAD,EAAOiK,CAAP,EAAUR,GAAV,KAAkB;AAChB,aACE,6BAAC,kBAAD,eAAwB,KAAK3J,KAA7B,EAAwC;AAAE2J,QAAAA,GAAF;AAAO1J,QAAAA,KAAP;AAAcC,QAAAA;AAAd,OAAxC,EADF;AAGD,KAPe,CAjCpB,OA4CG,KAAKF,KAAL,CAAW+K,cAAX,IACD,KAAK/K,KAAL,CAAWgL,oBADV,IAED,KAAKhL,KAAL,CAAWiL,oBAFV,GAGC,2CACGhL,KAAK,CAAC6G,KAAN,CAAYoD,GAAZ,CAAgB3I,IAAI,IAAI;AACvB,YAAM2J,QAAQ,GACZ,oBAAS,KAAKlL,KAAL,CAAW+K,cAApB,EAAoCxJ,IAApC,EAA0CtB,KAA1C,KACA,oBAAS,KAAKD,KAAL,CAAWgL,oBAApB,EAA0CzJ,IAA1C,EAAgDtB,KAAhD,CADA,IAEA,oBAAS,KAAKD,KAAL,CAAWiL,oBAApB,EAA0C1J,IAA1C,EAAgDtB,KAAhD,CAHF;AAIA,UAAI,CAACiL,QAAL,EAAe,OAAO,IAAP;AAEf,YAAM1J,QAAQ,GAAGqI,YAAY,CAACtI,IAAD,CAA7B;AACA,YAAMkE,UAAU,aAAM4B,SAAS,CAAC9F,IAAD,EAAOoC,MAAP,CAAf,UAAhB;AACA,aAAO;AAAM,QAAA,EAAE,EAAE8B,UAAV;AAAsB,QAAA,CAAC,EAAEjE,QAAzB;AAAmC,QAAA,GAAG,EAAEiE;AAAxC,QAAP;AACD,KAVA,CADH,CAHD,GAgBG,IA5DN,EA6DG2E,iBAAiB,CAChB,KAAKpK,KAAL,CAAW+K,cADK,EAEhB,wBAFgB,EAGhB,CAACxJ,IAAD,EAAO4I,CAAP,EAAUR,GAAV,KAAkB;AAChB,YAAMlE,UAAU,aAAM4B,SAAS,CAAC9F,IAAD,EAAOoC,MAAP,CAAf,UAAhB;;AACA,YAAMwH,UAAU,qBACX,KAAKnL,KADM;AAEd2J,QAAAA,GAFc;AAGd1J,QAAAA,KAHc;AAIdsB,QAAAA,IAJc;AAKdkE,QAAAA;AALc,QAAhB;;AAOA,aAAO,6BAAC,eAAD,EAAqB0F,UAArB,CAAP;AACD,KAbe,CA7DpB,EA4EGrB,iBAAiB,CAChB,KAAK9J,KAAL,CAAWoL,cADK,EAEhB,wBAFgB,EAGhB,CAAClL,IAAD,EAAOiK,CAAP,EAAUR,GAAV,KAAkB;AAChB,aACE,6BAAC,eAAD,eAAqB,KAAK3J,KAA1B,EAAqC;AAAE2J,QAAAA,GAAF;AAAO1J,QAAAA,KAAP;AAAcC,QAAAA;AAAd,OAArC,EADF;AAGD,KAPe,CA5EpB,OAqFGkK,iBAAiB,CAChB,KAAKpK,KAAL,CAAWgL,oBADK,EAEhB,+BAFgB,EAGhB,CAACzJ,IAAD,EAAO4I,CAAP,EAAUR,GAAV,KAAkB;AAChB,YAAMlE,UAAU,aAAM4B,SAAS,CAAC9F,IAAD,EAAOoC,MAAP,CAAf,UAAhB;;AACA,YAAM0H,WAAW,qBACZ,KAAKrL,KADO;AAEf2J,QAAAA,GAFe;AAGf1J,QAAAA,KAHe;AAIfsB,QAAAA,IAJe;AAKfkE,QAAAA;AALe,QAAjB;;AAOA,YAAM0F,UAAU,qBACXE,WADW;AAEd3F,QAAAA,aAAa,EAAE,KAAK1F,KAAL,CAAWsL,mBAFZ;AAGdlG,QAAAA,kBAAkB,EAAE,KAAKpF,KAAL,CAAWuL,wBAHjB;AAIdlG,QAAAA,cAAc,EAAE,KAAKrF,KAAL,CAAWwL,oBAJb;AAKdlG,QAAAA,mBAAmB,EAAE,KAAKtF,KAAL,CAAWyL,yBALlB;AAMdjG,QAAAA,oBAAoB,EAAE,KAAKxF,KAAL,CAAW0L;AANnB,QAAhB;;AASA,aAAO,6BAAC,eAAD,EAAqBP,UAArB,CAAP;AACD,KAtBe,CArFpB,EA6GGf,iBAAiB,CAChB,KAAKpK,KAAL,CAAWiL,oBADK,EAEhB,+BAFgB,EAGhB,CAAC1J,IAAD,EAAO4I,CAAP,EAAUR,GAAV,KAAkB;AAChB,YAAMlE,UAAU,aAAM4B,SAAS,CAAC9F,IAAD,EAAOoC,MAAP,CAAf,UAAhB;;AACA,YAAM0H,WAAW,qBACZ,KAAKrL,KADO;AAEf2J,QAAAA,GAFe;AAGf1J,QAAAA,KAHe;AAIfsB,QAAAA,IAJe;AAKfkE,QAAAA;AALe,QAAjB;;AAOA,YAAM0F,UAAU,qBACXE,WADW;AAEd3F,QAAAA,aAAa,EAAE,KAAK1F,KAAL,CAAW2L,mBAFZ;AAGdvG,QAAAA,kBAAkB,EAAE,KAAKpF,KAAL,CAAW4L,wBAHjB;AAIdvG,QAAAA,cAAc;AACZR,UAAAA,UAAU,EAAE;AADA,WAET,KAAK7E,KAAL,CAAW6L,oBAFF,CAJA;AAQdvG,QAAAA,mBAAmB,EAAE,KAAKtF,KAAL,CAAW8L,yBARlB;AASdtG,QAAAA,oBAAoB,EAAE,KAAKxF,KAAL,CAAW+L;AATnB,QAAhB;;AAYA,aAAO,6BAAC,eAAD,EAAqBZ,UAArB,CAAP;AACD,KAzBe,CA7GpB,CADF,CADF;AA6ID;;AAxxBwD;;;;gBAAtClD,a,eACA;AACjB;;;;AAIA1B,EAAAA,KAAK,EAAEyF,mBAAUC,OAAV,CAAkBD,mBAAUE,MAA5B,EAAoCC,UAL1B;;AAMjB;;;;;;AAMArF,EAAAA,KAAK,EAAEkF,mBAAUC,OAAV,CACLD,mBAAUI,KAAV,CAAgB;AACd9E,IAAAA,MAAM,EAAE0E,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUO,MAA7B,CAApB,CADM;AAEdhF,IAAAA,MAAM,EAAEyE,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUO,MAA7B,CAApB,CAFM;AAGd3J,IAAAA,KAAK,EAAEoJ,mBAAUO;AAHH,GAAhB,CADK,EAMLJ,UAlBe;;AAmBjB;;;AAGAvK,EAAAA,KAAK,EAAEoK,mBAAUO,MAAV,CAAiBJ,UAtBP;;AAuBjB;;;AAGAxJ,EAAAA,MAAM,EAAEqJ,mBAAUO,MAAV,CAAiBJ,UA1BR;;AA2BjB;;;;;AAKAlD,EAAAA,WAAW,EAAE+C,mBAAUQ,IAhCN;;AAiCjB;;;AAGAzJ,EAAAA,SAAS,EAAEiJ,mBAAUM,MApCJ;;AAqCjB;;;AAGAzJ,EAAAA,KAAK,EAAEmJ,mBAAUE,MAxCA;;AAyCjB;;;;;AAKA7F,EAAAA,UAAU,EAAE2F,mBAAUQ,IA9CL;;AA+CjB;;;AAGA/D,EAAAA,SAAS,EAAEuD,mBAAUO,MAlDJ;;AAmDjB;;;AAGA7D,EAAAA,YAAY,EAAEsD,mBAAUO,MAtDP;;AAuDjB;;;AAGAjE,EAAAA,UAAU,EAAE0D,mBAAUO,MA1DL;;AA2DjB;;;AAGAhE,EAAAA,WAAW,EAAEyD,mBAAUO,MA9DN;;AAgEjB;;;;AAIA1B,EAAAA,SAAS,EAAEmB,mBAAUK,SAAV,CAAoB,CAACL,mBAAUQ,IAAX,EAAiBR,mBAAUS,IAA3B,CAApB,CApEM;;AAqEjB;;;;;AAKA9I,EAAAA,MAAM,EAAEqI,mBAAUS,IA1ED;;AA2EjB;;;AAGA5D,EAAAA,SAAS,EAAEmD,mBAAUO,MA9EJ;;AA+EjB;;;AAGAzD,EAAAA,WAAW,EAAEkD,mBAAUO,MAlFN;;AAmFjB;;;;;AAKAvD,EAAAA,aAAa,EAAEgD,mBAAUU,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4B,SAA5B,CAAhB,CAxFE;;AAyFjB;;;;AAIAvM,EAAAA,aAAa,EAAE6L,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUS,IAA7B,CAApB,CA7FE;;AA8FjB;;;;AAIArM,EAAAA,SAAS,EAAE4L,mBAAUK,SAAV,CAAoB,CAACL,mBAAUE,MAAX,EAAmBF,mBAAUS,IAA7B,CAApB,CAlGM;;AAmGjB;;;AAGAzL,EAAAA,gBAAgB,EAAEgL,mBAAUS,IAtGX;;AAuGjB;;;AAGAxL,EAAAA,gBAAgB,EAAE+K,mBAAUS,IA1GX;;AA2GjB;;;AAGAvL,EAAAA,eAAe,EAAE8K,mBAAUS,IA9GV;;AA+GjB;;;AAGAtL,EAAAA,eAAe,EAAE6K,mBAAUS,IAlHV;;AAmHjB;;;AAGArL,EAAAA,aAAa,EAAE4K,mBAAUS,IAtHR;;AAuHjB;;;AAGApL,EAAAA,WAAW,EAAE2K,mBAAUS,IA1HN;;AA4HjB;;;;AAIA9B,EAAAA,SAAS,EAAEqB,mBAAUK,SAAV,CAAoB,CAACL,mBAAUQ,IAAX,EAAiBR,mBAAUS,IAA3B,CAApB,CAhIM;;AAiIjB;;;;AAIAhL,EAAAA,aAAa,EAAEuK,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUS,IAA7B,CAApB,CArIE;;AAsIjB;;;;AAIA/K,EAAAA,SAAS,EAAEsK,mBAAUK,SAAV,CAAoB,CAACL,mBAAUE,MAAX,EAAmBF,mBAAUS,IAA7B,CAApB,CA1IM;;AA2IjB;;;AAGA5K,EAAAA,gBAAgB,EAAEmK,mBAAUS,IA9IX;;AA+IjB;;;AAGA3K,EAAAA,gBAAgB,EAAEkK,mBAAUS,IAlJX;;AAmJjB;;;AAGA1K,EAAAA,eAAe,EAAEiK,mBAAUS,IAtJV;;AAuJjB;;;AAGAzK,EAAAA,eAAe,EAAEgK,mBAAUS,IA1JV;;AA2JjB;;;AAGAxK,EAAAA,aAAa,EAAE+J,mBAAUS,IA9JR;;AA+JjB;;;AAGAvK,EAAAA,WAAW,EAAE8J,mBAAUS,IAlKN;;AAoKjB;;;;;;AAMA3B,EAAAA,iBAAiB,EAAEkB,mBAAUK,SAAV,CAAoB,CAACL,mBAAUQ,IAAX,EAAiBR,mBAAUS,IAA3B,CAApB,CA1KF;;AA2KjB;;;;AAIAlK,EAAAA,iBAAiB,EAAEyJ,mBAAUK,SAAV,CAAoB,CAACL,mBAAUQ,IAAX,EAAiBR,mBAAUO,MAA3B,CAApB,CA/KF;;AAgLjB;;;;AAIA9J,EAAAA,oBAAoB,EAAEuJ,mBAAUK,SAAV,CAAoB,CACxCL,mBAAUO,MAD8B,EAExCP,mBAAUS,IAF8B,CAApB,CApLL;;AAwLjB;;;;AAIAzJ,EAAAA,qBAAqB,EAAEgJ,mBAAUK,SAAV,CAAoB,CACzCL,mBAAUM,MAD+B,EAEzCN,mBAAUS,IAF+B,CAApB,CA5LN;;AAgMjB;;;;AAIA3J,EAAAA,iBAAiB,EAAEkJ,mBAAUK,SAAV,CAAoB,CAACL,mBAAUE,MAAX,EAAmBF,mBAAUS,IAA7B,CAApB,CApMF;;AAqMjB;;;;AAIAvJ,EAAAA,sBAAsB,EAAE8I,mBAAUK,SAAV,CAAoB,CAC1CL,mBAAUE,MADgC,EAE1CF,mBAAUS,IAFgC,CAApB,CAzMP;;AA6MjB;;;AAGAtJ,EAAAA,wBAAwB,EAAE6I,mBAAUS,IAhNnB;;AAiNjB;;;AAGArJ,EAAAA,wBAAwB,EAAE4I,mBAAUS,IApNnB;;AAqNjB;;;AAGApJ,EAAAA,uBAAuB,EAAE2I,mBAAUS,IAxNlB;;AAyNjB;;;AAGAnJ,EAAAA,uBAAuB,EAAE0I,mBAAUS,IA5NlB;;AA6NjB;;;AAGAlJ,EAAAA,qBAAqB,EAAEyI,mBAAUS,IAhOhB;;AAiOjB;;;AAGAjJ,EAAAA,mBAAmB,EAAEwI,mBAAUS,IApOd;;AAsOjB;;;;AAIArB,EAAAA,cAAc,EAAEY,mBAAUK,SAAV,CAAoB,CAACL,mBAAUQ,IAAX,EAAiBR,mBAAUS,IAA3B,CAApB,CA1OC;;AA2OjB;;;;;AAKA3I,EAAAA,kBAAkB,EAAEkI,mBAAUK,SAAV,CAAoB,CACtCL,mBAAUU,KAAV,CAAgB,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,EAA6B,OAA7B,CAAhB,CADsC,EAEtCV,mBAAUS,IAF4B,CAApB,CAhPH;;AAoPjB;;;;AAIA1I,EAAAA,iBAAiB,EAAEiI,mBAAUK,SAAV,CAAoB,CAACL,mBAAUO,MAAX,EAAmBP,mBAAUS,IAA7B,CAApB,CAxPF;;AAyPjB;;;;;;;;AAQA/I,EAAAA,aAAa,EAAEsI,mBAAUS,IAjQR;;AAkQjB;;;;AAIAlI,EAAAA,kBAAkB,EAAEyH,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUS,IAA7B,CAApB,CAtQH;;AAuQjB;;;;AAIAhI,EAAAA,cAAc,EAAEuH,mBAAUK,SAAV,CAAoB,CAACL,mBAAUE,MAAX,EAAmBF,mBAAUS,IAA7B,CAApB,CA3QC;;AA6QjB;;;;AAIA1B,EAAAA,cAAc,EAAEiB,mBAAUK,SAAV,CAAoB,CAACL,mBAAUQ,IAAX,EAAiBR,mBAAUS,IAA3B,CAApB,CAjRC;;AAkRjB;;;AAGA/G,EAAAA,aAAa,EAAEsG,mBAAUS,IArRR;;AAsRjB;;;;AAIArH,EAAAA,kBAAkB,EAAE4G,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUS,IAA7B,CAApB,CA1RH;;AA2RjB;;;;AAIApH,EAAAA,cAAc,EAAE2G,mBAAUK,SAAV,CAAoB,CAACL,mBAAUE,MAAX,EAAmBF,mBAAUS,IAA7B,CAApB,CA/RC;;AAgSjB;;;;AAIAnH,EAAAA,mBAAmB,EAAE0G,mBAAUK,SAAV,CAAoB,CACvCL,mBAAUE,MAD6B,EAEvCF,mBAAUS,IAF6B,CAApB,CApSJ;;AAwSjB;;;;AAIAjH,EAAAA,oBAAoB,EAAEwG,mBAAUK,SAAV,CAAoB,CACxCL,mBAAUM,MAD8B,EAExCN,mBAAUO,MAF8B,CAApB,CA5SL;;AAiTjB;;;;AAIAvB,EAAAA,oBAAoB,EAAEgB,mBAAUK,SAAV,CAAoB,CAACL,mBAAUQ,IAAX,EAAiBR,mBAAUS,IAA3B,CAApB,CArTL;;AAsTjB;;;AAGAnB,EAAAA,mBAAmB,EAAEU,mBAAUS,IAzTd;;AA0TjB;;;;AAIAlB,EAAAA,wBAAwB,EAAES,mBAAUK,SAAV,CAAoB,CAC5CL,mBAAUM,MADkC,EAE5CN,mBAAUS,IAFkC,CAApB,CA9TT;;AAkUjB;;;;AAIAjB,EAAAA,oBAAoB,EAAEQ,mBAAUK,SAAV,CAAoB,CACxCL,mBAAUE,MAD8B,EAExCF,mBAAUS,IAF8B,CAApB,CAtUL;;AA0UjB;;;;AAIAhB,EAAAA,yBAAyB,EAAEO,mBAAUK,SAAV,CAAoB,CAC7CL,mBAAUE,MADmC,EAE7CF,mBAAUS,IAFmC,CAApB,CA9UV;;AAkVjB;;;;AAIAf,EAAAA,0BAA0B,EAAEM,mBAAUK,SAAV,CAAoB,CAC9CL,mBAAUM,MADoC,EAE9CN,mBAAUO,MAFoC,CAApB,CAtVX;;AA2VjB;;;;AAIAtB,EAAAA,oBAAoB,EAAEe,mBAAUK,SAAV,CAAoB,CAACL,mBAAUQ,IAAX,EAAiBR,mBAAUS,IAA3B,CAApB,CA/VL;;AAgWjB;;;AAGAd,EAAAA,mBAAmB,EAAEK,mBAAUS,IAnWd;;AAoWjB;;;;AAIAb,EAAAA,wBAAwB,EAAEI,mBAAUK,SAAV,CAAoB,CAC5CL,mBAAUM,MADkC,EAE5CN,mBAAUS,IAFkC,CAApB,CAxWT;;AA4WjB;;;;AAIAZ,EAAAA,oBAAoB,EAAEG,mBAAUK,SAAV,CAAoB,CACxCL,mBAAUE,MAD8B,EAExCF,mBAAUS,IAF8B,CAApB,CAhXL;;AAoXjB;;;;AAIAX,EAAAA,yBAAyB,EAAEE,mBAAUK,SAAV,CAAoB,CAC7CL,mBAAUE,MADmC,EAE7CF,mBAAUS,IAFmC,CAApB,CAxXV;;AA4XjB;;;;AAIAV,EAAAA,0BAA0B,EAAEC,mBAAUK,SAAV,CAAoB,CAC9CL,mBAAUM,MADoC,EAE9CN,mBAAUO,MAFoC,CAApB,CAhYX;;AAoYjB;;;;AAIA1G,EAAAA,aAAa,EAAEmG,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUS,IAA7B,CAApB,CAxYE;;AAyYjB;;;;AAIA3G,EAAAA,kBAAkB,EAAEkG,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUS,IAA7B,CAApB,CA7YH;;AA8YjB;;;;AAIA1G,EAAAA,cAAc,EAAEiG,mBAAUK,SAAV,CAAoB,CAACL,mBAAUE,MAAX,EAAmBF,mBAAUS,IAA7B,CAApB,CAlZC;;AAmZjB;;;AAGA7G,EAAAA,gBAAgB,EAAEoG,mBAAUO,MAtZX,CAuZjB;;AAvZiB,C;;gBADAtE,a,kBA0ZG;AACpBrG,EAAAA,KAAK,EAAE,GADa;AAEpBe,EAAAA,MAAM,EAAE,GAFY;AAGpBsG,EAAAA,WAAW,EAAE,IAHO;AAIpBlG,EAAAA,SAAS,EAAE,EAJS;AAKpBF,EAAAA,KAAK,EAAE,EALa;AAMpBwD,EAAAA,UAAU,EAAE,IANQ;AAOpBoC,EAAAA,SAAS,EAAE,CAPS;AAQpBC,EAAAA,YAAY,EAAE,CARM;AASpBJ,EAAAA,UAAU,EAAE,CATQ;AAUpBC,EAAAA,WAAW,EAAE,CAVO;AAWpB5E,EAAAA,MAAM,EAAEzD,IAAI,IAAIA,IAAI,CAACyM,KAXD;AAYpB9B,EAAAA,SAAS,EAAE,IAZS;AAapBhC,EAAAA,SAAS,EAAE,EAbS;AAcpBC,EAAAA,WAAW,EAAE,CAdO;AAepBlD,EAAAA,gBAAgB,EAAE,CAfE;AAgBpBoD,EAAAA,aAAa,EAAE,SAhBK;AAiBpB7I,EAAAA,aAAa,EAAE,EAjBK;AAkBpBC,EAAAA,SAAS,EAAE,EAlBS;AAmBpBuK,EAAAA,SAAS,EAAE,IAnBS;AAoBpBlJ,EAAAA,aAAa,EAAE,EApBK;AAqBpBC,EAAAA,SAAS,EAAE,EArBS;AAsBpBoJ,EAAAA,iBAAiB,EAAE,IAtBC;AAuBpBvI,EAAAA,iBAAiB,EAAE,CAvBC;AAwBpBE,EAAAA,oBAAoB,EAAE,CAxBF;AAyBpBO,EAAAA,qBAAqB,EAAE,EAzBH;AA0BpBF,EAAAA,iBAAiB,EAAE,EA1BC;AA2BpBI,EAAAA,sBAAsB,EAAE;AAAE0J,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,EAAE,EAAE;AAAb,GA3BJ;AA4BpBzB,EAAAA,cAAc,EAAE,IA5BI;AA6BpBtH,EAAAA,kBAAkB,EAAE,CAAC5D,IAAD,EAAOD,KAAP,KAAiB;AACnC,WAAOC,IAAI,CAACkH,KAAL,GAAanH,KAAK,CAACiH,QAAN,GAAiB,CAA9B,GAAkC,OAAlC,GAA4C,QAAnD;AACD,GA/BmB;AAgCpBnD,EAAAA,iBAAiB,EAAE,CAhCC;AAiCpBL,EAAAA,aAAa,EAAE,CAACxD,IAAD,EAAOD,KAAP,EAAcD,KAAd,KAAwB;AACrC,QAAIO,gBAAEuM,GAAF,CAAM5M,IAAN,EAAY,MAAZ,CAAJ,EAAyB,OAAOA,IAAI,CAAC6M,IAAZ;AACzB,QAAIxM,gBAAEuM,GAAF,CAAM5M,IAAN,EAAY,OAAZ,CAAJ,EAA0B,OAAOA,IAAI,CAAC8M,KAAZ;AAC1B,WAAO,oBAAShN,KAAK,CAAC2D,MAAf,EAAuBzD,IAAvB,EAA6BD,KAA7B,EAAoCD,KAApC,CAAP;AACD,GArCmB;AAsCpBuE,EAAAA,kBAAkB,EAAE,EAtCA;AAuCpBE,EAAAA,cAAc,EAAE,EAvCI;AAwCpBsG,EAAAA,cAAc,EAAE,KAxCI;AAyCpBrF,EAAAA,aAAa,EAAE,CAACnE,IAAD,EAAOtB,KAAP,EAAcD,KAAd,KAAwB;AACrC,UAAMiN,SAAS,GAAG,sBAAQ1L,IAAI,CAACqB,KAAL,IAAc,CAAtB,EAAyBsK,MAAzB,CAAgC,QAAhC,CAAlB;AACA,UAAMC,UAAU,GAAG,oBACjBnN,KAAK,CAAC0D,aADW,EAEjBnC,IAAI,CAAC+F,MAFY,EAGjBrH,KAHiB,EAIjBD,KAJiB,CAAnB;AAMA,UAAMoN,UAAU,GAAG,oBACjBpN,KAAK,CAAC0D,aADW,EAEjBnC,IAAI,CAACgG,MAFY,EAGjBtH,KAHiB,EAIjBD,KAJiB,CAAnB;AAMA,qBAAUmN,UAAV,mBAAwBC,UAAxB,eAAuCH,SAAvC;AACD,GAxDmB;AAyDpB7H,EAAAA,kBAAkB,EAAE,EAzDA;AA0DpBC,EAAAA,cAAc,EAAE,EA1DI;AA2DpBC,EAAAA,mBAAmB,EAAE,EA3DD;AA4DpBE,EAAAA,oBAAoB,EAAE,KA5DF;AA6DpBwF,EAAAA,oBAAoB,EAAE,KA7DF;AA8DpBM,EAAAA,mBAAmB,EAAE,CAAC/J,IAAD,EAAOtB,KAAP,EAAcD,KAAd,KAAwB;AAC3C,UAAMqN,aAAa,GAAG9L,IAAI,CAACwF,mBAA3B;AACA,QAAI,CAACxG,gBAAE+M,QAAF,CAAWD,aAAX,CAAL,EAAgC,OAAO,EAAP;AAChC,UAAME,WAAW,GACfF,aAAa,GAAG,KAAhB,GACI,OADJ,GAEI,sBAAQA,aAAR,EAAuBH,MAAvB,CAA8B,QAA9B,CAHN;AAIA,qBAAUK,WAAV,iBAA4B,oBAC1BvN,KAAK,CAAC0D,aADoB,EAE1BnC,IAAI,CAACgG,MAFqB,EAG1BtH,KAH0B,EAI1BD,KAJ0B,CAA5B;AAMD,GA3EmB;AA4EpBuL,EAAAA,wBAAwB,EAAE,EA5EN;AA6EpBC,EAAAA,oBAAoB,EAAE,EA7EF;AA8EpBC,EAAAA,yBAAyB,EAAE,EA9EP;AA+EpBC,EAAAA,0BAA0B,EAAE,IA/ER;AAgFpBT,EAAAA,oBAAoB,EAAE,KAhFF;AAiFpBU,EAAAA,mBAAmB,EAAE,CAACpK,IAAD,EAAOtB,KAAP,EAAcD,KAAd,KAAwB;AAC3C,UAAMqN,aAAa,GAAG9L,IAAI,CAAC0F,mBAA3B;AACA,QAAI,CAAC1G,gBAAE+M,QAAF,CAAWD,aAAX,CAAL,EAAgC,OAAO,EAAP;AAChC,UAAME,WAAW,GACfF,aAAa,GAAG,KAAhB,GACI,OADJ,GAEI,sBAAQA,aAAR,EAAuBH,MAAvB,CAA8B,QAA9B,CAHN;AAIA,qBAAUK,WAAV,mBAA8B,oBAC5BvN,KAAK,CAAC0D,aADsB,EAE5BnC,IAAI,CAAC+F,MAFuB,EAG5BrH,KAH4B,EAI5BD,KAJ4B,CAA9B;AAMD,GA9FmB;AA+FpB4L,EAAAA,wBAAwB,EAAE,EA/FN;AAgGpBC,EAAAA,oBAAoB,EAAE,EAhGF;AAiGpBC,EAAAA,yBAAyB,EAAE,EAjGP;AAkGpBC,EAAAA,0BAA0B,EAAE;AAlGR,C","sourcesContent":["import {\n  sankey,\n  sankeyCenter,\n  sankeyJustify,\n  sankeyLeft,\n  sankeyLinkHorizontal,\n  sankeyRight\n} from \"d3-sankey\";\nimport _ from \"lodash\";\nimport numeral from \"numeral\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { getValue } from \"./utils/Data\";\n\nconst SankeyNode = props => {\n  const { graph, node, nodeClassName, nodeStyle } = props;\n  // create partial functions for handlers - callbacks with the current node/graph arguments attached\n  const makeHandler = origHandler =>\n    _.isFunction(origHandler)\n      ? _.partial(origHandler, _, { node, graph })\n      : null;\n\n  return (\n    <rect\n      x={node.x0}\n      y={node.y0}\n      width={Math.abs(node.x1 - node.x0)}\n      height={Math.abs(node.y1 - node.y0)}\n      className={`rct-sankey-node ${getValue(nodeClassName, node, graph)}`}\n      style={getValue(nodeStyle, node, graph)}\n      onMouseEnter={makeHandler(props.onMouseEnterNode)}\n      onMouseLeave={makeHandler(props.onMouseLeaveNode)}\n      onMouseMove={makeHandler(props.onMouseMoveNode)}\n      onMouseDown={makeHandler(props.onMouseDownNode)}\n      onMouseUp={makeHandler(props.onMouseUpNode)}\n      onClick={makeHandler(props.onClickNode)}\n    />\n  );\n};\n\nconst SankeyLink = props => {\n  const { graph, link, linkPath, linkClassName, linkStyle } = props;\n  // create partial functions for handlers - callbacks with the current graph/link arguments attached\n  const makeHandler = origHandler =>\n    _.isFunction(origHandler)\n      ? _.partial(origHandler, _, { link, graph })\n      : null;\n\n  return (\n    <path\n      d={linkPath}\n      className={`rct-sankey-link ${getValue(linkClassName, link, graph)}`}\n      style={{\n        ...getValue(linkStyle, link, graph),\n        strokeWidth: link.width\n      }}\n      onMouseEnter={makeHandler(props.onMouseEnterLink)}\n      onMouseLeave={makeHandler(props.onMouseLeaveLink)}\n      onMouseMove={makeHandler(props.onMouseMoveLink)}\n      onMouseDown={makeHandler(props.onMouseDownLink)}\n      onMouseUp={makeHandler(props.onMouseUpLink)}\n      onClick={makeHandler(props.onClickLink)}\n    />\n  );\n};\n\nconst SankeyNodeTerminal = props => {\n  const { node, graph } = props;\n  if (!node.terminalValue) return null;\n  const makeHandler = origHandler =>\n    _.isFunction(origHandler)\n      ? _.partial(origHandler, _, { node, graph, props })\n      : null;\n  const getWithNode = accessor => getValue(accessor, node, graph, props);\n  const width = getWithNode(props.nodeTerminalWidth) || 0;\n  const distance = getWithNode(props.nodeTerminalDistance) || 0;\n  const nodeHeight = Math.abs(node.y1 - node.y0) || 0;\n  const height =\n    (nodeHeight * node.terminalValue || 0) / (node.value || 0) || 0;\n  const style = getWithNode(props.nodeTerminalStyle);\n  const className = `rct-sankey-node-terminal ${getWithNode(\n    props.nodeTerminalClassName\n  )}`;\n  const attributes = getWithNode(props.nodeTerminalAttributes);\n\n  return (\n    <rect\n      x={node.x1 + distance}\n      y={node.y0 + (nodeHeight - height)}\n      {...{ width, height, style, className }}\n      {...attributes}\n      onMouseEnter={makeHandler(props.onMouseEnterNodeTerminal)}\n      onMouseLeave={makeHandler(props.onMouseLeaveNodeTerminal)}\n      onMouseMove={makeHandler(props.onMouseMoveNodeTerminal)}\n      onMouseDown={makeHandler(props.onMouseDownNodeTerminal)}\n      onMouseUp={makeHandler(props.onMouseUpNodeTerminal)}\n      onClick={makeHandler(props.onClickNodeTerminal)}\n    />\n  );\n};\n\nconst SankeyNodeLabel = props => {\n  const { node, graph, nodeLabelText, nodeId } = props;\n  const getWithNode = accessor => getValue(accessor, node, graph, props);\n  const getLabelText = _.isFunction(nodeLabelText) ? nodeLabelText : nodeId;\n  const placement = getWithNode(props.nodeLabelPlacement);\n  const distance = getWithNode(props.nodeLabelDistance) || 0;\n  const labelContent = getWithNode(getLabelText);\n  // don't render empty labels\n  if (\n    _.isNull(labelContent) ||\n    _.isUndefined(labelContent) ||\n    labelContent === false ||\n    labelContent === \"\"\n  ) {\n    return null;\n  }\n\n  // if `labelContent` is a string or number, it is rendered as text within a SVG <text> element\n  // otherwise, it is rendered as arbitrary SVG content\n  // allows users to render components inside a node label (eg. to add icon or link)\n  const isTextLabel = _.isString(labelContent) || _.isNumber(labelContent);\n  if (!isTextLabel) {\n    return labelContent;\n  }\n\n  const baseClassName = `rct-sankey-node-label ${getWithNode(\n    props.nodeLabelClassName\n  )}`;\n  const baseStyle = getWithNode(props.nodeLabelStyle);\n  let position;\n  let textStyle;\n\n  // use placement prop to determine x, y, alignmentBaseline and textAnchor\n  if (placement === \"above\") {\n    // render label above node, centered horizontally\n    textStyle = {\n      alignmentBaseline: \"baseline\",\n      textAnchor: \"middle\",\n      ...baseStyle\n    };\n    position = {\n      x: node.x0 + Math.abs(node.x1 - node.x0) / 2,\n      y: node.y0 - distance\n    };\n  } else if (placement === \"below\") {\n    // render label above node, centered horizontally\n    textStyle = {\n      alignmentBaseline: \"hanging\",\n      textAnchor: \"middle\",\n      ...baseStyle\n    };\n    position = {\n      x: node.x0 + Math.abs(node.x1 - node.x0) / 2,\n      y: node.y1 + distance\n    };\n  } else if (placement === \"before\") {\n    // render label before (to left of) node, centered vertically\n    textStyle = {\n      alignmentBaseline: \"middle\",\n      textAnchor: \"end\",\n      ...baseStyle\n    };\n    position = {\n      x: node.x0 - distance,\n      y: node.y0 + Math.abs(node.y1 - node.y0) / 2\n    };\n  } else {\n    if (!_.isUndefined(placement) && placement !== \"after\")\n      console.warn(\n        `${placement} is not a valid value for nodeLabelPlacement - defaulting to \"after\"`\n      );\n    // render label after (to right of) node, centered vertically\n    textStyle = {\n      alignmentBaseline: \"middle\",\n      textAnchor: \"start\",\n      ...baseStyle\n    };\n    position = {\n      x: node.x1 + distance,\n      y: node.y0 + Math.abs(node.y1 - node.y0) / 2\n    };\n  }\n\n  const className = `${baseClassName} rct-sankey-node-label-text`;\n  return (\n    <text {...position} className={className} style={textStyle}>\n      {labelContent}\n    </text>\n  );\n};\n\nconst SankeyLinkLabel = props => {\n  const { link, graph } = props;\n  const getWithLink = accessor => getValue(accessor, link, graph, props);\n  const className = `rct-sankey-link-label ${getWithLink(\n    props.linkLabelClassName || \"\"\n  )}`;\n  const style = getWithLink(props.linkLabelStyle || {});\n  const attributes = getWithLink(props.linkLabelAttributes || {});\n  const startOffset = getWithLink(props.linkLabelStartOffset || 0);\n\n  return (\n    <text className={className} style={style} {...attributes}>\n      <textPath startOffset={startOffset} xlinkHref={`#${props.linkPathId}`}>\n        {getWithLink(props.linkLabelText)}\n      </textPath>\n    </text>\n  );\n};\n\nconst SankeyStepLabel = props => {\n  const {\n    x,\n    y,\n    stepLabelPadding,\n    stepLabelText,\n    stepLabelClassName,\n    stepLabelStyle,\n    step\n  } = props;\n\n  let yPos = y;\n\n  if (_.isNumber(stepLabelPadding)) {\n    yPos = yPos - stepLabelPadding;\n  }\n\n  return (\n    <text\n      className={`rct-step-label ${getValue(stepLabelClassName, step)}`}\n      style={getValue(stepLabelStyle, step)}\n      x={x}\n      y={yPos}\n      key={`step-${x}-${step}`}\n    >\n      {getValue(stepLabelText, step)}\n    </text>\n  );\n};\n\nconst SVGContainer = props => {\n  const otherProps = _.omit(props, [\"standalone\"]);\n  if (props.standalone) {\n    return <svg {...otherProps} />;\n  }\n  return <g {...otherProps} />;\n};\n\n/**\n * Enhance the graph object created by d3-sankey by adding some additional useful properties.\n * Adds `maxDepth` (max of node `depth` properties)\n * and `node.terminalValue` (value of node's terminal, sum of all 'out' nodes minus sum of 'in' nodes)\n */\nfunction enhanceGraph(graph) {\n  graph.nodes.forEach(node => {\n    const sourceLinksSum = (node.sourceLinks || []).reduce(\n      (sum, link) => sum + link.value,\n      0\n    );\n    node.terminalValue = Math.max(node.value - sourceLinksSum, 0);\n  });\n  graph.links.forEach(link => {\n    link.valueSourceRelative =\n      (link.value || 0) / _.get(link, \"source.value\", 0);\n    link.valueTargetRelative =\n      (link.value || 0) / _.get(link, \"target.value\", 0);\n  });\n\n  graph.maxDepth = _.maxBy(graph.nodes, \"depth\");\n  graph.maxDepth = graph.nodes.reduce(\n    (max, node) => Math.max(node.depth || 0, max),\n    0\n  );\n  return graph;\n}\n\nfunction getLinkId(link, nodeId) {\n  return `link-${nodeId(link.source)}-to-${nodeId(link.target)}`;\n}\n\nconst nodeAlignmentsByName = {\n  left: sankeyLeft,\n  right: sankeyRight,\n  center: sankeyCenter,\n  justify: sankeyJustify\n};\n\n/**\n * A `SankeyDiagram` is a type of flow diagram which visualizes directed flow between nodes\n * of a network graph. Currently only *acyclic* networks are supported.\n */\nexport default class SankeyDiagram extends React.Component {\n  static propTypes = {\n    /**\n     * Array of node objects, represented by vertical rectangles.\n     * These represent the base entities which links flow into & out of.\n     */\n    nodes: PropTypes.arrayOf(PropTypes.object).isRequired,\n    /**\n     * Array of link objects, represented by curved paths between nodes.\n     * Links represent a magnitude of flow between one node and another.\n     * Each should have a 'source' node [identifier], a 'target' node [identifier],\n     * and a numerical value representing flow magnitude.\n     */\n    links: PropTypes.arrayOf(\n      PropTypes.shape({\n        source: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        target: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        value: PropTypes.number\n      })\n    ).isRequired,\n    /**\n     * Width of the SVG element.\n     */\n    width: PropTypes.number.isRequired,\n    /**\n     * Height of the SVG element.\n     */\n    height: PropTypes.number.isRequired,\n    /**\n     * Boolean which decides if the nodes & links props should be cloned before being mutated into\n     * the Sankey data structure. Passing `false` is faster, but may cause unintended side effects\n     * if nodes or links data are used elsewhere\n     */\n    shouldClone: PropTypes.bool,\n    /**\n     * `className` attribute to be applied to the SVG element.\n     */\n    className: PropTypes.string,\n    /**\n     * Inline style object to be applied to the SVG element.\n     */\n    style: PropTypes.object,\n    /**\n     * Boolean which determines whether the chart should be rendered as a standalone `<svg>` element\n     * or a `<g>` group element (as a child within an existing `<svg>`).\n     * True by default, pass `false` to render in a `<g>`.\n     */\n    standalone: PropTypes.bool,\n    /**\n     * Internal top margin, in pixels. Generally used to eg. leave extra space inside the SVG for labels.\n     */\n    marginTop: PropTypes.number,\n    /**\n     * Internal bottom margin, in pixels.\n     */\n    marginBottom: PropTypes.number,\n    /**\n     * Internal left margin, in pixels.\n     */\n    marginLeft: PropTypes.number,\n    /**\n     * Internal right margin, in pixels.\n     */\n    marginRight: PropTypes.number,\n\n    /**\n     * Boolean which determines if node rectangles should be shown,\n     * or function (`showNode(node, graph)`) which returns a boolean\n     */\n    showNodes: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `nodeId(node, graph)` which specifies how to access the ID of each node object.\n     * These should be the same identifiers used by `links[].source` and `.target`.\n     * Uses the node's index in `nodes` array by default.\n     */\n    nodeId: PropTypes.func,\n    /**\n     * Width (in pixels) of the vertical node rectangles.\n     */\n    nodeWidth: PropTypes.number,\n    /**\n     * Vertical padding (in pixels) between each of the node lines.\n     */\n    nodePadding: PropTypes.number,\n    /**\n     * Node alignment method used to layout the nodes.\n     * May be 'left', 'right', 'center', 'justify', or a custom function.\n     * See [d3-sankey alignment docs](https://github.com/d3/d3-sankey#alignments) for more details.\n     */\n    nodeAlignment: PropTypes.oneOf([\"left\", \"right\", \"center\", \"justify\"]),\n    /**\n     * `className` attribute to be applied to each node,\n     * or accessor function which returns a class (string).\n     */\n    nodeClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each node,\n     * or accessor function which returns a style object.\n     */\n    nodeStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Node `mouseenter` event handler, called when user's mouse enters a node.\n     */\n    onMouseEnterNode: PropTypes.func,\n    /**\n     * Node `mouseleave` event handler, called when user's mouse leaves a node.\n     */\n    onMouseLeaveNode: PropTypes.func,\n    /**\n     * Node `mousemove` event handler, called when user's mouse moves within a node.\n     */\n    onMouseMoveNode: PropTypes.func,\n    /**\n     * Node `mousedown` event handler, called when user's mouse button is depressed within a node.\n     */\n    onMouseDownNode: PropTypes.func,\n    /**\n     * Node `mouseup` event handler, called when user's mouse button is released within a node.\n     */\n    onMouseUpNode: PropTypes.func,\n    /**\n     * Node `click` event handler, called when user clicks within a node.\n     */\n    onClickNode: PropTypes.func,\n\n    /**\n     * Boolean which determines if link paths should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinks: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each link,\n     * or accessor function which returns a class (string).\n     */\n    linkClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each link,\n     * or accessor function which returns a style object.\n     */\n    linkStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Link `mouseenter` event handler, called when user's mouse enters a link.\n     */\n    onMouseEnterLink: PropTypes.func,\n    /**\n     * Link `mouseleave` event handler, called when user's mouse leaves a link.\n     */\n    onMouseLeaveLink: PropTypes.func,\n    /**\n     * Link `mousemove` event handler, called when user's mouse moves within a link.\n     */\n    onMouseMoveLink: PropTypes.func,\n    /**\n     * Link `mousedown` event handler, called when user's mouse button is depressed within a link.\n     */\n    onMouseDownLink: PropTypes.func,\n    /**\n     * Link `mouseup` event handler, called when user's mouse button is released within a link.\n     */\n    onMouseUpLink: PropTypes.func,\n    /**\n     * Link `click` event handler, called when user clicks within a link.\n     */\n    onClickLink: PropTypes.func,\n\n    /**\n     * Boolean which determines if node terminals should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean.\n     * Terminals are bars that run alongside to show the amount\n     * which has flowed *in* but not *out*\n     */\n    showNodeTerminals: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Width (in pixels) of the node terminal rectangles,\n     * or accessor function `f(node, graph)` which returns a width.\n     */\n    nodeTerminalWidth: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    /**\n     * Distance (in pixels) between nodes and their terminals,\n     * or accessor function `f(node, graph)` which returns a distance.\n     */\n    nodeTerminalDistance: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.func\n    ]),\n    /**\n     * `className` attribute to be applied to each node terminal,\n     * or accessor function which returns a class (string).\n     */\n    nodeTerminalClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func\n    ]),\n    /**\n     * Inline style object to be applied to each node terminal,\n     * or accessor function which returns a style object.\n     */\n    nodeTerminalStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Attributes object to be applied to each node terminal element,\n     * or accessor function which returns an object.\n     */\n    nodeTerminalAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * Node terminal `mouseenter` event handler, called when user's mouse enters a node terminal.\n     */\n    onMouseEnterNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mouseleave` event handler, called when user's mouse leaves a node terminal.\n     */\n    onMouseLeaveNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mousemove` event handler, called when user's mouse moves within a node terminal.\n     */\n    onMouseMoveNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mousedown` event handler, called when user's mouse button is depressed within a node terminal.\n     */\n    onMouseDownNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mouseup` event handler, called when user's mouse button is released within a node terminal.\n     */\n    onMouseUpNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `click` event handler, called when user clicks within a node terminal.\n     */\n    onClickNodeTerminal: PropTypes.func,\n\n    /**\n     * Boolean which determines if node labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showNodeLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Placement of the node label relative to the node rectangle.\n     * Expects 'before', 'after', 'above' or 'below', or a function which returns one of these.\n     * By default, labels in the left half of the diagram are placed 'after' and those in the right half 'before'\n     */\n    nodeLabelPlacement: PropTypes.oneOfType([\n      PropTypes.oneOf([\"before\", \"after\", \"above\", \"below\"]),\n      PropTypes.func\n    ]),\n    /**\n     * Distance (in pixels) between nodes and their labels,\n     * or accessor function `f(node, graph)` which returns a distance.\n     */\n    nodeLabelDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    /**\n     * Accessor function `nodeLabelText(node, graph)` which returns the content to be used for node labels.\n     * The function may return a string/number (rendered as SVG `<text>`),\n     * or arbitrary React SVG element(s) (rendered as-is inside the SVG).\n     * NOTE: in the latter case (returning arbitrary SVG), `nodeLabelPlacement`, `nodeLabelDistance`,\n     * `nodeLabelClassName` and `nodeLabelStyle` props will not be applied -\n     * user is responsible for all positioning and attributes on this element.\n     */\n    nodeLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each node label,\n     * or accessor function which returns a class (string).\n     */\n    nodeLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each node label,\n     * or accessor function which returns a style object.\n     */\n    nodeLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n    /**\n     * Boolean which determines if link labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link labels.\n     */\n    linkLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link label,\n     * or accessor function which returns a class (string).\n     */\n    linkLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each link label,\n     * or accessor function which returns a style object.\n     */\n    linkLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Attributes object to be applied to each link label element,\n     * or accessor function which returns an object.\n     */\n    linkLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n\n    /**\n     * Boolean which determines if link *source* labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkSourceLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link *source* labels.\n     */\n    linkSourceLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link *source* label,\n     * or accessor function which returns a class (string).\n     */\n    linkSourceLabelClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func\n    ]),\n    /**\n     * Inline style object to be applied to each link *source* label,\n     * or accessor function which returns a style object.\n     */\n    linkSourceLabelStyle: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * Attributes object to be applied to each link *source* label,\n     * or accessor function which returns an object.\n     */\n    linkSourceLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link *source* label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkSourceLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n\n    /**\n     * Boolean which determines if link *target* labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkTargetLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link *target* labels.\n     */\n    linkTargetLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link *target* label,\n     * or accessor function which returns a class (string).\n     */\n    linkTargetLabelClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func\n    ]),\n    /**\n     * Inline style object to be applied to each link *target* label,\n     * or accessor function which returns a style object.\n     */\n    linkTargetLabelStyle: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * Attributes object to be applied to each link *target* label,\n     * or accessor function which returns an object.\n     */\n    linkTargetLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link *target* label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkTargetLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    /**\n     * Text for step label or\n     * accessor function `f(step)` that returns the label text\n     */\n    stepLabelText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * `className` attribute applied to each label,\n     * or accessor function which returns a class (string)\n     */\n    stepLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each label,\n     * or accessor function which returns an object\n     */\n    stepLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Vertical padding (in pixels) between step label and uppermost positioned node of that step\n     */\n    stepLabelPadding: PropTypes.number\n    //standalone\n  };\n  static defaultProps = {\n    width: 400,\n    height: 300,\n    shouldClone: true,\n    className: \"\",\n    style: {},\n    standalone: true,\n    marginTop: 0,\n    marginBottom: 0,\n    marginLeft: 0,\n    marginRight: 0,\n    nodeId: node => node.index,\n    showNodes: true,\n    nodeWidth: 12,\n    nodePadding: 8,\n    stepLabelPadding: 8,\n    nodeAlignment: \"justify\",\n    nodeClassName: \"\",\n    nodeStyle: {},\n    showLinks: true,\n    linkClassName: \"\",\n    linkStyle: {},\n    showNodeTerminals: true,\n    nodeTerminalWidth: 5,\n    nodeTerminalDistance: 1,\n    nodeTerminalClassName: \"\",\n    nodeTerminalStyle: {},\n    nodeTerminalAttributes: { rx: 2, ry: 2 },\n    showNodeLabels: true,\n    nodeLabelPlacement: (node, graph) => {\n      return node.depth < graph.maxDepth / 2 ? \"after\" : \"before\";\n    },\n    nodeLabelDistance: 4,\n    nodeLabelText: (node, graph, props) => {\n      if (_.has(node, \"name\")) return node.name;\n      if (_.has(node, \"label\")) return node.label;\n      return getValue(props.nodeId, node, graph, props);\n    },\n    nodeLabelClassName: \"\",\n    nodeLabelStyle: {},\n    showLinkLabels: false,\n    linkLabelText: (link, graph, props) => {\n      const valueText = numeral(link.value || 0).format(\"0.[0]a\");\n      const sourceText = getValue(\n        props.nodeLabelText,\n        link.source,\n        graph,\n        props\n      );\n      const targetText = getValue(\n        props.nodeLabelText,\n        link.target,\n        graph,\n        props\n      );\n      return `${sourceText}→${targetText}: ${valueText}`;\n    },\n    linkLabelClassName: \"\",\n    linkLabelStyle: {},\n    linkLabelAttributes: {},\n    linkLabelStartOffset: \"25%\",\n    showLinkSourceLabels: false,\n    linkSourceLabelText: (link, graph, props) => {\n      const valueRelative = link.valueSourceRelative;\n      if (!_.isFinite(valueRelative)) return \"\";\n      const percentText =\n        valueRelative < 0.001\n          ? \"<0.1%\"\n          : numeral(valueRelative).format(\"0.[0]%\");\n      return `${percentText} to ${getValue(\n        props.nodeLabelText,\n        link.target,\n        graph,\n        props\n      )}`;\n    },\n    linkSourceLabelClassName: \"\",\n    linkSourceLabelStyle: {},\n    linkSourceLabelAttributes: {},\n    linkSourceLabelStartOffset: \"2%\",\n    showLinkTargetLabels: false,\n    linkTargetLabelText: (link, graph, props) => {\n      const valueRelative = link.valueTargetRelative;\n      if (!_.isFinite(valueRelative)) return \"\";\n      const percentText =\n        valueRelative < 0.001\n          ? \"<0.1%\"\n          : numeral(valueRelative).format(\"0.[0]%\");\n      return `${percentText} from ${getValue(\n        props.nodeLabelText,\n        link.source,\n        graph,\n        props\n      )}`;\n    },\n    linkTargetLabelClassName: \"\",\n    linkTargetLabelStyle: {},\n    linkTargetLabelAttributes: {},\n    linkTargetLabelStartOffset: \"98%\"\n  };\n\n  _makeSankeyGraph() {\n    const innerWidth =\n      this.props.width - (this.props.marginLeft + this.props.marginRight);\n    const innerHeight =\n      this.props.height - (this.props.marginTop + this.props.marginBottom);\n    const makeSankey = sankey()\n      .size([innerWidth, innerHeight])\n      .nodeId(this.props.nodeId)\n      .nodeWidth(this.props.nodeWidth)\n      .nodePadding(this.props.nodePadding)\n      .nodeAlign(\n        nodeAlignmentsByName[this.props.nodeAlignment] ||\n          nodeAlignmentsByName.justify\n      );\n\n    const nodes = this.props.shouldClone\n      ? _.cloneDeep(this.props.nodes)\n      : this.props.nodes;\n    const links = this.props.shouldClone\n      ? _.cloneDeep(this.props.links)\n      : this.props.links;\n    const sankeyGraph = makeSankey({ nodes, links });\n    this._graph = enhanceGraph(sankeyGraph);\n  }\n\n  componentWillMount() {\n    this._makeSankeyGraph();\n  }\n  componentWillReceiveProps(nextProps) {\n    // only update this._graph if a prop which affects the sankey layout has changed (most don't)\n    const sankeyLayoutPropKeys = [\n      \"nodes\",\n      \"links\",\n      \"width\",\n      \"height\",\n      \"marginTop\",\n      \"marginBottom\",\n      \"marginLeft\",\n      \"marginRight\",\n      \"nodeId\",\n      \"nodeWidth\",\n      \"nodePadding\",\n      \"nodeAlignment\"\n    ];\n\n    const hasChangedSankey = _.some(sankeyLayoutPropKeys, key => {\n      return nextProps[key] !== this.props[key];\n    });\n    if (hasChangedSankey) this._makeSankeyGraph();\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      style,\n      standalone,\n      nodeId,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight\n    } = this.props;\n\n    const graph = this._graph;\n    const makeLinkPath = sankeyLinkHorizontal();\n    const className = `rct-sankey-diagram ${this.props.className}`;\n    const innerWidth = width - (marginLeft + marginRight);\n    const innerHeight = height - (marginTop + marginBottom);\n\n    function mapNodesInGroupIf(shouldShow, groupClassName, mapFunc) {\n      if (!shouldShow) return null;\n      return (\n        <g className={groupClassName}>\n          {(graph.nodes || []).map((node, i) => {\n            if (!getValue(shouldShow, node, graph)) return null;\n            const key = `node-${nodeId(node)}`;\n            return mapFunc(node, i, key);\n          })}\n        </g>\n      );\n    }\n\n    function mapLinksInGroupIf(shouldShow, groupClassName, mapFunc) {\n      if (!shouldShow) return null;\n      return (\n        <g className={groupClassName}>\n          {(graph.links || []).map((link, i) => {\n            if (!getValue(shouldShow, link, graph)) return null;\n            const key = `link-${nodeId(link.source)}-to-${nodeId(link.target)}`;\n            return mapFunc(link, i, key);\n          })}\n        </g>\n      );\n    }\n\n    function displayStepLabelsIf(\n      stepLabelText,\n      stepLabelClassName,\n      stepLabelStyle,\n      stepLabelPadding,\n      nodes\n    ) {\n      if (!stepLabelText) {\n        return null;\n      }\n\n      const depthMapXPos = {};\n      const depthMapYPos = {};\n\n      nodes.forEach(n => {\n        depthMapXPos[n.depth] = n.x0;\n\n        // For the given depth, set the y equal to the highest positioned y value\n        depthMapYPos[n.depth] = depthMapYPos[n.depth]\n          ? Math.min(n.y0, depthMapYPos[n.depth])\n          : n.y0;\n      });\n\n      return (\n        <g className=\"rct-step-labels\" width={innerWidth} height={100}>\n          {_.map(depthMapXPos, (x, step) => {\n            const stepLabelProps = {\n              y: depthMapYPos[step],\n              step,\n              x,\n              stepLabelText,\n              stepLabelClassName,\n              stepLabelPadding,\n              stepLabelStyle\n            };\n\n            return (\n              <SankeyStepLabel key={`rct-step-${step}`} {...stepLabelProps} />\n            );\n          })}\n        </g>\n      );\n    }\n\n    return (\n      <SVGContainer {...{ standalone, width, height, className, style }}>\n        <g\n          width={innerWidth}\n          height={innerHeight}\n          transform={`translate(${marginLeft}, ${marginTop})`}\n        >\n          {displayStepLabelsIf(\n            this.props.stepLabelText,\n            this.props.stepLabelClassName,\n            this.props.stepLabelStyle,\n            this.props.stepLabelPadding,\n            graph.nodes\n          )}\n          {mapLinksInGroupIf(\n            this.props.showLinks,\n            \"rct-sankey-links\",\n            (link, i, key) => {\n              const linkProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPath: makeLinkPath(link)\n              };\n              return <SankeyLink {...linkProps} />;\n            }\n          )}\n          {mapNodesInGroupIf(\n            this.props.showNodes,\n            \"rct-sankey-nodes\",\n            (node, i, key) => {\n              return <SankeyNode {...this.props} {...{ key, graph, node }} />;\n            }\n          )};\n          {mapNodesInGroupIf(\n            this.props.showNodeTerminals,\n            \"rct-sankey-node-terminals\",\n            (node, i, key) => {\n              return (\n                <SankeyNodeTerminal {...this.props} {...{ key, graph, node }} />\n              );\n            }\n          )};\n          {/* the three types of link labels (link, link source, link target) use textpath to follow the link's path */}\n          {/* to minimize dom elements, first render one set of path definitions to be used by all three label types */}\n          {this.props.showLinkLabels ||\n          this.props.showLinkSourceLabels ||\n          this.props.showLinkTargetLabels ? (\n            <defs>\n              {graph.links.map(link => {\n                const hasLabel =\n                  getValue(this.props.showLinkLabels, link, graph) ||\n                  getValue(this.props.showLinkSourceLabels, link, graph) ||\n                  getValue(this.props.showLinkTargetLabels, link, graph);\n                if (!hasLabel) return null;\n\n                const linkPath = makeLinkPath(link);\n                const linkPathId = `${getLinkId(link, nodeId)}-path`;\n                return <path id={linkPathId} d={linkPath} key={linkPathId} />;\n              })}\n            </defs>\n          ) : null}\n          {mapLinksInGroupIf(\n            this.props.showLinkLabels,\n            \"rct-sankey-link-labels\",\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const labelProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId\n              };\n              return <SankeyLinkLabel {...labelProps} />;\n            }\n          )}\n          {mapNodesInGroupIf(\n            this.props.showNodeLabels,\n            \"rct-sankey-node-labels\",\n            (node, i, key) => {\n              return (\n                <SankeyNodeLabel {...this.props} {...{ key, graph, node }} />\n              );\n            }\n          )};\n          {mapLinksInGroupIf(\n            this.props.showLinkSourceLabels,\n            \"rct-sankey-link-source-labels\",\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const commonProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId\n              };\n              const labelProps = {\n                ...commonProps,\n                linkLabelText: this.props.linkSourceLabelText,\n                linkLabelClassName: this.props.linkSourceLabelClassName,\n                linkLabelStyle: this.props.linkSourceLabelStyle,\n                linkLabelAttributes: this.props.linkSourceLabelAttributes,\n                linkLabelStartOffset: this.props.linkSourceLabelStartOffset\n              };\n\n              return <SankeyLinkLabel {...labelProps} />;\n            }\n          )}\n          {mapLinksInGroupIf(\n            this.props.showLinkTargetLabels,\n            \"rct-sankey-link-target-labels\",\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const commonProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId\n              };\n              const labelProps = {\n                ...commonProps,\n                linkLabelText: this.props.linkTargetLabelText,\n                linkLabelClassName: this.props.linkTargetLabelClassName,\n                linkLabelStyle: {\n                  textAnchor: \"end\",\n                  ...this.props.linkTargetLabelStyle\n                },\n                linkLabelAttributes: this.props.linkTargetLabelAttributes,\n                linkLabelStartOffset: this.props.linkTargetLabelStartOffset\n              };\n\n              return <SankeyLinkLabel {...labelProps} />;\n            }\n          )}\n        </g>\n      </SVGContainer>\n    );\n  }\n}\n"],"file":"SankeyDiagram.js"}