{"version":3,"sources":["src/SankeyDiagram.js"],"names":["SankeyNode","graph","props","node","nodeClassName","nodeStyle","makeHandler","isFunction","origHandler","partial","x0","y0","Math","abs","x1","y1","onMouseEnterNode","onMouseLeaveNode","onMouseMoveNode","onMouseDownNode","onMouseUpNode","onClickNode","SankeyLink","link","linkPath","linkClassName","linkStyle","strokeWidth","width","onMouseEnterLink","onMouseLeaveLink","onMouseMoveLink","onMouseDownLink","onMouseUpLink","onClickLink","SankeyNodeTerminal","terminalValue","getWithNode","accessor","nodeTerminalWidth","distance","nodeTerminalDistance","nodeHeight","height","value","style","nodeTerminalStyle","className","nodeTerminalClassName","attributes","nodeTerminalAttributes","onMouseEnterNodeTerminal","onMouseLeaveNodeTerminal","onMouseMoveNodeTerminal","onMouseDownNodeTerminal","onMouseUpNodeTerminal","onClickNodeTerminal","SankeyNodeLabel","nodeLabelText","nodeId","getLabelText","placement","nodeLabelPlacement","nodeLabelDistance","labelContent","isNull","isUndefined","isTextLabel","isString","isNumber","baseClassName","nodeLabelClassName","baseStyle","nodeLabelStyle","position","textStyle","alignmentBaseline","textAnchor","x","y","console","warn","SankeyLinkLabel","getWithLink","linkLabelClassName","linkLabelStyle","linkLabelAttributes","startOffset","linkLabelStartOffset","linkPathId","linkLabelText","SVGContainer","otherProps","omit","standalone","enhanceGraph","nodes","forEach","sourceLinksSum","sourceLinks","reduce","sum","max","links","valueSourceRelative","get","valueTargetRelative","maxDepth","maxBy","depth","getLinkId","source","target","nodeAlignmentsByName","left","right","center","justify","SankeyDiagram","innerWidth","marginLeft","marginRight","innerHeight","marginTop","marginBottom","makeSankey","size","nodeWidth","nodePadding","nodeAlign","nodeAlignment","shouldClone","cloneDeep","sankeyGraph","_graph","_makeSankeyGraph","nextProps","sankeyLayoutPropKeys","hasChangedSankey","some","key","makeLinkPath","mapNodesInGroupIf","shouldShow","groupClassName","mapFunc","map","i","mapLinksInGroupIf","showLinks","linkProps","showNodes","showNodeTerminals","showLinkLabels","showLinkSourceLabels","showLinkTargetLabels","hasLabel","labelProps","showNodeLabels","commonProps","linkSourceLabelText","linkSourceLabelClassName","linkSourceLabelStyle","linkSourceLabelAttributes","linkSourceLabelStartOffset","linkTargetLabelText","linkTargetLabelClassName","linkTargetLabelStyle","linkTargetLabelAttributes","linkTargetLabelStartOffset","Component","propTypes","arrayOf","object","isRequired","shape","oneOfType","string","number","bool","func","oneOf","defaultProps","index","rx","ry","has","name","label","valueText","format","sourceText","targetText","valueRelative","isFinite","percentText"],"mappings":"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","file":"SankeyDiagram.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport numeral from \"numeral\";\nimport {\n  sankey,\n  sankeyLinkHorizontal,\n  sankeyLeft,\n  sankeyRight,\n  sankeyCenter,\n  sankeyJustify\n} from \"d3-sankey\";\n\nimport { getValue } from \"./utils/Data\";\n\nconst SankeyNode = props => {\n  const { graph, node, nodeClassName, nodeStyle } = props;\n  // create partial functions for handlers - callbacks with the current node/graph arguments attached\n  const makeHandler = origHandler =>\n    _.isFunction(origHandler)\n      ? _.partial(origHandler, _, { node, graph })\n      : null;\n\n  return (\n    <rect\n      x={node.x0}\n      y={node.y0}\n      width={Math.abs(node.x1 - node.x0)}\n      height={Math.abs(node.y1 - node.y0)}\n      className={`sankey-node ${getValue(nodeClassName, node, graph)}`}\n      style={getValue(nodeStyle, node, graph)}\n      onMouseEnter={makeHandler(props.onMouseEnterNode)}\n      onMouseLeave={makeHandler(props.onMouseLeaveNode)}\n      onMouseMove={makeHandler(props.onMouseMoveNode)}\n      onMouseDown={makeHandler(props.onMouseDownNode)}\n      onMouseUp={makeHandler(props.onMouseUpNode)}\n      onClick={makeHandler(props.onClickNode)}\n    />\n  );\n};\n\nconst SankeyLink = props => {\n  const { graph, link, linkPath, linkClassName, linkStyle } = props;\n  // create partial functions for handlers - callbacks with the current graph/link arguments attached\n  const makeHandler = origHandler =>\n    _.isFunction(origHandler)\n      ? _.partial(origHandler, _, { link, graph })\n      : null;\n\n  return (\n    <path\n      d={linkPath}\n      className={`sankey-link ${getValue(linkClassName, link, graph)}`}\n      style={{\n        ...getValue(linkStyle, link, graph),\n        strokeWidth: link.width\n      }}\n      onMouseEnter={makeHandler(props.onMouseEnterLink)}\n      onMouseLeave={makeHandler(props.onMouseLeaveLink)}\n      onMouseMove={makeHandler(props.onMouseMoveLink)}\n      onMouseDown={makeHandler(props.onMouseDownLink)}\n      onMouseUp={makeHandler(props.onMouseUpLink)}\n      onClick={makeHandler(props.onClickLink)}\n    />\n  );\n};\n\nconst SankeyNodeTerminal = props => {\n  const { node, graph } = props;\n  if (!node.terminalValue) return null;\n  const makeHandler = origHandler =>\n    _.isFunction(origHandler)\n      ? _.partial(origHandler, _, { node, graph, props })\n      : null;\n  const getWithNode = accessor => getValue(accessor, node, graph, props);\n  const width = getWithNode(props.nodeTerminalWidth) || 0;\n  const distance = getWithNode(props.nodeTerminalDistance) || 0;\n  const nodeHeight = Math.abs(node.y1 - node.y0) || 0;\n  const height =\n    (nodeHeight * node.terminalValue || 0) / (node.value || 0) || 0;\n  const style = getWithNode(props.nodeTerminalStyle);\n  const className = `sankey-node-terminal ${getWithNode(\n    props.nodeTerminalClassName\n  )}`;\n  const attributes = getWithNode(props.nodeTerminalAttributes);\n\n  return (\n    <rect\n      x={node.x1 + distance}\n      y={node.y0 + (nodeHeight - height)}\n      {...{ width, height, style, className }}\n      {...attributes}\n      onMouseEnter={makeHandler(props.onMouseEnterNodeTerminal)}\n      onMouseLeave={makeHandler(props.onMouseLeaveNodeTerminal)}\n      onMouseMove={makeHandler(props.onMouseMoveNodeTerminal)}\n      onMouseDown={makeHandler(props.onMouseDownNodeTerminal)}\n      onMouseUp={makeHandler(props.onMouseUpNodeTerminal)}\n      onClick={makeHandler(props.onClickNodeTerminal)}\n    />\n  );\n};\n\nconst SankeyNodeLabel = props => {\n  const { node, graph, nodeLabelText, nodeId } = props;\n  const getWithNode = accessor => getValue(accessor, node, graph, props);\n  const getLabelText = _.isFunction(nodeLabelText) ? nodeLabelText : nodeId;\n  const placement = getWithNode(props.nodeLabelPlacement);\n  const distance = getWithNode(props.nodeLabelDistance) || 0;\n  const labelContent = getWithNode(getLabelText);\n  // don't render empty labels\n  if (\n    _.isNull(labelContent) ||\n    _.isUndefined(labelContent) ||\n    labelContent === false ||\n    labelContent === \"\"\n  ) {\n    return null;\n  }\n\n  // if `labelContent` is a string or number, it is rendered as text within a SVG <text> element\n  // otherwise, it is rendered as arbitrary SVG content\n  // allows users to render components inside a node label (eg. to add icon or link)\n  const isTextLabel = _.isString(labelContent) || _.isNumber(labelContent);\n  if (!isTextLabel) {\n    return labelContent;\n  }\n\n  const baseClassName = `sankey-node-label ${getWithNode(\n    props.nodeLabelClassName\n  )}`;\n  const baseStyle = getWithNode(props.nodeLabelStyle);\n  let position;\n  let textStyle;\n\n  // use placement prop to determine x, y, alignmentBaseline and textAnchor\n  if (placement === \"above\") {\n    // render label above node, centered horizontally\n    textStyle = {\n      alignmentBaseline: \"baseline\",\n      textAnchor: \"middle\",\n      ...baseStyle\n    };\n    position = {\n      x: node.x0 + Math.abs(node.x1 - node.x0) / 2,\n      y: node.y0 - distance\n    };\n  } else if (placement === \"below\") {\n    // render label above node, centered horizontally\n    textStyle = {\n      alignmentBaseline: \"hanging\",\n      textAnchor: \"middle\",\n      ...baseStyle\n    };\n    position = {\n      x: node.x0 + Math.abs(node.x1 - node.x0) / 2,\n      y: node.y1 + distance\n    };\n  } else if (placement === \"before\") {\n    // render label before (to left of) node, centered vertically\n    textStyle = {\n      alignmentBaseline: \"middle\",\n      textAnchor: \"end\",\n      ...baseStyle\n    };\n    position = {\n      x: node.x0 - distance,\n      y: node.y0 + Math.abs(node.y1 - node.y0) / 2\n    };\n  } else {\n    if (!_.isUndefined(placement) && placement !== \"after\")\n      console.warn(\n        `${placement} is not a valid value for nodeLabelPlacement - defaulting to \"after\"`\n      );\n    // render label after (to right of) node, centered vertically\n    textStyle = {\n      alignmentBaseline: \"middle\",\n      textAnchor: \"start\",\n      ...baseStyle\n    };\n    position = {\n      x: node.x1 + distance,\n      y: node.y0 + Math.abs(node.y1 - node.y0) / 2\n    };\n  }\n\n  const className = `${baseClassName} sankey-node-label-text`;\n  return (\n    <text {...position} className={className} style={textStyle}>\n      {labelContent}\n    </text>\n  );\n};\n\nconst SankeyLinkLabel = props => {\n  const { link, graph } = props;\n  const getWithLink = accessor => getValue(accessor, link, graph, props);\n  const className = `sankey-link-label ${getWithLink(\n    props.linkLabelClassName || \"\"\n  )}`;\n  const style = getWithLink(props.linkLabelStyle || {});\n  const attributes = getWithLink(props.linkLabelAttributes || {});\n  const startOffset = getWithLink(props.linkLabelStartOffset || 0);\n\n  return (\n    <text className={className} style={style} {...attributes}>\n      <textPath startOffset={startOffset} xlinkHref={`#${props.linkPathId}`}>\n        {getWithLink(props.linkLabelText)}\n      </textPath>\n    </text>\n  );\n};\n\nconst SVGContainer = props => {\n  const otherProps = _.omit(props, [\"standalone\"]);\n  if (props.standalone) {\n    return <svg {...otherProps} />;\n  }\n  return <g {...otherProps} />;\n};\n\n/**\n * Enhance the graph object created by d3-sankey by adding some additional useful properties.\n * Adds `maxDepth` (max of node `depth` properties)\n * and `node.terminalValue` (value of node's terminal, sum of all 'out' nodes minus sum of 'in' nodes)\n */\nfunction enhanceGraph(graph) {\n  graph.nodes.forEach(node => {\n    const sourceLinksSum = (node.sourceLinks || []).reduce(\n      (sum, link) => sum + link.value,\n      0\n    );\n    node.terminalValue = Math.max(node.value - sourceLinksSum, 0);\n  });\n  graph.links.forEach(link => {\n    link.valueSourceRelative =\n      (link.value || 0) / _.get(link, \"source.value\", 0);\n    link.valueTargetRelative =\n      (link.value || 0) / _.get(link, \"target.value\", 0);\n  });\n\n  graph.maxDepth = _.maxBy(graph.nodes, \"depth\");\n  graph.maxDepth = graph.nodes.reduce(\n    (max, node) => Math.max(node.depth || 0, max),\n    0\n  );\n  return graph;\n}\n\nfunction getLinkId(link, nodeId) {\n  return `link-${nodeId(link.source)}-to-${nodeId(link.target)}`;\n}\n\nconst nodeAlignmentsByName = {\n  left: sankeyLeft,\n  right: sankeyRight,\n  center: sankeyCenter,\n  justify: sankeyJustify\n};\n\n/**\n * A Sankey diagram is a type of flow diagram which visualizes directed flow between nodes\n * of a network graph. Currently only *acyclic* networks are supported.\n */\nexport default class SankeyDiagram extends React.Component {\n  static propTypes = {\n    /**\n     * Array of node objects, represented by vertical rectangles.\n     * These represent the base entities which links flow into & out of.\n     */\n    nodes: PropTypes.arrayOf(PropTypes.object).isRequired,\n    /**\n     * Array of link objects, represented by curved paths between nodes.\n     * Links represent a magnitude of flow between one node and another.\n     * Each should have a 'source' node [identifier], a 'target' node [identifier],\n     * and a numerical value representing flow magnitude.\n     */\n    links: PropTypes.arrayOf(\n      PropTypes.shape({\n        source: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        target: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        value: PropTypes.number\n      })\n    ).isRequired,\n    /**\n     * Width of the SVG element.\n     */\n    width: PropTypes.number.isRequired,\n    /**\n     * Height of the SVG element.\n     */\n    height: PropTypes.number.isRequired,\n    /**\n     * Boolean which decides if the nodes & links props should be cloned before being mutated into\n     * the Sankey data structure. Passing `false` is faster, but may cause unintended side effects\n     * if nodes or links data are used elsewhere\n     */\n    shouldClone: PropTypes.bool,\n    /**\n     * `className` attribute to be applied to the SVG element.\n     */\n    className: PropTypes.string,\n    /**\n     * Inline style object to be applied to the SVG element.\n     */\n    style: PropTypes.object,\n    /**\n     * Boolean which determines whether the chart should be rendered as a standalone `<svg>` element\n     * or a `<g>` group element (as a child within an existing `<svg>`).\n     * True by default, pass `false` to render in a `<g>`.\n     */\n    standalone: PropTypes.bool,\n    /**\n     * Internal top margin, in pixels. Generally used to eg. leave extra space inside the SVG for labels.\n     */\n    marginTop: PropTypes.number,\n    /**\n     * Internal bottom margin, in pixels.\n     */\n    marginBottom: PropTypes.number,\n    /**\n     * Internal left margin, in pixels.\n     */\n    marginLeft: PropTypes.number,\n    /**\n     * Internal right margin, in pixels.\n     */\n    marginRight: PropTypes.number,\n\n    /**\n     * Boolean which determines if node rectangles should be shown,\n     * or function (`showNode(node, graph)`) which returns a boolean\n     */\n    showNodes: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `nodeId(node, graph)` which specifies how to access the ID of each node object.\n     * These should be the same identifiers used by `links[].source` and `.target`.\n     * Uses the node's index in `nodes` array by default.\n     */\n    nodeId: PropTypes.func,\n    /**\n     * Width (in pixels) of the vertical node rectangles.\n     */\n    nodeWidth: PropTypes.number,\n    /**\n     * Vertical padding (in pixels) between each of the node lines.\n     */\n    nodePadding: PropTypes.number,\n    /**\n     * Node alignment method used to layout the nodes.\n     * May be 'left', 'right', 'center', 'justify', or a custom function.\n     * See [d3-sankey alignment docs](https://github.com/d3/d3-sankey#alignments) for more details.\n     */\n    nodeAlignment: PropTypes.oneOf([\"left\", \"right\", \"center\", \"justify\"]),\n    /**\n     * `className` attribute to be applied to each node,\n     * or accessor function which returns a class (string).\n     */\n    nodeClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each node,\n     * or accessor function which returns a style object.\n     */\n    nodeStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Node `mouseenter` event handler, called when user's mouse enters a node.\n     */\n    onMouseEnterNode: PropTypes.func,\n    /**\n     * Node `mouseleave` event handler, called when user's mouse leaves a node.\n     */\n    onMouseLeaveNode: PropTypes.func,\n    /**\n     * Node `mousemove` event handler, called when user's mouse moves within a node.\n     */\n    onMouseMoveNode: PropTypes.func,\n    /**\n     * Node `mousedown` event handler, called when user's mouse button is depressed within a node.\n     */\n    onMouseDownNode: PropTypes.func,\n    /**\n     * Node `mouseup` event handler, called when user's mouse button is released within a node.\n     */\n    onMouseUpNode: PropTypes.func,\n    /**\n     * Node `click` event handler, called when user clicks within a node.\n     */\n    onClickNode: PropTypes.func,\n\n    /**\n     * Boolean which determines if link paths should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinks: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each link,\n     * or accessor function which returns a class (string).\n     */\n    linkClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each link,\n     * or accessor function which returns a style object.\n     */\n    linkStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Link `mouseenter` event handler, called when user's mouse enters a link.\n     */\n    onMouseEnterLink: PropTypes.func,\n    /**\n     * Link `mouseleave` event handler, called when user's mouse leaves a link.\n     */\n    onMouseLeaveLink: PropTypes.func,\n    /**\n     * Link `mousemove` event handler, called when user's mouse moves within a link.\n     */\n    onMouseMoveLink: PropTypes.func,\n    /**\n     * Link `mousedown` event handler, called when user's mouse button is depressed within a link.\n     */\n    onMouseDownLink: PropTypes.func,\n    /**\n     * Link `mouseup` event handler, called when user's mouse button is released within a link.\n     */\n    onMouseUpLink: PropTypes.func,\n    /**\n     * Link `click` event handler, called when user clicks within a link.\n     */\n    onClickLink: PropTypes.func,\n\n    /**\n     * Boolean which determines if node terminals should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean.\n     * Terminals are bars that run alongside to show the amount\n     * which has flowed *in* but not *out*\n     */\n    showNodeTerminals: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Width (in pixels) of the node terminal rectangles,\n     * or accessor function `f(node, graph)` which returns a width.\n     */\n    nodeTerminalWidth: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    /**\n     * Distance (in pixels) between nodes and their terminals,\n     * or accessor function `f(node, graph)` which returns a distance.\n     */\n    nodeTerminalDistance: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.func\n    ]),\n    /**\n     * `className` attribute to be applied to each node terminal,\n     * or accessor function which returns a class (string).\n     */\n    nodeTerminalClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func\n    ]),\n    /**\n     * Inline style object to be applied to each node terminal,\n     * or accessor function which returns a style object.\n     */\n    nodeTerminalStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Attributes object to be applied to each node terminal element,\n     * or accessor function which returns an object.\n     */\n    nodeTerminalAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * Node terminal `mouseenter` event handler, called when user's mouse enters a node terminal.\n     */\n    onMouseEnterNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mouseleave` event handler, called when user's mouse leaves a node terminal.\n     */\n    onMouseLeaveNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mousemove` event handler, called when user's mouse moves within a node terminal.\n     */\n    onMouseMoveNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mousedown` event handler, called when user's mouse button is depressed within a node terminal.\n     */\n    onMouseDownNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `mouseup` event handler, called when user's mouse button is released within a node terminal.\n     */\n    onMouseUpNodeTerminal: PropTypes.func,\n    /**\n     * Node terminal `click` event handler, called when user clicks within a node terminal.\n     */\n    onClickNodeTerminal: PropTypes.func,\n\n    /**\n     * Boolean which determines if node labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showNodeLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Placement of the node label relative to the node rectangle.\n     * Expects 'before', 'after', 'above' or 'below', or a function which returns one of these.\n     * By default, labels in the left half of the diagram are placed 'after' and those in the right half 'before'\n     */\n    nodeLabelPlacement: PropTypes.oneOfType([\n      PropTypes.oneOf([\"before\", \"after\", \"above\", \"below\"]),\n      PropTypes.func\n    ]),\n    /**\n     * Distance (in pixels) between nodes and their labels,\n     * or accessor function `f(node, graph)` which returns a distance.\n     */\n    nodeLabelDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    /**\n     * Accessor function `nodeLabelText(node, graph)` which returns the content to be used for node labels.\n     * The function may return a string/number (rendered as SVG `<text>`),\n     * or arbitrary React SVG element(s) (rendered as-is inside the SVG).\n     * NOTE: in the latter case (returning arbitrary SVG), `nodeLabelPlacement`, `nodeLabelDistance`,\n     * `nodeLabelClassName` and `nodeLabelStyle` props will not be applied -\n     * user is responsible for all positioning and attributes on this element.\n     */\n    nodeLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each node label,\n     * or accessor function which returns a class (string).\n     */\n    nodeLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each node label,\n     * or accessor function which returns a style object.\n     */\n    nodeLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n    /**\n     * Boolean which determines if link labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link labels.\n     */\n    linkLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link label,\n     * or accessor function which returns a class (string).\n     */\n    linkLabelClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each link label,\n     * or accessor function which returns a style object.\n     */\n    linkLabelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Attributes object to be applied to each link label element,\n     * or accessor function which returns an object.\n     */\n    linkLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n\n    /**\n     * Boolean which determines if link *source* labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkSourceLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link *source* labels.\n     */\n    linkSourceLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link *source* label,\n     * or accessor function which returns a class (string).\n     */\n    linkSourceLabelClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func\n    ]),\n    /**\n     * Inline style object to be applied to each link *source* label,\n     * or accessor function which returns a style object.\n     */\n    linkSourceLabelStyle: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * Attributes object to be applied to each link *source* label,\n     * or accessor function which returns an object.\n     */\n    linkSourceLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link *source* label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkSourceLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ]),\n\n    /**\n     * Boolean which determines if link *target* labels should be shown,\n     * or function (`showLink(link, graph)`) which returns a boolean\n     */\n    showLinkTargetLabels: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    /**\n     * Accessor function `f(link, graph)` which returns the text to be used for link *target* labels.\n     */\n    linkTargetLabelText: PropTypes.func,\n    /**\n     * `className` attribute to be applied to each link *target* label,\n     * or accessor function which returns a class (string).\n     */\n    linkTargetLabelClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.func\n    ]),\n    /**\n     * Inline style object to be applied to each link *target* label,\n     * or accessor function which returns a style object.\n     */\n    linkTargetLabelStyle: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * Attributes object to be applied to each link *target* label,\n     * or accessor function which returns an object.\n     */\n    linkTargetLabelAttributes: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func\n    ]),\n    /**\n     * `startOffset` attribute to apply to the link *target* label `<textpath>` element.\n     * May be a number (in SVG units) or percent string (`\"25%\"`)\n     */\n    linkTargetLabelStartOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number\n    ])\n\n    //standalone\n  };\n  static defaultProps = {\n    width: 400,\n    height: 300,\n    shouldClone: true,\n    className: \"\",\n    style: {},\n    standalone: true,\n    marginTop: 0,\n    marginBottom: 0,\n    marginLeft: 0,\n    marginRight: 0,\n    nodeId: node => node.index,\n    showNodes: true,\n    nodeWidth: 12,\n    nodePadding: 8,\n    nodeAlignment: \"justify\",\n    nodeClassName: \"\",\n    nodeStyle: {},\n    showLinks: true,\n    linkClassName: \"\",\n    linkStyle: {},\n    showNodeTerminals: true,\n    nodeTerminalWidth: 5,\n    nodeTerminalDistance: 1,\n    nodeTerminalClassName: \"\",\n    nodeTerminalStyle: {},\n    nodeTerminalAttributes: { rx: 2, ry: 2 },\n    showNodeLabels: true,\n    nodeLabelPlacement: (node, graph) => {\n      return node.depth < graph.maxDepth / 2 ? \"after\" : \"before\";\n    },\n    nodeLabelDistance: 4,\n    nodeLabelText: (node, graph, props) => {\n      if (_.has(node, \"name\")) return node.name;\n      if (_.has(node, \"label\")) return node.label;\n      return getValue(props.nodeId, node, graph, props);\n    },\n    nodeLabelClassName: \"\",\n    nodeLabelStyle: {},\n    showLinkLabels: false,\n    linkLabelText: (link, graph, props) => {\n      const valueText = numeral(link.value || 0).format(\"0.[0]a\");\n      const sourceText = getValue(\n        props.nodeLabelText,\n        link.source,\n        graph,\n        props\n      );\n      const targetText = getValue(\n        props.nodeLabelText,\n        link.target,\n        graph,\n        props\n      );\n      return `${sourceText}→${targetText}: ${valueText}`;\n    },\n    linkLabelClassName: \"\",\n    linkLabelStyle: {},\n    linkLabelAttributes: {},\n    linkLabelStartOffset: \"25%\",\n    showLinkSourceLabels: false,\n    linkSourceLabelText: (link, graph, props) => {\n      const valueRelative = link.valueSourceRelative;\n      if (!_.isFinite(valueRelative)) return \"\";\n      const percentText =\n        valueRelative < 0.001\n          ? \"<0.1%\"\n          : numeral(valueRelative).format(\"0.[0]%\");\n      return `${percentText} to ${getValue(\n        props.nodeLabelText,\n        link.target,\n        graph,\n        props\n      )}`;\n    },\n    linkSourceLabelClassName: \"\",\n    linkSourceLabelStyle: {},\n    linkSourceLabelAttributes: {},\n    linkSourceLabelStartOffset: \"2%\",\n    showLinkTargetLabels: false,\n    linkTargetLabelText: (link, graph, props) => {\n      const valueRelative = link.valueTargetRelative;\n      if (!_.isFinite(valueRelative)) return \"\";\n      const percentText =\n        valueRelative < 0.001\n          ? \"<0.1%\"\n          : numeral(valueRelative).format(\"0.[0]%\");\n      return `${percentText} from ${getValue(\n        props.nodeLabelText,\n        link.source,\n        graph,\n        props\n      )}`;\n    },\n    linkTargetLabelClassName: \"\",\n    linkTargetLabelStyle: {},\n    linkTargetLabelAttributes: {},\n    linkTargetLabelStartOffset: \"98%\"\n  };\n\n  _makeSankeyGraph() {\n    const innerWidth =\n      this.props.width - (this.props.marginLeft + this.props.marginRight);\n    const innerHeight =\n      this.props.height - (this.props.marginTop + this.props.marginBottom);\n    const makeSankey = sankey()\n      .size([innerWidth, innerHeight])\n      .nodeId(this.props.nodeId)\n      .nodeWidth(this.props.nodeWidth)\n      .nodePadding(this.props.nodePadding)\n      .nodeAlign(\n        nodeAlignmentsByName[this.props.nodeAlignment] ||\n          nodeAlignmentsByName.justify\n      );\n\n    const nodes = this.props.shouldClone\n      ? _.cloneDeep(this.props.nodes)\n      : this.props.nodes;\n    const links = this.props.shouldClone\n      ? _.cloneDeep(this.props.links)\n      : this.props.links;\n    const sankeyGraph = makeSankey({ nodes, links });\n    this._graph = enhanceGraph(sankeyGraph);\n  }\n\n  componentWillMount() {\n    this._makeSankeyGraph();\n  }\n  componentWillReceiveProps(nextProps) {\n    // only update this._graph if a prop which affects the sankey layout has changed (most don't)\n    const sankeyLayoutPropKeys = [\n      \"nodes\",\n      \"links\",\n      \"width\",\n      \"height\",\n      \"marginTop\",\n      \"marginBottom\",\n      \"marginLeft\",\n      \"marginRight\",\n      \"nodeId\",\n      \"nodeWidth\",\n      \"nodePadding\",\n      \"nodeAlignment\"\n    ];\n\n    const hasChangedSankey = _.some(sankeyLayoutPropKeys, key => {\n      return nextProps[key] !== this.props[key];\n    });\n    if (hasChangedSankey) this._makeSankeyGraph();\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      style,\n      standalone,\n      nodeId,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight\n    } = this.props;\n\n    const graph = this._graph;\n    const makeLinkPath = sankeyLinkHorizontal();\n    const className = `sankey-diagram ${this.props.className}`;\n    const innerWidth = width - (marginLeft + marginRight);\n    const innerHeight = height - (marginTop + marginBottom);\n\n    function mapNodesInGroupIf(shouldShow, groupClassName, mapFunc) {\n      if (!shouldShow) return null;\n      return (\n        <g className={groupClassName}>\n          {(graph.nodes || []).map((node, i) => {\n            if (!getValue(shouldShow, node, graph)) return null;\n            const key = `node-${nodeId(node)}`;\n            return mapFunc(node, i, key);\n          })}\n        </g>\n      );\n    }\n\n    function mapLinksInGroupIf(shouldShow, groupClassName, mapFunc) {\n      if (!shouldShow) return null;\n      return (\n        <g className={groupClassName}>\n          {(graph.links || []).map((link, i) => {\n            if (!getValue(shouldShow, link, graph)) return null;\n            const key = `link-${nodeId(link.source)}-to-${nodeId(link.target)}`;\n            return mapFunc(link, i, key);\n          })}\n        </g>\n      );\n    }\n\n    return (\n      <SVGContainer {...{ standalone, width, height, className, style }}>\n        <g\n          width={innerWidth}\n          height={innerHeight}\n          transform={`translate(${marginLeft}, ${marginTop})`}\n        >\n          {mapLinksInGroupIf(\n            this.props.showLinks,\n            \"sankey-links\",\n            (link, i, key) => {\n              const linkProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPath: makeLinkPath(link)\n              };\n              return <SankeyLink {...linkProps} />;\n            }\n          )}\n          {mapNodesInGroupIf(\n            this.props.showNodes,\n            \"sankey-nodes\",\n            (node, i, key) => {\n              return <SankeyNode {...this.props} {...{ key, graph, node }} />;\n            }\n          )};\n          {mapNodesInGroupIf(\n            this.props.showNodeTerminals,\n            \"sankey-node-terminals\",\n            (node, i, key) => {\n              return (\n                <SankeyNodeTerminal {...this.props} {...{ key, graph, node }} />\n              );\n            }\n          )};\n          {/* the three types of link labels (link, link source, link target) use textpath to follow the link's path */}\n          {/* to minimize dom elements, first render one set of path definitions to be used by all three label types */}\n          {this.props.showLinkLabels ||\n          this.props.showLinkSourceLabels ||\n          this.props.showLinkTargetLabels ? (\n            <defs>\n              {graph.links.map(link => {\n                const hasLabel =\n                  getValue(this.props.showLinkLabels, link, graph) ||\n                  getValue(this.props.showLinkSourceLabels, link, graph) ||\n                  getValue(this.props.showLinkTargetLabels, link, graph);\n                if (!hasLabel) return null;\n\n                const linkPath = makeLinkPath(link);\n                const linkPathId = `${getLinkId(link, nodeId)}-path`;\n                return <path id={linkPathId} d={linkPath} key={linkPathId} />;\n              })}\n            </defs>\n          ) : null}\n          {mapLinksInGroupIf(\n            this.props.showLinkLabels,\n            \"sankey-link-labels\",\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const labelProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId\n              };\n              return <SankeyLinkLabel {...labelProps} />;\n            }\n          )}\n          {mapNodesInGroupIf(\n            this.props.showNodeLabels,\n            \"sankey-node-labels\",\n            (node, i, key) => {\n              return (\n                <SankeyNodeLabel {...this.props} {...{ key, graph, node }} />\n              );\n            }\n          )};\n          {mapLinksInGroupIf(\n            this.props.showLinkSourceLabels,\n            \"sankey-link-source-labels\",\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const commonProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId\n              };\n              const labelProps = {\n                ...commonProps,\n                linkLabelText: this.props.linkSourceLabelText,\n                linkLabelClassName: this.props.linkSourceLabelClassName,\n                linkLabelStyle: this.props.linkSourceLabelStyle,\n                linkLabelAttributes: this.props.linkSourceLabelAttributes,\n                linkLabelStartOffset: this.props.linkSourceLabelStartOffset\n              };\n\n              return <SankeyLinkLabel {...labelProps} />;\n            }\n          )}\n          {mapLinksInGroupIf(\n            this.props.showLinkTargetLabels,\n            \"sankey-link-target-labels\",\n            (link, i, key) => {\n              const linkPathId = `${getLinkId(link, nodeId)}-path`;\n              const commonProps = {\n                ...this.props,\n                key,\n                graph,\n                link,\n                linkPathId\n              };\n              const labelProps = {\n                ...commonProps,\n                linkLabelText: this.props.linkTargetLabelText,\n                linkLabelClassName: this.props.linkTargetLabelClassName,\n                linkLabelStyle: {\n                  textAnchor: \"end\",\n                  ...this.props.linkTargetLabelStyle\n                },\n                linkLabelAttributes: this.props.linkTargetLabelAttributes,\n                linkLabelStartOffset: this.props.linkTargetLabelStartOffset\n              };\n\n              return <SankeyLinkLabel {...labelProps} />;\n            }\n          )}\n        </g>\n      </SVGContainer>\n    );\n  }\n}\n"]}