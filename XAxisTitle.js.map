{"version":3,"sources":["src/XAxisTitle.js"],"names":["XAxisTitle","React","Component","getMargin","props","_","defaults","defaultProps","distance","position","rotate","placement","zeroMargin","marginTop","marginBottom","marginLeft","marginRight","title","children","style","measured","assign","text","marginValue","Math","ceil","width","value","height","render","alignment","spacingTop","spacingBottom","posY","translateY","translateX","textAnchor","dy","PropTypes","number","oneOf","bool","object","undefined","fontFamily","fontSize","fontWeight","lineHeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport measureText from \"./utils/measureText\";\nimport PropTypes from \"prop-types\";\n\nexport default class XAxisTitle extends React.Component {\n  static propTypes = {\n    height: PropTypes.number,\n    width: PropTypes.number,\n    /**\n     * Title distance from X Axis\n     */\n    distance: PropTypes.number,\n    /**\n     * Position of title in regards to the x axis. Accepted options are \"top\" or \"bottom\"\n     */\n    position: PropTypes.oneOf([\"top\", \"bottom\"]),\n    /**\n     * Placement of title in regards to the x axis. Accepted options are \"above\" or \"below\"\n     */\n    placement: PropTypes.oneOf([\"above\", \"below\"]),\n    alignment: PropTypes.oneOf([\"left\", \"center\", \"right\"]),\n    rotate: PropTypes.bool,\n    /**\n     * Object declaring styles for label.\n     *\n     * Disclaimer: labelStyle will merge its defaults with the given labelStyle prop\n     * in order to ensure that our collision library measureText is able to calculate the\n     * smallest amount of possible collisions along the axis. It's therefore dependent on\n     * fontFamily, size and fontStyle to always be passed in. If you're looking to have a centralized\n     * stylesheet, we suggest creating a styled title component that wraps XAxisTitle with your preferred styles.\n     */\n    style: PropTypes.object,\n    /**\n     * Spacing - provided by XYPlot\n     */\n    spacingTop: PropTypes.number,\n    /**\n     * Spacing - provided by XYPlot\n     */\n    spacingBottom: PropTypes.number\n  };\n  static defaultProps = {\n    height: 250,\n    width: 400,\n    distance: 5,\n    position: \"bottom\",\n    placement: undefined,\n    alignment: \"center\",\n    rotate: false,\n    style: {\n      fontFamily: \"Helvetica, sans-serif\",\n      fontSize: \"24px\",\n      fontWeight: \"bold\",\n      lineHeight: 1\n    },\n    spacingTop: 0,\n    spacingBottom: 0\n  };\n\n  static getMargin(props) {\n    props = _.defaults({}, props, XAxisTitle.defaultProps);\n    const { distance, position, rotate } = props;\n    const placement =\n      props.placement || (position === \"bottom\" ? \"below\" : \"above\");\n    const zeroMargin = {\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0\n    };\n\n    if (\n      (position === \"bottom\" && placement === \"above\") ||\n      (position === \"top\" && placement === \"below\")\n    )\n      return zeroMargin;\n\n    const title = props.title || props.children;\n    const style = _.defaults(props.style, XAxisTitle.defaultProps.style);\n    const measured = measureText(_.assign({ text: title }, style));\n\n    const marginValue =\n      distance +\n      Math.ceil(rotate ? measured.width.value : measured.height.value);\n\n    return position === \"bottom\"\n      ? { ...zeroMargin, marginBottom: marginValue }\n      : { ...zeroMargin, marginTop: marginValue };\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      distance,\n      position,\n      alignment,\n      style,\n      spacingTop,\n      spacingBottom\n    } = this.props;\n    const title = this.props.title || this.props.children;\n    const placement =\n      this.props.placement || (position === \"bottom\" ? \"below\" : \"above\");\n    const rotate = this.props.rotate ? -90 : 0;\n\n    const posY = position === \"bottom\" ? height + spacingBottom : -spacingTop;\n    const translateY = posY + (placement === \"above\" ? -distance : distance);\n    const translateX =\n      alignment === \"center\" ? width / 2 : alignment === \"right\" ? width : 0;\n\n    const textAnchor =\n      rotate && placement === \"above\"\n        ? \"start\"\n        : rotate && placement === \"below\"\n          ? \"end\"\n          : alignment === \"left\"\n            ? \"start\"\n            : alignment === \"right\"\n              ? \"end\"\n              : \"middle\";\n\n    const dy =\n      rotate && alignment === \"right\"\n        ? \"-0.2em\"\n        : rotate && alignment === \"center\"\n          ? \"0.3em\"\n          : rotate\n            ? \"0.8em\"\n            : placement === \"below\"\n              ? \"0.8em\"\n              : \"-0.2em\";\n\n    return (\n      <g transform={`translate(${translateX},${translateY})`}>\n        <text\n          style={{ ...style, textAnchor }}\n          transform={`rotate(${rotate})`}\n          dy={dy}\n        >\n          {title}\n        </text>\n      </g>\n    );\n  }\n}\n"],"file":"XAxisTitle.js"}