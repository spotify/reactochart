{"version":3,"sources":["src/RangeBarChart.js"],"names":["CustomPropTypes","RangeBarChart","nextProps","nextState","shouldUpdate","props","xScale","yScale","data","horizontal","x","xEnd","y","yEnd","barThickness","barClassName","barStyle","map","d","i","callback","get","eventName","isFunction","partial","onMouseEnter","onMouseMove","onMouseLeave","barProps","undefined","key","thickness","className","style","xScaleType","yScaleType","rangeAxis","rangeStartAccessor","rangeEndAccessor","rangeScaleType","rangeDataType","xDomain","yDomain","P","barsDomain","barsScale","barsAccessor","barsDataDomain","first","last","sortBy","domainHead","domainTail","dataDomainHead","dataDomainTail","clamp","spacingTail","spacingHead","spacingTop","spacingBottom","spacingLeft","spacingRight","Component","propTypes","array","bool","valueOrAccessor","func","number","oneOfType","object","string","onMouseMoveBar","onMouseEnterBar","onMouseLeaveBar","defaultProps"],"mappings":"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","file":"RangeBarChart.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport invariant from \"invariant\";\nimport PropTypes from \"prop-types\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport { hasXYScales, dataTypeFromScaleType } from \"./utils/Scale\";\nimport {\n  makeAccessor2,\n  getValue,\n  domainFromRangeData,\n  domainFromData,\n  getDataDomainByAxis\n} from \"./utils/Data\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\nimport Bar from \"./Bar\";\n\n/**\n *\n * `RangeBarChart` is a variation on the standard bar chart. Just like a normal bar chart, each bar represents a single\n * value on the *independent* axis (X axis for vertical bars), and is centered on this value.\n * However, on the *dependent* axis, each bar represents a *range* (min/max) of values,\n * rather than always starting at zero.\n */\n\nexport default class RangeBarChart extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data to be plotted. One bar will be rendered per datum in this array.\n     */\n    data: PropTypes.array,\n    /**\n     * Boolean which determines whether the chart will use horizontal or vertical bars.\n     * When `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.\n     */\n    horizontal: PropTypes.bool,\n\n    /**\n     * Accessor function for bar X values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the *independent* variable value on which the bar is centered.\n     * If `horizontal` is `true`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (maximum X values) of the *dependent* variable range which is spanned by the bar's length,\n     * or a single value to be used for all bars.\n     * Should only be passed when `horizontal` is `true` (ignored otherwise).\n     */\n    xEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for bar Y values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\n     * If `horizontal` is `true`, this gets the *independent* variable value on which the bar is centered.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (maximum Y-value) of the *dependent* variable range which is spanned by the bar's length,\n     * or a single value to be used for all bars.\n     * Should only be passed when `horizontal` is `false` (ignored otherwise).\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * Thickness (in pixels) of each bar (ie. bar height if `horizontal` is `true`, otherwise bar width),\n     */\n    barThickness: PropTypes.number,\n    // barThickness: PropTypes.oneOfType([PropTypes.number, PropTypes.func]), // todo\n\n    /**\n     * Inline style object to be applied to each bar,\n     * or accessor function which returns a style object;\n     */\n    barStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each bar.\n     * or accessor function which returns a class;\n     */\n    barClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a bar.\n     */\n    onMouseMoveBar: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a bar.\n     */\n    onMouseEnterBar: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a bar.\n     */\n    onMouseLeaveBar: PropTypes.func\n  };\n  static defaultProps = {\n    data: [],\n    horizontal: false,\n    barThickness: 8,\n    barClassName: \"\",\n    barStyle: {}\n  };\n\n  static getDomain(props) {\n    const {\n      xScaleType,\n      yScaleType,\n      horizontal,\n      data,\n      x,\n      xEnd,\n      y,\n      yEnd\n    } = props;\n\n    // only have to specify range axis domain, other axis uses default domainFromData\n    const rangeAxis = horizontal ? \"x\" : \"y\";\n    const rangeStartAccessor = horizontal ? makeAccessor2(x) : makeAccessor2(y);\n    const rangeEndAccessor = horizontal\n      ? makeAccessor2(xEnd)\n      : makeAccessor2(yEnd);\n    const rangeScaleType = horizontal ? xScaleType : yScaleType;\n    const rangeDataType = dataTypeFromScaleType(rangeScaleType);\n\n    return {\n      [`${rangeAxis}Domain`]: domainFromRangeData(\n        data,\n        rangeStartAccessor,\n        rangeEndAccessor,\n        rangeDataType\n      )\n    };\n  }\n  static getSpacing(props) {\n    const {\n      barThickness,\n      horizontal,\n      x,\n      y,\n      xScale,\n      yScale,\n      data,\n      xDomain,\n      yDomain\n    } = props;\n    const P = barThickness / 2; //padding\n    const barsDomain = horizontal ? yDomain : xDomain;\n    const barsScale = horizontal ? yScale : xScale;\n    const barsAccessor = horizontal ? makeAccessor2(y) : makeAccessor2(x);\n    const barsDataDomain = domainFromData(data, barsAccessor);\n\n    // todo refactor/add better comments to clarify\n    //find the edges of the tick domain, and map them through the scale function\n    const [domainHead, domainTail] = _([\n      _.first(barsDomain),\n      _.last(barsDomain)\n    ])\n      .map(barsScale)\n      .sortBy(); //sort the pixel values return by the domain extents\n    //find the edges of the data domain, and map them through the scale function\n    const [dataDomainHead, dataDomainTail] = _([\n      _.first(barsDataDomain),\n      _.last(barsDataDomain)\n    ])\n      .map(barsScale)\n      .sortBy(); //sort the pixel values return by the domain extents\n    //find the necessary spacing (based on bar width) to push the bars completely inside the tick domain\n    const [spacingTail, spacingHead] = [\n      _.clamp(P - (domainTail - dataDomainTail), 0, P),\n      _.clamp(P - (dataDomainHead - domainHead), 0, P)\n    ];\n    if (horizontal) {\n      return {\n        spacingTop: spacingHead,\n        spacingBottom: spacingTail,\n        spacingLeft: 0,\n        spacingRight: 0\n      };\n    } else {\n      return {\n        spacingTop: 0,\n        spacingBottom: 0,\n        spacingLeft: spacingHead,\n        spacingRight: spacingTail\n      };\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\"barStyle\"]);\n    return shouldUpdate;\n  }\n\n  render() {\n    const {\n      xScale,\n      yScale,\n      data,\n      horizontal,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      barThickness,\n      barClassName,\n      barStyle\n    } = this.props;\n    // invariant(hasOneOfTwo(xEnd, yEnd), `RangeBarChart expects a xEnd *or* yEnd prop, but not both.`);\n\n    return (\n      <g>\n        {data.map((d, i) => {\n          const [onMouseEnter, onMouseMove, onMouseLeave] = [\n            \"onMouseEnterBar\",\n            \"onMouseMoveBar\",\n            \"onMouseLeaveBar\"\n          ].map(eventName => {\n            // partially apply this bar's data point as 2nd callback argument\n            const callback = _.get(this.props, eventName);\n            return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n          });\n\n          const barProps = {\n            x: getValue(x, d, i),\n            y: getValue(y, d, i),\n            xEnd: horizontal ? getValue(xEnd, d, i) : undefined,\n            yEnd: horizontal ? undefined : getValue(yEnd, d, i),\n            xScale,\n            yScale,\n            key: `chart-bar-${i}`,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n            thickness: barThickness,\n            className: `chart-bar ${getValue(barClassName, d, i) || \"\"}`,\n            style: getValue(barStyle, d, i)\n          };\n\n          return <Bar {...barProps} />;\n\n          // console.log('xEnd yEnd value', getValue(xEnd, d), getValue(yEnd, d), horizontal);\n          return horizontal ? (\n            <Bar xEnd={getValue(xEnd, d, i)} {...barProps} />\n          ) : (\n            <Bar yEnd={getValue(yEnd, d, i)} {...barProps} />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"]}