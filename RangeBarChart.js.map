{"version":3,"sources":["src/RangeBarChart.js"],"names":["RangeBarChart","React","Component","getDomain","props","xScaleType","yScaleType","horizontal","data","x","xEnd","y","yEnd","rangeAxis","rangeStartAccessor","rangeEndAccessor","rangeScaleType","rangeDataType","getSpacing","barThickness","xScale","yScale","xDomain","yDomain","P","barsDomain","barsScale","barsAccessor","barsDataDomain","domainHead","domainTail","_","first","last","map","sortBy","dataDomainHead","dataDomainTail","spacingTail","spacingHead","clamp","spacingTop","spacingBottom","spacingLeft","spacingRight","shouldComponentUpdate","nextProps","shouldUpdate","render","barClassName","barStyle","showLabels","barLabelFormat","labelDistance","labelClassName","d","i","onMouseEnter","onMouseMove","onMouseLeave","eventName","callback","get","isFunction","partial","barProps","undefined","key","thickness","showLabel","labelFormat","className","style","PropTypes","array","bool","CustomPropTypes","valueOrAccessor","func","number","oneOfType","object","string","onMouseMoveBar","onMouseEnterBar","onMouseLeaveBar"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Bar from \"./Bar\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport {\n  domainFromData,\n  domainFromRangeData,\n  getValue,\n  makeAccessor2\n} from \"./utils/Data\";\nimport { dataTypeFromScaleType } from \"./utils/Scale\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\n\n/**\n * `RangeBarChart` is a variation on the standard bar chart. Just like a normal bar chart, each bar represents a single\n * value on the *independent* axis (X axis for vertical bars), and is centered on this value.\n * However, on the *dependent* axis, each bar represents a *range* (min/max) of values,\n * rather than always starting at zero.\n */\n\nexport default class RangeBarChart extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data to be plotted. One bar will be rendered per datum in this array.\n     */\n    data: PropTypes.array,\n    /**\n     * Boolean which determines whether the chart will use horizontal or vertical bars.\n     * When `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.\n     */\n    horizontal: PropTypes.bool,\n\n    /**\n     * Accessor function for bar X values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the *independent* variable value on which the bar is centered.\n     * If `horizontal` is `true`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (maximum X-values) of the *dependent* variable range which is spanned by the bar's length,\n     * or a single value to be used for all bars.\n     * Should only be passed when `horizontal` is `true` (ignored otherwise).\n     */\n    xEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for bar Y values, called once per bar (datum), or a single value to be used for all bars.\n     * If `horizontal` is `false`, this gets the start (minimum value) of the *dependent* variable range which is spanned by the bar's length.\n     * If `horizontal` is `true`, this gets the *independent* variable value on which the bar is centered.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for the end (maximum Y-values) of the *dependent* variable range which is spanned by the bar's length,\n     * or a single value to be used for all bars.\n     * Should only be passed when `horizontal` is `false` (ignored otherwise).\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot.\n     */\n    yScale: PropTypes.func,\n    /**\n     * Thickness (in pixels) of each bar (ie. bar height if `horizontal` is `true`, otherwise bar width),\n     */\n    barThickness: PropTypes.number,\n    // barThickness: PropTypes.oneOfType([PropTypes.number, PropTypes.func]), // todo\n\n    /**\n     * Inline style object to be applied to each bar,\n     * or accessor function which returns a style object.\n     */\n    barStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each bar,\n     * or accessor function which returns a class.\n     */\n    barClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a bar.\n     */\n    onMouseMoveBar: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a bar.\n     */\n    onMouseEnterBar: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a bar.\n     */\n    onMouseLeaveBar: PropTypes.func,\n    /**\n     * Conditional if column should display values above/beside each bar.\n     */\n    showLabels: PropTypes.bool,\n    /**\n     * Format to use for the values or accessor that returns the updated value on each bar.\n     */\n    barLabelFormat: PropTypes.func,\n    /**\n     * The distance from the column the text appears in pixels - default is 24.\n     */\n    labelDistance: PropTypes.number,\n    /**\n     * Class name(s) to be included on each bar's <text> element.\n     */\n    labelClassName: PropTypes.string\n  };\n  static defaultProps = {\n    data: [],\n    horizontal: false,\n    barThickness: 8,\n    barClassName: \"\",\n    barStyle: {}\n  };\n\n  static getDomain(props) {\n    const {\n      xScaleType,\n      yScaleType,\n      horizontal,\n      data,\n      x,\n      xEnd,\n      y,\n      yEnd\n    } = props;\n\n    // only have to specify range axis domain, other axis uses default domainFromData\n    const rangeAxis = horizontal ? \"x\" : \"y\";\n    const rangeStartAccessor = horizontal ? makeAccessor2(x) : makeAccessor2(y);\n    const rangeEndAccessor = horizontal\n      ? makeAccessor2(xEnd)\n      : makeAccessor2(yEnd);\n    const rangeScaleType = horizontal ? xScaleType : yScaleType;\n    const rangeDataType = dataTypeFromScaleType(rangeScaleType);\n\n    return {\n      [`${rangeAxis}Domain`]: domainFromRangeData(\n        data,\n        rangeStartAccessor,\n        rangeEndAccessor,\n        rangeDataType\n      )\n    };\n  }\n  static getSpacing(props) {\n    const {\n      barThickness,\n      horizontal,\n      x,\n      y,\n      xScale,\n      yScale,\n      data,\n      xDomain,\n      yDomain\n    } = props;\n    const P = barThickness / 2; //padding\n    const barsDomain = horizontal ? yDomain : xDomain;\n    const barsScale = horizontal ? yScale : xScale;\n    const barsAccessor = horizontal ? makeAccessor2(y) : makeAccessor2(x);\n    const barsDataDomain = domainFromData(data, barsAccessor);\n\n    // todo refactor/add better comments to clarify\n    //find the edges of the tick domain, and map them through the scale function\n    const [domainHead, domainTail] = _([\n      _.first(barsDomain),\n      _.last(barsDomain)\n    ])\n      .map(barsScale)\n      .sortBy(); //sort the pixel values return by the domain extents\n    //find the edges of the data domain, and map them through the scale function\n    const [dataDomainHead, dataDomainTail] = _([\n      _.first(barsDataDomain),\n      _.last(barsDataDomain)\n    ])\n      .map(barsScale)\n      .sortBy(); //sort the pixel values return by the domain extents\n    //find the necessary spacing (based on bar width) to push the bars completely inside the tick domain\n    const [spacingTail, spacingHead] = [\n      _.clamp(P - (domainTail - dataDomainTail), 0, P),\n      _.clamp(P - (dataDomainHead - domainHead), 0, P)\n    ];\n    if (horizontal) {\n      return {\n        spacingTop: spacingHead,\n        spacingBottom: spacingTail,\n        spacingLeft: 0,\n        spacingRight: 0\n      };\n    } else {\n      return {\n        spacingTop: 0,\n        spacingBottom: 0,\n        spacingLeft: spacingHead,\n        spacingRight: spacingTail\n      };\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\"barStyle\"]);\n    return shouldUpdate;\n  }\n\n  render() {\n    const {\n      xScale,\n      yScale,\n      data,\n      horizontal,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      barThickness,\n      barClassName,\n      barStyle,\n      showLabels,\n      barLabelFormat,\n      labelDistance,\n      labelClassName\n    } = this.props;\n    // invariant(hasOneOfTwo(xEnd, yEnd), `RangeBarChart expects a xEnd *or* yEnd prop, but not both.`);\n\n    return (\n      <g>\n        {data.map((d, i) => {\n          const [onMouseEnter, onMouseMove, onMouseLeave] = [\n            \"onMouseEnterBar\",\n            \"onMouseMoveBar\",\n            \"onMouseLeaveBar\"\n          ].map(eventName => {\n            // partially apply this bar's data point as 2nd callback argument\n            const callback = _.get(this.props, eventName);\n            return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n          });\n\n          const barProps = {\n            x: getValue(x, d, i),\n            y: getValue(y, d, i),\n            xEnd: horizontal ? getValue(xEnd, d, i) : undefined,\n            yEnd: horizontal ? undefined : getValue(yEnd, d, i),\n            xScale,\n            yScale,\n            key: `chart-bar-${i}`,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n            thickness: barThickness,\n            showLabel: showLabels,\n            labelFormat: barLabelFormat,\n            labelDistance,\n            labelClassName: getValue(labelClassName, d, i),\n            className: `rct-chart-bar ${getValue(barClassName, d, i) || \"\"}`,\n            style: getValue(barStyle, d, i)\n          };\n\n          return <Bar {...barProps} />;\n        })}\n      </g>\n    );\n  }\n}\n"],"file":"RangeBarChart.js"}