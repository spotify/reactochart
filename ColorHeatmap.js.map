{"version":3,"sources":["src/ColorHeatmap.js"],"names":["CustomPropTypes","interpolatorFromType","type","toLowerCase","makeColorScale","domain","colors","interpolator","isString","range","interpolate","ColorHeatmap","nextProps","nextState","shouldUpdate","props","data","xScale","yScale","value","x","xEnd","y","yEnd","rectStyle","rectClassName","valueAccessor","colorScale","valueDomain","length","times","scale","schemeCategory10","map","d","i","color","style","fill","className","key","xScaleType","yScaleType","Component","propTypes","array","isRequired","valueOrAccessor","func","string","oneOfType","object","defaultProps"],"mappings":"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","file":"ColorHeatmap.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport {\n  scaleLinear,\n  interpolateHcl,\n  interpolateHsl,\n  interpolateLab,\n  interpolateRgb\n} from \"d3\";\nimport invariant from \"invariant\";\nimport PropTypes from \"prop-types\";\n\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport {\n  makeAccessor2,\n  getValue,\n  domainFromData,\n  domainFromRangeData\n} from \"./utils/Data\";\nimport { dataTypeFromScaleType } from \"./utils/Scale\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\n\nimport RangeRect from \"./RangeRect\";\n\nfunction interpolatorFromType(type) {\n  switch (type.toLowerCase()) {\n    case \"hcl\":\n      return interpolateHcl;\n    case \"hsl\":\n      return interpolateHsl;\n    case \"lab\":\n      return interpolateLab;\n    case \"rgb\":\n      return interpolateRgb;\n    default:\n      return interpolateHsl;\n  }\n}\n\nfunction makeColorScale(domain, colors, interpolator) {\n  // invariant(domain.length === colors.length, 'ColorHeatmap makeColorScale: domain.length should equal colors.length');\n\n  if (_.isString(interpolator))\n    interpolator = interpolatorFromType(interpolator);\n\n  return scaleLinear()\n    .domain(domain)\n    .range(colors)\n    .interpolate(interpolator);\n}\n\nexport default class ColorHeatmap extends React.Component {\n  static propTypes = {\n    /**\n     * data array - should be 1D array of all grid values\n     * (if you have a 2D array, _.flatten it)\n     */\n    data: PropTypes.array.isRequired,\n    value: CustomPropTypes.valueOrAccessor,\n    x: CustomPropTypes.valueOrAccessor,\n    xEnd: CustomPropTypes.valueOrAccessor,\n    y: CustomPropTypes.valueOrAccessor,\n    yEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * a custom d3 color scale may be passed...\n     */\n    colorScale: PropTypes.func,\n    /**\n     * ...or else one will be constructed from colors, colorStops and interpolator\n     */\n    colors: PropTypes.array,\n    valueDomain: PropTypes.array,\n    interpolator: PropTypes.string,\n    rectStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    rectClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n  };\n  static defaultProps = {\n    interpolator: \"lab\",\n    rectStyle: {},\n    rectClassName: \"\"\n  };\n\n  static getDomain(props) {\n    const { xScaleType, yScaleType, data, x, xEnd, y, yEnd } = props;\n    return {\n      x: domainFromRangeData(\n        data,\n        makeAccessor2(x),\n        makeAccessor2(xEnd),\n        dataTypeFromScaleType(xScaleType)\n      ),\n      y: domainFromRangeData(\n        data,\n        makeAccessor2(y),\n        makeAccessor2(yEnd),\n        dataTypeFromScaleType(yScaleType)\n      )\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\n      \"colors\",\n      \"valueDomain\"\n    ]);\n    return shouldUpdate;\n  }\n\n  render() {\n    const {\n      data,\n      xScale,\n      yScale,\n      value,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      interpolator,\n      rectStyle,\n      rectClassName\n    } = this.props;\n    const valueAccessor = makeAccessor2(value);\n    let colorScale;\n\n    if (this.props.colorScale) {\n      colorScale = this.props.colorScale;\n    } else {\n      const valueDomain =\n        this.props.valueDomain || domainFromData(data, valueAccessor);\n      const colors =\n        this.props.colors ||\n        (valueDomain.length === 2\n          ? [\"#000000\", \"#ffffff\"]\n          : _.times(\n              valueDomain.length,\n              scale.schemeCategory10().domain(_.range(10))\n            ));\n      colorScale = makeColorScale(valueDomain, colors, interpolator);\n    }\n\n    return (\n      <g className=\"color-heatmap-chart\">\n        {data.map((d, i) => {\n          const color = colorScale(valueAccessor(d));\n          const style = { ...getValue(rectStyle, d, i), fill: color };\n          const className = `heatmap-rect ${getValue(rectClassName, d, i)}`;\n          const key = `heatmap-rect-${i}`;\n          return (\n            <RangeRect\n              x={getValue(x, d, i)}\n              xEnd={getValue(xEnd, d, i)}\n              y={getValue(y, d, i)}\n              yEnd={getValue(yEnd, d, i)}\n              {...{ xScale, yScale, style, className, key }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"]}