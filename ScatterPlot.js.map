{"version":3,"sources":["src/ScatterPlot.js"],"names":["CustomPropTypes","ScatterPlot","onMouseEnterPoint","e","d","props","onMouseMovePoint","onMouseLeavePoint","renderPoint","i","map","callback","eventName","isFunction","partial","onMouseEnter","onMouseMove","onMouseLeave","xScale","yScale","x","y","pointRadius","pointOffset","pointStyle","pointClassName","pointSymbol","className","style","symbolProps","key","isString","isNumber","type","isUndefined","r","cx","cy","assign","textAnchor","dominantBaseline","transform","cloneElement","nextProps","nextState","shouldUpdate","name","data","Component","propTypes","array","isRequired","valueOrAccessor","func","xScaleType","string","yScaleType","number","oneOfType","node","arrayOf","object","getter","defaultProps"],"mappings":"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","file":"ScatterPlot.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nimport { makeAccessor2, getValue } from \"./utils/Data\";\nimport { methodIfFuncProp } from \"./util.js\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\n\nexport default class ScatterPlot extends React.Component {\n  static propTypes = {\n    // the array of data objects\n    data: PropTypes.array.isRequired,\n    /**\n     * Accessor function for plot X values, called once per datum\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for plot Y values, called once per datum\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    xScaleType: PropTypes.string,\n    yScaleType: PropTypes.string,\n\n    // used with the default point symbol (circle), defines the circle radius\n    pointRadius: PropTypes.number,\n    // text or SVG node to use as custom point symbol, or function which returns text/SVG\n    pointSymbol: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n    // manual x and y offset applied to the point to center it, for custom point symbols which can't be auto-centered\n    pointOffset: PropTypes.arrayOf(PropTypes.number),\n    // inline styles for points\n    pointStyle: PropTypes.object,\n    pointClassName: CustomPropTypes.getter,\n\n    onMouseEnterPoint: PropTypes.func,\n    onMouseMovePoint: PropTypes.func,\n    onMouseLeavePoint: PropTypes.func\n  };\n  static defaultProps = {\n    pointRadius: 3,\n    pointSymbol: <circle />,\n    pointOffset: [0, 0],\n    pointStyle: {},\n    pointClassName: \"\"\n  };\n\n  // todo: implement getSpacing or getPadding static\n\n  onMouseEnterPoint = (e, d) => {\n    this.props.onMouseEnterPoint(e, d);\n  };\n  onMouseMovePoint = (e, d) => {\n    this.props.onMouseMovePoint(e, d);\n  };\n  onMouseLeavePoint = (e, d) => {\n    this.props.onMouseLeavePoint(e, d);\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\"pointStyle\"]);\n    return shouldUpdate;\n  }\n\n  render() {\n    return (\n      <g className={this.props.name}>{this.props.data.map(this.renderPoint)}</g>\n    );\n  }\n  renderPoint = (d, i) => {\n    const [onMouseEnter, onMouseMove, onMouseLeave] = [\n      \"onMouseEnterPoint\",\n      \"onMouseMovePoint\",\n      \"onMouseLeavePoint\"\n    ].map(eventName => {\n      // partially apply this bar's data point as 2nd callback argument\n      const callback = methodIfFuncProp(eventName, this.props, this);\n      return _.isFunction(callback) ? _.partial(callback, _, d) : null;\n    });\n    const {\n      xScale,\n      yScale,\n      x,\n      y,\n      pointRadius,\n      pointOffset,\n      pointStyle,\n      pointClassName\n    } = this.props;\n    let { pointSymbol } = this.props;\n    const className = `chart-scatterplot-point ${getValue(\n      pointClassName,\n      d,\n      i\n    )}`;\n    const style = getValue(pointStyle, d, i);\n    let symbolProps = {\n      className,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave,\n      key: `scatter-point-${i}`\n    };\n\n    // resolve symbol-generating functions into real symbols\n    if (_.isFunction(pointSymbol)) pointSymbol = pointSymbol(d, i);\n    // wrap string/number symbols in <text> container\n    if (_.isString(pointSymbol) || _.isNumber(pointSymbol))\n      pointSymbol = <text>{pointSymbol}</text>;\n    // use props.pointRadius for circle radius\n    if (pointSymbol.type === \"circle\" && _.isUndefined(pointSymbol.props.r))\n      symbolProps.r = pointRadius;\n\n    // x,y coords of center of symbol\n    const cx = xScale(getValue(x, d, i)) + pointOffset[0];\n    const cy = yScale(getValue(y, d, i)) + pointOffset[1];\n\n    // set positioning attributes based on symbol type\n    if (pointSymbol.type === \"circle\" || pointSymbol.type === \"ellipse\") {\n      _.assign(symbolProps, { cx, cy, style: pointStyle });\n    } else if (pointSymbol.type === \"text\") {\n      _.assign(symbolProps, {\n        x: cx,\n        y: cy,\n        style: { textAnchor: \"middle\", dominantBaseline: \"central\", ...style }\n      });\n    } else {\n      _.assign(symbolProps, {\n        x: cx,\n        y: cy,\n        style: { transform: \"translate(-50%, -50%)\", ...style }\n      });\n    }\n\n    return React.cloneElement(pointSymbol, symbolProps);\n  };\n}\n"]}