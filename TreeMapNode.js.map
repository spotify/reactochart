{"version":3,"sources":["src/TreeMapNode.js"],"names":["TreeMapNode","props","node","getLabel","nodeStyle","labelStyle","minLabelWidth","minLabelHeight","NodeLabelComponent","parentNames","depth","parent","x0","y0","x1","y1","parentName","_","get","nodeGroupClass","kebabCase","indexOf","className","style","position","width","height","top","left","transition","customStyle","isFunction","isObject","assign","handlers","reduce","eventName","handler","bind","propTypes","PropTypes","shape","object","children","array","value","number","x","y","dx","dy","oneOfType","func","CustomPropTypes","getter","defaultProps"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\n\nconst TreeMapNode = props => {\n  const {\n    node,\n    getLabel,\n    nodeStyle,\n    labelStyle,\n    minLabelWidth,\n    minLabelHeight,\n    NodeLabelComponent,\n    parentNames\n  } = props;\n  const { depth, parent, x0, y0, x1, y1 } = node;\n\n  var parentName = _.get(parent, \"data.name\");\n  const nodeGroupClass = parent\n    ? `node-group-${_.kebabCase(parentName)} node-group-i-${parentNames.indexOf(\n        parentName\n      )}`\n    : \"\";\n  const className = `rct-tree-map-node node-depth-${depth} ${nodeGroupClass}`;\n\n  let style = {\n    position: \"absolute\",\n    width: x1 - x0,\n    height: y1 - y0,\n    top: y0,\n    left: x0,\n    transition: \"all .2s\"\n  };\n  const customStyle = _.isFunction(nodeStyle)\n    ? nodeStyle(node)\n    : _.isObject(nodeStyle)\n      ? nodeStyle\n      : {};\n  _.assign(style, customStyle);\n\n  let handlers = [\n    \"onClick\",\n    \"onMouseEnter\",\n    \"onMouseLeave\",\n    \"onMouseMove\"\n  ].reduce((handlers, eventName) => {\n    const handler = props[`${eventName}Node`];\n    if (handler) handlers[eventName] = handler.bind(null, node);\n    return handlers;\n  }, {});\n\n  return (\n    <div {...{ className, style }} {...handlers}>\n      {x1 - x0 > minLabelWidth && y1 - y0 > minLabelHeight ? ( // show label if node is big enough\n        <NodeLabelComponent {...{ node, getLabel, labelStyle }} />\n      ) : null}\n    </div>\n  );\n};\n\nTreeMapNode.propTypes = {\n  node: PropTypes.shape({\n    parent: PropTypes.object,\n    children: PropTypes.array,\n    value: PropTypes.number,\n    depth: PropTypes.number,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    dx: PropTypes.number,\n    dy: PropTypes.number\n  }),\n  nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  minLabelWidth: PropTypes.number,\n  minLabelHeight: PropTypes.number,\n  getLabel: CustomPropTypes.getter,\n  labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  NodeLabelComponent: PropTypes.func\n};\n\nTreeMapNode.defaultProps = {\n  minLabelWidth: 0,\n  minLabelHeight: 0\n};\n\nexport default TreeMapNode;\n"],"file":"TreeMapNode.js"}