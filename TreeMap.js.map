{"version":3,"sources":["src/TreeMap.js"],"names":["TreeMap","React","Component","componentWillMount","data","props","_tree","getTree","_rootNode","getRootNode","_","cloneDeep","componentWillReceiveProps","newProps","width","height","sticky","JSON","stringify","render","nodeStyle","labelStyle","getLabel","minLabelWidth","minLabelHeight","onClickNode","onMouseEnterNode","onMouseLeaveNode","onMouseMoveNode","NodeComponent","NodeLabelComponent","nodes","initTreemap","style","position","parentNames","uniq","map","node","i","key","PropTypes","number","isRequired","object","getValue","CustomPropTypes","getter","getChildren","sort","func","padding","round","bool","ratio","oneOfType","TreeMapNode","TreeMapNodeLabel","options","tiling","isUndefined","treemapResquarify","tree","tile","size","paddingOuter","rootNode","treeRoot","sum","d","isFunction","isString","descendants"],"mappings":"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","sourcesContent":["import { hierarchy, treemap, treemapResquarify } from \"d3-hierarchy\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport { makeAccessor } from \"./utils/Data\";\nimport TreeMapNode from \"./TreeMapNode\";\nimport TreeMapNodeLabel from \"./TreeMapNodeLabel\";\n\n/**\n * `TreeMap` displays hierarchical data where a leaf node's rectangle has an area proportional to a specified dimension of the data.\n */\nclass TreeMap extends React.Component {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n\n    data: PropTypes.object.isRequired,\n    /**\n     * Key or accessor to retrieve value of data point\n     */\n    getValue: CustomPropTypes.getter,\n    /**\n     * Key or accessor to retrieve children of data point\n     */\n    getChildren: CustomPropTypes.getter,\n    /**\n     * Key or accessor to retrieve label for given Node\n     */\n    getLabel: CustomPropTypes.getter,\n\n    /**\n     * Function passed in to sort nodes\n     */\n    sort: PropTypes.func,\n    // options for d3 treemap layout - see d3 docs\n    /**\n     * See d3 docs for treemap - Adds outer and inner padding to tree\n     */\n    padding: PropTypes.number,\n    /**\n     * See d3 docs for treemap - Enables or disables rounding\n     */\n    round: PropTypes.bool,\n    /**\n     * If sticky, on data change the TreeMap will not force a recreation of the tree and animate data changes.\n     * Otherwise we recreate the tree given its new props\n     */\n    sticky: PropTypes.bool,\n    /**\n     * Sets the desired aspect ratio of the generated rectangles\n     */\n    ratio: PropTypes.number,\n\n    /**\n     * Inline style object applied to each Node,\n     * or accessor function which returns a style object\n     */\n    nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    /**\n     * Inline style object applied to each Label,\n     * or accessor function which returns a style object\n     */\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number,\n\n    /**\n     * `onClick` event handler callback, called when user clicks a NodeComponent.\n     */\n    onClickNode: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a NodeComponent.\n     */\n    onMouseEnterNode: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a NodeComponent.\n     */\n    onMouseLeaveNode: PropTypes.func,\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a NodeComponent.\n     */\n    onMouseMoveNode: PropTypes.func,\n\n    /**\n     * Optional treemap node, otherwise we default to our TreeMapNode component\n     */\n    NodeComponent: PropTypes.func,\n    /**\n     * Optional treemap node label, otherwise we default to our TreeMapNodeLabel component\n     */\n    NodeLabelComponent: PropTypes.func\n  };\n  static defaultProps = {\n    getValue: \"value\",\n    getChildren: \"children\",\n    getLabel: \"name\",\n    minLabelWidth: 0,\n    minLabelHeight: 0,\n    NodeComponent: TreeMapNode,\n    NodeLabelComponent: TreeMapNodeLabel\n  };\n  componentWillMount() {\n    const { data } = this.props;\n    // initialize the layout function\n    this._tree = getTree(this.props);\n    // clone the data because d3 mutates it!\n    this._rootNode = getRootNode(_.cloneDeep(data), this.props);\n  }\n  componentWillReceiveProps(newProps) {\n    const { width, height, data, sticky } = this.props;\n\n    // if height, width, or the data changes, or if the treemap is not sticky, re-initialize the layout function\n    // todo reevaluate this logic\n    if (\n      !sticky ||\n      width != newProps.width ||\n      height != newProps.height ||\n      JSON.stringify(data) != JSON.stringify(newProps.data)\n    ) {\n      this._tree = getTree(newProps);\n      this._rootNode = getRootNode(_.cloneDeep(newProps.data), this.props);\n    }\n  }\n  render() {\n    const {\n      width,\n      height,\n      nodeStyle,\n      labelStyle,\n      getLabel,\n      minLabelWidth,\n      minLabelHeight,\n      onClickNode,\n      onMouseEnterNode,\n      onMouseLeaveNode,\n      onMouseMoveNode,\n      NodeComponent,\n      NodeLabelComponent\n    } = this.props;\n\n    const nodes = initTreemap(this._rootNode, this._tree, this.props);\n\n    const style = { position: \"relative\", width, height };\n\n    const parentNames = _.uniq(_.map(nodes, \"parent.data.name\"));\n\n    return (\n      <div className=\"rct-tree-map\" {...{ style }}>\n        {nodes.map((node, i) => (\n          <NodeComponent\n            {...{\n              node,\n              nodeStyle,\n              minLabelWidth,\n              minLabelHeight,\n              labelStyle,\n              getLabel,\n              parentNames,\n              NodeLabelComponent,\n              onClickNode,\n              onMouseEnterNode,\n              onMouseLeaveNode,\n              onMouseMoveNode,\n              key: `node-${i}`\n            }}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction getRootNode(data, options) {\n  const { getChildren } = options;\n  return hierarchy(data, makeAccessor(getChildren));\n}\n\nfunction getTree(options) {\n  const { width, height, ratio, round, padding } = options;\n  const tiling = !_.isUndefined(ratio)\n    ? treemapResquarify.ratio(ratio)\n    : treemapResquarify;\n  const tree = treemap()\n    .tile(tiling)\n    .size([width, height]);\n  if (!_.isUndefined(padding)) tree.paddingOuter(padding);\n  if (!_.isUndefined(round)) tree.round(round);\n  return tree;\n}\n\nfunction initTreemap(rootNode, tree, options) {\n  // create a d3 treemap layout function,\n  // and configure it with the given options\n  const { getValue, sort } = options;\n  const treeRoot = rootNode.sum(d => {\n    if (_.isFunction(getValue)) return getValue(d);\n    else if (_.isString(getValue)) return d[getValue];\n    else return 0;\n  });\n  return tree(sort ? treeRoot.sort(sort) : treeRoot).descendants();\n}\n\nexport default TreeMap;\n"],"file":"TreeMap.js"}