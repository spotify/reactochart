{"version":3,"sources":["src/TreeMap.js"],"names":["CustomPropTypes","TreeMapNode","props","node","getLabel","nodeStyle","labelStyle","minLabelWidth","minLabelHeight","NodeLabelComponent","parentNames","depth","parent","x0","y0","x1","y1","parentName","get","nodeGroupClass","kebabCase","indexOf","className","style","position","width","height","top","left","transition","customStyle","isFunction","isObject","assign","handlers","reduce","eventName","handler","bind","Component","propTypes","shape","object","children","array","value","number","x","y","dx","dy","oneOfType","func","getter","defaultProps","TreeMapNodeLabel","TreeMap","data","_tree","getTree","_rootNode","getRootNode","cloneDeep","newProps","sticky","JSON","stringify","onClickNode","onMouseEnterNode","onMouseLeaveNode","onMouseMoveNode","NodeComponent","getValue","nodes","initTreemap","uniq","map","i","key","isRequired","getChildren","sort","padding","round","bool","mode","string","ratio","options","tiling","isUndefined","tree","tile","size","paddingOuter","rootNode","treeRoot","sum","d","isString","descendants"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;AACA;;IAAYA,e;;;;;;;;;;;;IAENC,W;;;;;;;;;;;6BAyBK;AAAA;;AAAA,mBAUH,KAAKC,KAVF;AAAA,UAELC,IAFK,UAELA,IAFK;AAAA,UAGLC,QAHK,UAGLA,QAHK;AAAA,UAILC,SAJK,UAILA,SAJK;AAAA,UAKLC,UALK,UAKLA,UALK;AAAA,UAMLC,aANK,UAMLA,aANK;AAAA,UAOLC,cAPK,UAOLA,cAPK;AAAA,UAQLC,kBARK,UAQLA,kBARK;AAAA,UASLC,WATK,UASLA,WATK;AAAA,UAWCC,KAXD,GAWmCR,IAXnC,CAWCQ,KAXD;AAAA,UAWQC,MAXR,GAWmCT,IAXnC,CAWQS,MAXR;AAAA,UAWgBC,EAXhB,GAWmCV,IAXnC,CAWgBU,EAXhB;AAAA,UAWoBC,EAXpB,GAWmCX,IAXnC,CAWoBW,EAXpB;AAAA,UAWwBC,EAXxB,GAWmCZ,IAXnC,CAWwBY,EAXxB;AAAA,UAW4BC,EAX5B,GAWmCb,IAXnC,CAW4Ba,EAX5B;;;AAaP,UAAIC,aAAa,iBAAEC,GAAF,CAAMN,MAAN,EAAc,WAAd,CAAjB;AACA,UAAMO,iBAAiBP,yBACL,iBAAEQ,SAAF,CACZH,UADY,CADK,sBAGDP,YAAYW,OAAZ,CAAoBJ,UAApB,CAHC,GAInB,EAJJ;AAKA,UAAMK,0CAAwCX,KAAxC,SAAiDQ,cAAvD;;AAEA,UAAII,QAAQ;AACVC,kBAAU,UADA;AAEVC,eAAOV,KAAKF,EAFF;AAGVa,gBAAQV,KAAKF,EAHH;AAIVa,aAAKb,EAJK;AAKVc,cAAMf,EALI;AAMVgB,oBAAY;AANF,OAAZ;AAQA,UAAMC,cAAc,iBAAEC,UAAF,CAAa1B,SAAb,IAChBA,UAAUF,IAAV,CADgB,GAEhB,iBAAE6B,QAAF,CAAW3B,SAAX,IACEA,SADF,GAEE,EAJN;AAKA,uBAAE4B,MAAF,CAASV,KAAT,EAAgBO,WAAhB;;AAEA,UAAII,WAAW,CACb,SADa,EAEb,cAFa,EAGb,cAHa,EAIb,aAJa,EAKbC,MALa,CAKN,UAACD,QAAD,EAAWE,SAAX,EAAyB;AAChC,YAAMC,UAAU,OAAKnC,KAAL,CAAckC,SAAd,UAAhB;AACA,YAAIC,OAAJ,EAAaH,SAASE,SAAT,IAAsBC,QAAQC,IAAR,CAAa,IAAb,EAAmBnC,IAAnB,CAAtB;AACb,eAAO+B,QAAP;AACD,OATc,EASZ,EATY,CAAf;;AAWA,aACE;AAAA;AAAA,iBAAS,EAAEZ,oBAAF,EAAaC,YAAb,EAAT,EAAmCW,QAAnC;AACGnB,aAAKF,EAAL,GAAUN,aAAV,IAA2BS,KAAKF,EAAL,GAAUN,cAArC,GAAwD;AACvD,sCAAC,kBAAD,EAAwB,EAAEL,UAAF,EAAQC,kBAAR,EAAkBE,sBAAlB,EAAxB,CADD,GAEG;AAHN,OADF;AAOD;;;;EA/EuB,gBAAMiC,S;;AAA1BtC,W,CACGuC,S,GAAY;AACjBrC,QAAM,oBAAUsC,KAAV,CAAgB;AACpB7B,YAAQ,oBAAU8B,MADE;AAEpBC,cAAU,oBAAUC,KAFA;AAGpBC,WAAO,oBAAUC,MAHG;AAIpBnC,WAAO,oBAAUmC,MAJG;AAKpBC,OAAG,oBAAUD,MALO;AAMpBE,OAAG,oBAAUF,MANO;AAOpBG,QAAI,oBAAUH,MAPM;AAQpBI,QAAI,oBAAUJ;AARM,GAAhB,CADW;AAWjBzC,aAAW,oBAAU8C,SAAV,CAAoB,CAAC,oBAAUC,IAAX,EAAiB,oBAAUV,MAA3B,CAApB,CAXM;AAYjBnC,iBAAe,oBAAUuC,MAZR;AAajBtC,kBAAgB,oBAAUsC,MAbT;;AAejB1C,YAAUJ,gBAAgBqD,MAfT;AAgBjB/C,cAAY,oBAAU6C,SAAV,CAAoB,CAAC,oBAAUC,IAAX,EAAiB,oBAAUV,MAA3B,CAApB,CAhBK;AAiBjBjC,sBAAoB,oBAAU2C;AAjBb,C;AADfnD,W,CAoBGqD,Y,GAAe;AACpB/C,iBAAe,CADK;AAEpBC,kBAAgB;AAFI,C;;IA8DlB+C,gB;;;;;;;;;;;6BASK;AAAA,oBACgC,KAAKrD,KADrC;AAAA,UACCC,IADD,WACCA,IADD;AAAA,UACOC,QADP,WACOA,QADP;AAAA,UACiBE,UADjB,WACiBA,UADjB;AAAA,UAECS,EAFD,GAEYZ,IAFZ,CAECY,EAFD;AAAA,UAEKF,EAFL,GAEYV,IAFZ,CAEKU,EAFL;;AAGP,UAAIU,QAAQ,EAAEE,OAAOV,KAAKF,EAAd,EAAZ;AACA,UAAMiB,cAAc,iBAAEC,UAAF,CAAazB,UAAb,IAChBA,WAAWH,IAAX,CADgB,GAEhB,iBAAE6B,QAAF,CAAW1B,UAAX,IACEA,UADF,GAEE,EAJN;AAKA,uBAAE2B,MAAF,CAASV,KAAT,EAAgBO,WAAhB;;AAEA,aACE;AAAA;AAAA,mBAAK,WAAU,YAAf,IAAgC,EAAEP,YAAF,EAAhC;AACG,gCAAanB,QAAb,EAAuBD,IAAvB;AADH,OADF;AAKD;;;;EAzB4B,gBAAMoC,S;;AAA/BgB,gB,CACGf,S,GAAY;AACjBrC,QAAM,oBAAUuC,MADC;AAEjBtC,YAAUJ,gBAAgBqD,MAFT;AAGjB/C,cAAY,oBAAU6C,SAAV,CAAoB,CAAC,oBAAUC,IAAX,EAAiB,oBAAUV,MAA3B,CAApB,CAHK;AAIjBnC,iBAAe,oBAAUuC,MAJR;AAKjBtC,kBAAgB,oBAAUsC;AALT,C;;IA2BfU,O;;;;;;;;;;;yCAwCiB;AAAA,UACXC,IADW,GACF,KAAKvD,KADH,CACXuD,IADW;AAEnB;;AACA,WAAKC,KAAL,GAAaC,QAAQ,KAAKzD,KAAb,CAAb;AACA;AACA,WAAK0D,SAAL,GAAiBC,YAAY,iBAAEC,SAAF,CAAYL,IAAZ,CAAZ,EAA+B,KAAKvD,KAApC,CAAjB;AACD;;;8CACyB6D,Q,EAAU;AAAA,oBACM,KAAK7D,KADX;AAAA,UAC1BuB,KAD0B,WAC1BA,KAD0B;AAAA,UACnBC,MADmB,WACnBA,MADmB;AAAA,UACX+B,IADW,WACXA,IADW;AAAA,UACLO,MADK,WACLA,MADK;;AAGlC;;AACA,UACE,CAACA,MAAD,IACAvC,SAASsC,SAAStC,KADlB,IAEAC,UAAUqC,SAASrC,MAFnB,IAGAuC,KAAKC,SAAL,CAAeT,IAAf,KAAwBQ,KAAKC,SAAL,CAAeH,SAASN,IAAxB,CAJ1B,EAKE;AACA,aAAKC,KAAL,GAAaC,QAAQI,QAAR,CAAb;AACA,aAAKH,SAAL,GAAiBC,YAAY,iBAAEC,SAAF,CAAYC,SAASN,IAArB,CAAZ,EAAwC,KAAKvD,KAA7C,CAAjB;AACD;AACF;;;6BACQ;AAAA,oBAgBH,KAAKA,KAhBF;AAAA,UAELuB,KAFK,WAELA,KAFK;AAAA,UAGLC,MAHK,WAGLA,MAHK;AAAA,UAILrB,SAJK,WAILA,SAJK;AAAA,UAKLC,UALK,WAKLA,UALK;AAAA,UAMLF,QANK,WAMLA,QANK;AAAA,UAOLG,aAPK,WAOLA,aAPK;AAAA,UAQLC,cARK,WAQLA,cARK;AAAA,UASL2D,WATK,WASLA,WATK;AAAA,UAULC,gBAVK,WAULA,gBAVK;AAAA,UAWLC,gBAXK,WAWLA,gBAXK;AAAA,UAYLC,eAZK,WAYLA,eAZK;AAAA,UAaLC,aAbK,WAaLA,aAbK;AAAA,UAcL9D,kBAdK,WAcLA,kBAdK;AAAA,UAeL+D,QAfK,WAeLA,QAfK;;;AAkBP,UAAMC,QAAQC,YAAY,KAAKd,SAAjB,EAA4B,KAAKF,KAAjC,EAAwC,KAAKxD,KAA7C,CAAd;;AAEA,UAAMqB,QAAQ,EAAEC,UAAU,UAAZ,EAAwBC,YAAxB,EAA+BC,cAA/B,EAAd;;AAEA,UAAMhB,cAAc,iBAAEiE,IAAF,CAAO,iBAAEC,GAAF,CAAMH,KAAN,EAAa,kBAAb,CAAP,CAApB;;AAEA,aACE;AAAA;AAAA,mBAAK,WAAU,UAAf,IAA8B,EAAElD,YAAF,EAA9B;AACGkD,cAAMG,GAAN,CAAU,UAACzE,IAAD,EAAO0E,CAAP;AAAA,iBACT,8BAAC,aAAD,EACM;AACF1E,sBADE;AAEFE,gCAFE;AAGFE,wCAHE;AAIFC,0CAJE;AAKFF,kCALE;AAMFF,8BANE;AAOFM,oCAPE;AAQFD,kDARE;AASF0D,oCATE;AAUFC,8CAVE;AAWFC,8CAXE;AAYFC,4CAZE;AAaFQ,2BAAaD;AAbX,WADN,CADS;AAAA,SAAV;AADH,OADF;AAuBD;;;;EA5GmB,gBAAMtC,S;;AAAtBiB,O,CACGhB,S,GAAY;AACjBf,SAAO,oBAAUqB,MAAV,CAAiBiC,UADP;AAEjBrD,UAAQ,oBAAUoB,MAAV,CAAiBiC,UAFR;;AAIjBtB,QAAM,oBAAUf,MAAV,CAAiBqC,UAJN;AAKjBP,YAAUxE,gBAAgBqD,MALT;AAMjB2B,eAAahF,gBAAgBqD,MANZ;AAOjBjD,YAAUJ,gBAAgBqD,MAPT;;AASjB;AACA4B,QAAM,oBAAU7B,IAVC;AAWjB8B,WAAS,oBAAUpC,MAXF;AAYjBqC,SAAO,oBAAUC,IAZA;AAajBpB,UAAQ,oBAAUoB,IAbD;AAcjBC,QAAM,oBAAUC,MAdC;AAejBC,SAAO,oBAAUzC,MAfA;;AAiBjBzC,aAAW,oBAAU8C,SAAV,CAAoB,CAAC,oBAAUC,IAAX,EAAiB,oBAAUV,MAA3B,CAApB,CAjBM;AAkBjBpC,cAAY,oBAAU6C,SAAV,CAAoB,CAAC,oBAAUC,IAAX,EAAiB,oBAAUV,MAA3B,CAApB,CAlBK;AAmBjBnC,iBAAe,oBAAUuC,MAnBR;AAoBjBtC,kBAAgB,oBAAUsC,MApBT;;AAsBjBqB,eAAa,oBAAUf,IAtBN;AAuBjBgB,oBAAkB,oBAAUhB,IAvBX;AAwBjBiB,oBAAkB,oBAAUjB,IAxBX;AAyBjBkB,mBAAiB,oBAAUlB,IAzBV;;AA2BjBmB,iBAAe,oBAAUnB,IA3BR;AA4BjB3C,sBAAoB,oBAAU2C;AA5Bb,C;AADfI,O,CA+BGF,Y,GAAe;AACpBkB,YAAU,OADU;AAEpBQ,eAAa,UAFO;AAGpB5E,YAAU,MAHU;AAIpBG,iBAAe,CAJK;AAKpBC,kBAAgB,CALI;AAMpB+D,iBAAetE,WANK;AAOpBQ,sBAAoB8C;AAPA,C;;;AAgFxB,SAASM,WAAT,CAAqBJ,IAArB,EAA2B+B,OAA3B,EAAoC;AAAA,MAC1BR,WAD0B,GACVQ,OADU,CAC1BR,WAD0B;;AAElC,SAAO,4BAAUvB,IAAV,EAAgB,wBAAauB,WAAb,CAAhB,CAAP;AACD;;AAED,SAASrB,OAAT,CAAiB6B,OAAjB,EAA0B;AAAA,MAChB/D,KADgB,GACyB+D,OADzB,CAChB/D,KADgB;AAAA,MACTC,MADS,GACyB8D,OADzB,CACT9D,MADS;AAAA,MACD6D,KADC,GACyBC,OADzB,CACDD,KADC;AAAA,MACMJ,KADN,GACyBK,OADzB,CACML,KADN;AAAA,MACaD,OADb,GACyBM,OADzB,CACaN,OADb;;AAExB,MAAMO,SAAS,CAAC,iBAAEC,WAAF,CAAcH,KAAd,CAAD,GACX,+BAAkBA,KAAlB,CAAwBA,KAAxB,CADW,iCAAf;AAGA,MAAMI,OAAO,4BACVC,IADU,CACLH,MADK,EAEVI,IAFU,CAEL,CAACpE,KAAD,EAAQC,MAAR,CAFK,CAAb;AAGA,MAAI,CAAC,iBAAEgE,WAAF,CAAcR,OAAd,CAAL,EAA6BS,KAAKG,YAAL,CAAkBZ,OAAlB;AAC7B,MAAI,CAAC,iBAAEQ,WAAF,CAAcP,KAAd,CAAL,EAA2BQ,KAAKR,KAAL,CAAWA,KAAX;AAC3B,SAAOQ,IAAP;AACD;;AAED,SAASjB,WAAT,CAAqBqB,QAArB,EAA+BJ,IAA/B,EAAqCH,OAArC,EAA8C;AAC5C;AACA;AAF4C,MAGpChB,QAHoC,GAGjBgB,OAHiB,CAGpChB,QAHoC;AAAA,MAG1BS,IAH0B,GAGjBO,OAHiB,CAG1BP,IAH0B;;AAI5C,MAAMe,WAAWD,SAASE,GAAT,CAAa,aAAK;AACjC,QAAI,iBAAElE,UAAF,CAAayC,QAAb,CAAJ,EAA4B,OAAOA,SAAS0B,CAAT,CAAP,CAA5B,KACK,IAAI,iBAAEC,QAAF,CAAW3B,QAAX,CAAJ,EAA0B,OAAO0B,EAAE1B,QAAF,CAAP,CAA1B,KACA,OAAO,CAAP;AACN,GAJgB,CAAjB;AAKA,SAAOmB,KAAKV,OAAOe,SAASf,IAAT,CAAcA,IAAd,CAAP,GAA6Be,QAAlC,EAA4CI,WAA5C,EAAP;AACD;;kBAEc5C,O","file":"TreeMap.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport { hierarchy, treemap, treemapResquarify } from \"d3-hierarchy\";\n\nimport { makeAccessor } from \"./utils/Data\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\n\nclass TreeMapNode extends React.Component {\n  static propTypes = {\n    node: PropTypes.shape({\n      parent: PropTypes.object,\n      children: PropTypes.array,\n      value: PropTypes.number,\n      depth: PropTypes.number,\n      x: PropTypes.number,\n      y: PropTypes.number,\n      dx: PropTypes.number,\n      dy: PropTypes.number\n    }),\n    nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number,\n\n    getLabel: CustomPropTypes.getter,\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    NodeLabelComponent: PropTypes.func\n  };\n  static defaultProps = {\n    minLabelWidth: 0,\n    minLabelHeight: 0\n  };\n\n  render() {\n    const {\n      node,\n      getLabel,\n      nodeStyle,\n      labelStyle,\n      minLabelWidth,\n      minLabelHeight,\n      NodeLabelComponent,\n      parentNames\n    } = this.props;\n    const { depth, parent, x0, y0, x1, y1 } = node;\n\n    var parentName = _.get(parent, \"data.name\");\n    const nodeGroupClass = parent\n      ? `node-group-${_.kebabCase(\n          parentName\n        )} node-group-i-${parentNames.indexOf(parentName)}`\n      : \"\";\n    const className = `tree-map-node node-depth-${depth} ${nodeGroupClass}`;\n\n    let style = {\n      position: \"absolute\",\n      width: x1 - x0,\n      height: y1 - y0,\n      top: y0,\n      left: x0,\n      transition: \"all .2s\"\n    };\n    const customStyle = _.isFunction(nodeStyle)\n      ? nodeStyle(node)\n      : _.isObject(nodeStyle)\n        ? nodeStyle\n        : {};\n    _.assign(style, customStyle);\n\n    let handlers = [\n      \"onClick\",\n      \"onMouseEnter\",\n      \"onMouseLeave\",\n      \"onMouseMove\"\n    ].reduce((handlers, eventName) => {\n      const handler = this.props[`${eventName}Node`];\n      if (handler) handlers[eventName] = handler.bind(null, node);\n      return handlers;\n    }, {});\n\n    return (\n      <div {...{ className, style }} {...handlers}>\n        {x1 - x0 > minLabelWidth && y1 - y0 > minLabelHeight ? ( // show label if node is big enough\n          <NodeLabelComponent {...{ node, getLabel, labelStyle }} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nclass TreeMapNodeLabel extends React.Component {\n  static propTypes = {\n    node: PropTypes.object,\n    getLabel: CustomPropTypes.getter,\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number\n  };\n\n  render() {\n    const { node, getLabel, labelStyle } = this.props;\n    const { x1, x0 } = node;\n    let style = { width: x1 - x0 };\n    const customStyle = _.isFunction(labelStyle)\n      ? labelStyle(node)\n      : _.isObject(labelStyle)\n        ? labelStyle\n        : {};\n    _.assign(style, customStyle);\n\n    return (\n      <div className=\"node-label\" {...{ style }}>\n        {makeAccessor(getLabel)(node)}\n      </div>\n    );\n  }\n}\n\nclass TreeMap extends React.Component {\n  static propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n\n    data: PropTypes.object.isRequired,\n    getValue: CustomPropTypes.getter,\n    getChildren: CustomPropTypes.getter,\n    getLabel: CustomPropTypes.getter,\n\n    // options for d3 treemap layout - see d3 docs\n    sort: PropTypes.func,\n    padding: PropTypes.number,\n    round: PropTypes.bool,\n    sticky: PropTypes.bool,\n    mode: PropTypes.string,\n    ratio: PropTypes.number,\n\n    nodeStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    minLabelWidth: PropTypes.number,\n    minLabelHeight: PropTypes.number,\n\n    onClickNode: PropTypes.func,\n    onMouseEnterNode: PropTypes.func,\n    onMouseLeaveNode: PropTypes.func,\n    onMouseMoveNode: PropTypes.func,\n\n    NodeComponent: PropTypes.func,\n    NodeLabelComponent: PropTypes.func\n  };\n  static defaultProps = {\n    getValue: \"value\",\n    getChildren: \"children\",\n    getLabel: \"name\",\n    minLabelWidth: 0,\n    minLabelHeight: 0,\n    NodeComponent: TreeMapNode,\n    NodeLabelComponent: TreeMapNodeLabel\n  };\n  componentWillMount() {\n    const { data } = this.props;\n    // initialize the layout function\n    this._tree = getTree(this.props);\n    // clone the data because d3 mutates it!\n    this._rootNode = getRootNode(_.cloneDeep(data), this.props);\n  }\n  componentWillReceiveProps(newProps) {\n    const { width, height, data, sticky } = this.props;\n\n    // if height, width, or the data changes, or if the treemap is not sticky, re-initialize the layout function\n    if (\n      !sticky ||\n      width != newProps.width ||\n      height != newProps.height ||\n      JSON.stringify(data) != JSON.stringify(newProps.data)\n    ) {\n      this._tree = getTree(newProps);\n      this._rootNode = getRootNode(_.cloneDeep(newProps.data), this.props);\n    }\n  }\n  render() {\n    const {\n      width,\n      height,\n      nodeStyle,\n      labelStyle,\n      getLabel,\n      minLabelWidth,\n      minLabelHeight,\n      onClickNode,\n      onMouseEnterNode,\n      onMouseLeaveNode,\n      onMouseMoveNode,\n      NodeComponent,\n      NodeLabelComponent,\n      getValue\n    } = this.props;\n\n    const nodes = initTreemap(this._rootNode, this._tree, this.props);\n\n    const style = { position: \"relative\", width, height };\n\n    const parentNames = _.uniq(_.map(nodes, \"parent.data.name\"));\n\n    return (\n      <div className=\"tree-map\" {...{ style }}>\n        {nodes.map((node, i) => (\n          <NodeComponent\n            {...{\n              node,\n              nodeStyle,\n              minLabelWidth,\n              minLabelHeight,\n              labelStyle,\n              getLabel,\n              parentNames,\n              NodeLabelComponent,\n              onClickNode,\n              onMouseEnterNode,\n              onMouseLeaveNode,\n              onMouseMoveNode,\n              key: `node-${i}`\n            }}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction getRootNode(data, options) {\n  const { getChildren } = options;\n  return hierarchy(data, makeAccessor(getChildren));\n}\n\nfunction getTree(options) {\n  const { width, height, ratio, round, padding } = options;\n  const tiling = !_.isUndefined(ratio)\n    ? treemapResquarify.ratio(ratio)\n    : treemapResquarify;\n  const tree = treemap()\n    .tile(tiling)\n    .size([width, height]);\n  if (!_.isUndefined(padding)) tree.paddingOuter(padding);\n  if (!_.isUndefined(round)) tree.round(round);\n  return tree;\n}\n\nfunction initTreemap(rootNode, tree, options) {\n  // create a d3 treemap layout function,\n  // and configure it with the given options\n  const { getValue, sort } = options;\n  const treeRoot = rootNode.sum(d => {\n    if (_.isFunction(getValue)) return getValue(d);\n    else if (_.isString(getValue)) return d[getValue];\n    else return 0;\n  });\n  return tree(sort ? treeRoot.sort(sort) : treeRoot).descendants();\n}\n\nexport default TreeMap;\n"]}