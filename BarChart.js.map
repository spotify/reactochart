{"version":3,"sources":["src/BarChart.js"],"names":["CustomPropTypes","makeRangeBarChartProps","barChartProps","horizontal","x","y","xEnd","undefined","yEnd","BarChart","nextProps","nextState","shouldUpdate","props","rangeBarChartProps","getDomain","getSpacing","Component","propTypes","data","array","valueOrAccessor","xScale","func","yScale","bool","barThickness","number","barStyle","oneOfType","object","barClassName","string","onMouseMoveBar","onMouseEnterBar","onMouseLeaveBar","defaultProps"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,e;;AACZ;;;;;;;;;;;;;;AAEA,SAASC,sBAAT,CAAgCC,aAAhC,EAA+C;AAC7C;AACA;AAF6C,MAGrCC,UAHqC,GAGhBD,aAHgB,CAGrCC,UAHqC;AAAA,MAGzBC,CAHyB,GAGhBF,aAHgB,CAGzBE,CAHyB;AAAA,MAGtBC,CAHsB,GAGhBH,aAHgB,CAGtBG,CAHsB;;;AAK7C,sBACKH,aADL;AAEEE,OAAGD,aAAa,CAAb,GAAiBC,CAFtB;AAGEC,OAAGF,aAAaE,CAAb,GAAiB,CAHtB;AAIEC,UAAMH,aAAaC,CAAb,GAAiBG,SAJzB;AAKEC,UAAML,aAAaI,SAAb,GAAyBF;AALjC;AAOD;;AAED;;;;;;;;;;IAUqBI,Q;;;;;;;;;;;0CAmEGC,S,EAAWC,S,EAAW;AAC1C,UAAMC,eAAe,CAAC,4BAAa,KAAKC,KAAlB,EAAyBH,SAAzB,EAAoC,CAAC,UAAD,CAApC,CAAtB;AACA,aAAOE,YAAP;AACD;;;6BAEQ;AACP;;AAEA,UAAME,qBAAqBb,uBAAuB,KAAKY,KAA5B,CAA3B;;AAEA,aAAO,uDAAmBC,kBAAnB,CAAP;AACD;;;;;AAnBD;8BACiBD,K,EAAO;AACtB,aAAO,wBAAcE,SAAd,CAAwBd,uBAAuBY,KAAvB,CAAxB,CAAP;AACD;;;+BACiBA,K,EAAO;AACvB,aAAO,wBAAcG,UAAd,CAAyBf,uBAAuBY,KAAvB,CAAzB,CAAP;AACD;;;;EAjEmC,gBAAMI,S;;AAAvBR,Q,CACZS,S,GAAY;AACjB;;;AAGAC,QAAM,oBAAUC,KAJC;;AAMjBhB,KAAGJ,gBAAgBqB,eANF;AAOjBhB,KAAGL,gBAAgBqB,eAPF;AAQjB;;;AAGAC,UAAQ,oBAAUC,IAXD;AAYjB;;;AAGAC,UAAQ,oBAAUD,IAfD;AAgBjB;;;;AAIApB,cAAY,oBAAUsB,IApBL;;AAsBjB;;;AAGAC,gBAAc,oBAAUC,MAzBP;AA0BjB;;;;AAIAC,YAAU,oBAAUC,SAAV,CAAoB,CAAC,oBAAUC,MAAX,EAAmB,oBAAUP,IAA7B,CAApB,CA9BO;AA+BjB;;;;AAIAQ,gBAAc,oBAAUF,SAAV,CAAoB,CAAC,oBAAUG,MAAX,EAAmB,oBAAUT,IAA7B,CAApB,CAnCG;;AAqCjB;;;AAGAU,kBAAgB,oBAAUV,IAxCT;AAyCjB;;;AAGAW,mBAAiB,oBAAUX,IA5CV;AA6CjB;;;AAGAY,mBAAiB,oBAAUZ;AAhDV,C;AADAd,Q,CAmDZ2B,Y,GAAe;AACpBjB,QAAM,EADc;AAEpBhB,cAAY,KAFQ;AAGpBuB,gBAAc,CAHM;AAIpBK,gBAAc,EAJM;AAKpBH,YAAU;AALU,C;kBAnDHnB,Q","file":"BarChart.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"invariant\";\nimport RangeBarChart from \"./RangeBarChart\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\n\nfunction makeRangeBarChartProps(barChartProps) {\n  // this component is a simple wrapper around RangeBarChart,\n  // passing accessors to make range bars which span from zero to the data value\n  const { horizontal, x, y } = barChartProps;\n\n  return {\n    ...barChartProps,\n    x: horizontal ? 0 : x,\n    y: horizontal ? y : 0,\n    xEnd: horizontal ? x : undefined,\n    yEnd: horizontal ? undefined : y\n  };\n}\n\n/**\n * BarChart represents a basic \"Value/Value\" bar chart,\n * where each bar represents a single independent variable value and a single dependent value,\n * with bars that are centered horizontally on x-value and extend from 0 to y-value,\n * (or centered vertically on their y-value and extend from 0 to the x-value, in the case of horizontal chart variant)\n * eg. http://www.snapsu rveys.com/wp-content/uploads/2012/10/bar_2d8.png\n *\n * For other bar chart types, see RangeBarChart and AreaBarChart\n */\n\nexport default class BarChart extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data to be plotted. One bar will be rendered per datum in the array.\n     */\n    data: PropTypes.array,\n\n    x: CustomPropTypes.valueOrAccessor,\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * Boolean which determines whether the chart will use horizontal or vertical bars.\n     * When `true`, bars will be horizontal, ie. the X-axis will be treated as the dependent axis.\n     */\n    horizontal: PropTypes.bool,\n\n    /**\n     * Thickness (in pixels) of each bar (ie. bar height if `horizontal` is `true`, otherwise bar width).\n     */\n    barThickness: PropTypes.number,\n    /**\n     * Inline style object to be applied to each bar,\n     * or accessor function which returns a style object;\n     */\n    barStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * Class attribute to be applied to each bar.\n     * or accessor function which returns a class;\n     */\n    barClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within a bar.\n     */\n    onMouseMoveBar: PropTypes.func,\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters a bar.\n     */\n    onMouseEnterBar: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves a bar.\n     */\n    onMouseLeaveBar: PropTypes.func\n  };\n  static defaultProps = {\n    data: [],\n    horizontal: false,\n    barThickness: 8,\n    barClassName: \"\",\n    barStyle: {}\n  };\n\n  // gets data domain of independent variable\n  static getDomain(props) {\n    return RangeBarChart.getDomain(makeRangeBarChartProps(props));\n  }\n  static getSpacing(props) {\n    return RangeBarChart.getSpacing(makeRangeBarChartProps(props));\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\"barStyle\"]);\n    return shouldUpdate;\n  }\n\n  render() {\n    // todo: throw an error if dependent axis is not a number axis\n\n    const rangeBarChartProps = makeRangeBarChartProps(this.props);\n\n    return <RangeBarChart {...rangeBarChartProps} />;\n  }\n}\n"]}