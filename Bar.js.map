{"version":3,"sources":["src/Bar.js"],"names":["Bar","props","xScale","yScale","x","xEnd","y","yEnd","thickness","style","onMouseEnter","onMouseMove","onMouseLeave","orientation","className","rectX","rectY","width","height","x0","x1","Math","min","abs","y0","y1","Component","propTypes","oneOfType","number","string","instanceOf","Date","object","func","defaultProps"],"mappings":"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","file":"Bar.js","sourcesContent":["import React from \"react\";\nimport invariant from \"invariant\";\nimport isUndefined from \"lodash/isUndefined\";\nimport { hasOneOfTwo } from \"./util\";\nimport { hasXYScales } from \"./utils/Scale\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Bar is a low-level component to be used in XYPlot-type charts (namely BarChart).\n * It is specified in terms of a range (min & max) of values on one axis (the bar's long axis)\n * and a single value on the other axis.\n * Passing props `x`, `xEnd` and `y` specifies a horizontal bar,\n * centered on `y` and spanning from `x` to `xEnd`;\n * passing props `x`, `y`, and `yEnd' specifies a vertical bar.\n */\n\nexport default class Bar extends React.Component {\n  static propTypes = {\n    /**\n     * For a vertical bar, `x` represents the X data value on which the bar is centered.\n     * For a horizontal bar, represents the *starting* X value of the bar, ie. the minimum of the range it spans\n     */\n    x: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date)\n    ]),\n    /**\n     * For a horizontal bar, `y` represents the Y data value on which the bar is centered.\n     * For a vertical bar, represents the *starting* Y value of the bar, ie. the minimum of the range it spans\n     */\n    y: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date)\n    ]),\n    /**\n     * For a horizontal bar, `xEnd` represents the *ending* X data value of the bar, ie. the maximum of the range it spans.\n     * Should be undefined if the bar is vertical.\n     */\n    xEnd: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date)\n    ]),\n    /**\n     * For a vertical bar, `yEnd` represents the *ending* Y data value of the bar, ie. the maximum of the range it spans.\n     * Should be undefined if the bar is horizontal.\n     */\n    yEnd: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string,\n      PropTypes.instanceOf(Date)\n    ]),\n\n    /**\n     * The thickness of the bar, in pixels. (width of vertical bar, or height of horizontal bar)\n     */\n    thickness: PropTypes.number,\n    /**\n     * Class name(s) to be included on the bar's <rect> element\n     */\n    className: PropTypes.string,\n    /**\n     * Inline style object to be included on the bar's <rect> element\n     */\n    style: PropTypes.object,\n    /**\n     * onMouseMove event handler callback, called when user's mouse moves within the bar.\n     */\n    onMouseMove: PropTypes.func,\n    /**\n     * onMouseEnter event handler callback, called when user's mouse enters the bar.\n     */\n    onMouseEnter: PropTypes.func,\n    /**\n     * onMouseLeave event handler callback, called when user's mouse leaves the bar.\n     */\n    onMouseLeave: PropTypes.func,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func\n  };\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    thickness: 8,\n    className: \"\",\n    style: {}\n  };\n\n  render() {\n    //  x/y are values in the *data* domain, not pixel domain\n    const {\n      xScale,\n      yScale,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      thickness,\n      style,\n      onMouseEnter,\n      onMouseMove,\n      onMouseLeave\n    } = this.props;\n\n    invariant(\n      hasOneOfTwo(xEnd, yEnd),\n      `Bar expects an xEnd *or* yEnd prop, but not both.`\n    );\n\n    const orientation = isUndefined(xEnd) ? \"vertical\" : \"horizontal\";\n    const className = `chart-bar chart-bar-${orientation} ${this.props\n      .className || \"\"}`;\n\n    let rectX, rectY, width, height;\n    if (orientation === \"horizontal\") {\n      rectY = yScale(y) - thickness / 2;\n      const x0 = xScale(x);\n      const x1 = xScale(xEnd);\n      rectX = Math.min(x0, x1);\n      width = Math.abs(x1 - x0);\n      height = thickness;\n    } else {\n      // vertical\n      rectX = xScale(x) - thickness / 2;\n      const y0 = yScale(y);\n      const y1 = yScale(yEnd);\n      rectY = Math.min(y0, y1);\n      height = Math.abs(y1 - y0);\n      width = thickness;\n    }\n\n    return (\n      <rect\n        {...{\n          x: rectX,\n          y: rectY,\n          width,\n          height,\n          className,\n          style,\n          onMouseEnter,\n          onMouseMove,\n          onMouseLeave\n        }}\n      />\n    );\n  }\n}\n"]}