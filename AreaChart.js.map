{"version":3,"sources":["src/AreaChart.js"],"names":["CustomPropTypes","AreaChart","nextProps","nextState","shouldUpdate","props","name","data","x","y","yEnd","xScale","yScale","isDifference","pathStyle","pathStylePositive","pathStyleNegative","shouldShowGaps","isDefined","accessors","areaGenerator","defined","d","i","y0","y1","areaPathStr","height","clipBelowPathStr","clipAbovePathStr","chartId","uniqueId","clipAboveId","clipBelowId","pathStyleAbove","pathStyleBelow","yDomain","Component","propTypes","array","isRequired","valueOrAccessor","object","bool","func","xScaleType","string","yScaleType","defaultProps","isUndefined"],"mappings":"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","file":"AreaChart.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport { area } from \"d3\";\n\nimport { makeAccessor2, domainFromData, combineDomains } from \"./utils/Data\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\n\n// AreaChart represents a simple bivariate area chart,\n// a filled path drawn between two lines (datasets).\n\n// todo horizontal prop, for filling area horizontally?\n// todo support categorical data?\n// todo build StackedAreaChart that composes multiple AreaCharts\n\nexport default class AreaChart extends React.Component {\n  static propTypes = {\n    /**\n     * the array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Accessor function for area X values, called once per datum\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for area's starting (minimum) Y values, called once per datum,\n     * or a single Y value to be used for the entire line.\n     * Should return the minimum of the Y range spanned by the area at this point.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for area's ending (maximum) Y values, called once per datum,\n     * or a single Y value to be used for the entire line.\n     * Should return the maximum of the Y range spanned by the area at this point.\n     */\n    yEnd: CustomPropTypes.valueOrAccessor,\n    /**\n     * style applied to area path element\n     */\n    pathStyle: PropTypes.object,\n    /**\n     * if isDifference is true, AreaChart generates a \"difference chart\" with two area paths instead of one:\n     * one path which shows when YEnd > Y, and one vice versa, allowing them to be styled differently (eg red/green)\n     */\n    isDifference: PropTypes.bool,\n    /**\n     * when isDifference is true, pathStylePositive and pathStyleNegative can be passed to give 2 different inline\n     * styles to the two different paths which are generated.\n     * Ignored if isDifference is false.\n     */\n    pathStylePositive: PropTypes.object,\n    pathStyleNegative: PropTypes.object,\n    /**\n     * if true, will show gaps in the shaded area for data where props.isDefined(datum) returns false\n     */\n    shouldShowGaps: PropTypes.bool,\n    /**\n     * if shouldShowGaps is true, isDefined function describes when a datum should be considered \"defined\" vs. when to show gap\n     * by default, shows gap if either y or yEnd are undefined\n     */\n    isDefined: PropTypes.func,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func,\n    /**\n     * Type of X scale - provided by XYPlot\n     */\n    xScaleType: PropTypes.string,\n    /**\n     * Type of Y scale - provided by XYPlot\n     */\n    yScaleType: PropTypes.string\n  };\n  static defaultProps = {\n    shouldShowGaps: true,\n    isDefined: (d, i, accessors) => {\n      return (\n        !_.isUndefined(accessors.y(d, i)) &&\n        !_.isUndefined(accessors.yEnd(d, i))\n      );\n    }\n  };\n\n  static getDomain(props) {\n    // custom Y domain - the total (union) extent of getY and getYEnd combined\n    const { data, x, y, yEnd } = props;\n    const accessors = {\n      x: makeAccessor2(x),\n      y: makeAccessor2(y),\n      yEnd: makeAccessor2(yEnd)\n    };\n    return {\n      yDomain: combineDomains([\n        domainFromData(data, accessors.y),\n        domainFromData(data, accessors.yEnd)\n      ])\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\n      \"pathStyle\",\n      \"pathStylePositive\",\n      \"pathStyleNegative\"\n    ]);\n    return shouldUpdate;\n  }\n\n  render() {\n    const {\n      name,\n      data,\n      x,\n      y,\n      yEnd,\n      xScale,\n      yScale,\n      isDifference,\n      pathStyle,\n      pathStylePositive,\n      pathStyleNegative,\n      shouldShowGaps,\n      isDefined\n    } = this.props;\n    const accessors = {\n      x: makeAccessor2(x),\n      y: makeAccessor2(y),\n      yEnd: makeAccessor2(yEnd)\n    };\n\n    // create d3 area path generator\n    const areaGenerator = area();\n\n    // if gaps in data should be shown, use `props.isDefined` function as the `defined` param for d3's area generator;\n    // but wrap it & pass in accessors as well, so that the function can easily access the relevant data values\n    if (shouldShowGaps) {\n      areaGenerator.defined((d, i) => isDefined(d, i, accessors));\n    }\n\n    areaGenerator\n      .x((d, i) => xScale(accessors.x(d, i)))\n      .y0((d, i) => yScale(accessors.y(d, i)))\n      .y1((d, i) => yScale(accessors.yEnd(d, i)));\n\n    const areaPathStr = areaGenerator(data);\n\n    if (isDifference) {\n      // difference chart - create 2 clip paths, one which clips to only show path where YEnd > Y, and other vice versa\n      areaGenerator.y0(this.props.height);\n      const clipBelowPathStr = areaGenerator(data);\n      areaGenerator.y0(0);\n      const clipAbovePathStr = areaGenerator(data);\n\n      // make sure we have a unique ID for this chart, so clip path IDs don't affect other charts\n      const chartId = name || _.uniqueId();\n      const clipAboveId = `clip-above-area-${chartId}`;\n      const clipBelowId = `clip-below-area-${chartId}`;\n      const pathStyleAbove = pathStylePositive || pathStyle || {};\n      const pathStyleBelow = pathStyleNegative || pathStyle || {};\n\n      return (\n        <g className={`${name} area-chart`}>\n          <clipPath id={clipAboveId}>\n            <path d={clipAbovePathStr} />\n          </clipPath>\n          <clipPath id={clipBelowId}>\n            <path d={clipBelowPathStr} />\n          </clipPath>\n          <path\n            className=\"area-chart-path\"\n            d={areaPathStr}\n            clipPath={`url(#${clipAboveId})`}\n            style={pathStyleAbove}\n          />\n          <path\n            className=\"area-chart-path\"\n            d={areaPathStr}\n            clipPath={`url(#${clipBelowId})`}\n            style={pathStyleBelow}\n          />\n        </g>\n      );\n    } else {\n      return (\n        <g className={`${name} area-chart`}>\n          <path\n            className=\"area-chart-path\"\n            d={areaPathStr}\n            style={pathStyle || {}}\n          />\n        </g>\n      );\n    }\n  }\n}\n"]}