{"version":3,"sources":["src/ZoomContainer.js"],"names":["zoomTransformFromProps","props","zoomScale","zoomX","zoomY","d3","zoomIdentity","translate","scale","ZoomContainer","React","Component","lastZoomTransform","selection","args","nextZoomTransform","event","transform","controlled","state","zoom","on","handleZoom","setState","zoomKey","Math","random","onZoom","_updateZoomProps","extent","scaleExtent","translateExtent","clickDistance","duration","interpolate","constrain","filter","touchable","wheelDelta","_","isArray","isFinite","isFunction","componentDidMount","initialZoomTransform","select","refs","svg","call","disableMouseWheelZoom","componentWillReceiveProps","nextProps","hasChangedZoom","render","zoomTransform","width","height","children","PropTypes","number","func","bool","array"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\n// todo: make sure this correctly handles new props getting passed in, doesn't double bind events\n\nfunction zoomTransformFromProps(props) {\n  const { zoomScale, zoomX, zoomY } = props;\n  return d3.zoomIdentity\n    .translate(zoomX || 0, zoomY || 0)\n    .scale(zoomScale || 1);\n}\n\n/**\n * `ZoomContainer` is a wrapper that gives users the ability to zoom in, zoom out and drag its children components.\n */\nexport default class ZoomContainer extends React.Component {\n  static propTypes = {\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    width: PropTypes.number,\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    height: PropTypes.number,\n    /**\n     * Zoom callback function, called when zoom changes.\n     * For controlled version of this component, you should update zoomX, zoomY and zoomScale props in this callback.\n     */\n    onZoom: PropTypes.func,\n    /**\n     * Boolean which determines whether the component is \"controlled\" (true) or \"stateful\" (false).\n     * When true, zoom transformation is controlled entirely by the `zoomX`, `zoomY` and `zoomScale` props, which\n     * you are responsible for updating in the `onZoom` callback function.\n     * When false, zoom transformation is handled by internal state, and the `zoomX`, `zoomY` and `zoomScale` props\n     * specify only the initial X, Y and scale transformation of the component.\n     */\n    controlled: PropTypes.bool,\n    /**\n     * Disables wheel-driven zooming (say to not interfere with native scrolling).\n     */\n    disableMouseWheelZoom: PropTypes.bool,\n    /**\n     * The X-coordinate of the zoom transformation (or initial X-coordinate, if `controlled` is false).\n     */\n    zoomX: PropTypes.number,\n    /**\n     * The Y-coordinate of the zoom transformation (or initial Y-coordinate, if `controlled` is false).\n     */\n    zoomY: PropTypes.number,\n    /**\n     * The scaling factor of the zoom transformation (or initial scaling, if `controlled` is false).\n     * 1.0 is normal size, 2.0 is double size, 0.5 is half size.\n     */\n    zoomScale: PropTypes.number,\n\n    /**\n     * Sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]],\n     * where [x0, y0] is the top-left corner of the viewport and [x1, y1] is the bottom-right corner of the viewport.\n     * See d3-zoom docs for more information.\n     */\n    extent: PropTypes.array,\n    /**\n     * Sets the scale extent to the specified array of numbers [k0, k1]\n     * where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor.\n     * See d3-zoom docs for more information.\n     */\n    scaleExtent: PropTypes.array,\n    /**\n     * Sets the translate extent to the specified array of points [[x0, y0], [x1, y1]],\n     * where [x0, y0] is the top-left corner of the world and [x1, y1] is the bottom-right corner of the world.\n     * See d3-zoom docs for more information.\n     */\n    translateExtent: PropTypes.array,\n    /**\n     * Sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger\n     * a subsequent click event.\n     * See d3-zoom docs for more information.\n     */\n    clickDistance: PropTypes.number,\n    /**\n     * Sets the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds.\n     * See d3-zoom docs for more information.\n     */\n    duration: PropTypes.number,\n    /**\n     * Sets the interpolation factory for zoom transitions to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    interpolate: PropTypes.func,\n    /**\n     * Sets the transform constraint function to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    constrain: PropTypes.func,\n    /**\n     * Sets the zoom event filter to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    filter: PropTypes.func,\n    /**\n     * Sets the touch support detector to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    touchable: PropTypes.func,\n    /**\n     * Sets the wheel delta function to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    wheelDelta: PropTypes.func\n  };\n  static defaultProps = {\n    width: 800,\n    height: 600,\n    controlled: false,\n    disableMouseWheelZoom: false,\n    zoomX: 0,\n    zoomY: 0,\n    zoomScale: 1\n  };\n\n  state = {\n    lastZoomTransform: null,\n    selection: null\n  };\n\n  _updateZoomProps(props) {\n    if (!props) props = this.props;\n    const {\n      extent,\n      scaleExtent,\n      translateExtent,\n      clickDistance,\n      duration,\n      interpolate,\n      constrain,\n      filter,\n      touchable,\n      wheelDelta\n    } = props;\n\n    if (_.isArray(extent)) this.zoom.extent(extent);\n    if (_.isArray(scaleExtent)) this.zoom.scaleExtent(scaleExtent);\n    if (_.isArray(translateExtent)) this.zoom.translateExtent(translateExtent);\n    if (_.isFinite(clickDistance)) this.zoom.clickDistance(clickDistance);\n    if (_.isFinite(duration)) this.zoom.duration(duration);\n    if (_.isFunction(interpolate)) this.zoom.interpolate(interpolate);\n    if (_.isFunction(constrain)) this.zoom.constrain(constrain);\n    if (_.isFunction(filter)) this.zoom.filter(filter);\n    if (_.isFunction(touchable)) this.zoom.touchable(touchable);\n    if (_.isFunction(wheelDelta)) this.zoom.wheelDelta(wheelDelta);\n  }\n\n  componentDidMount() {\n    const initialZoomTransform = zoomTransformFromProps(this.props);\n    const selection = d3.select(this.refs.svg);\n\n    this.zoom = d3.zoom();\n    selection.call(this.zoom);\n\n    if (this.props.disableMouseWheelZoom) {\n      selection.call(this.zoom).on(\"wheel.zoom\", null);\n    } else {\n      selection.call(this.zoom);\n    }\n\n    this.zoom.transform(selection, initialZoomTransform);\n    this._updateZoomProps();\n    this.zoom.on(\"zoom\", this.handleZoom);\n\n    this.setState({\n      selection,\n      lastZoomTransform: initialZoomTransform\n    });\n  }\n\n  // React is deprecating componentWillReceiveProps, but it's pretty much necessary in this case\n  // TODO: change to UNSAFE_componentWillReceiveProps when upgrading React\n  componentWillReceiveProps(nextProps) {\n    if (this.props.controlled) {\n      // if controlled component and zoom props have changed, apply the new zoom props to d3-zoom\n      // (unbind handler first so as not to create infinite callback loop)\n      const hasChangedZoom =\n        nextProps.zoomX !== this.props.zoomX ||\n        nextProps.zoomY !== this.props.zoomY ||\n        nextProps.zoomScale !== this.props.zoomScale;\n\n      if (hasChangedZoom) {\n        this.zoom.on(\"zoom\", null);\n        const nextZoomTransform = zoomTransformFromProps(nextProps);\n        this.zoom.transform(this.state.selection, nextZoomTransform);\n        this.zoom.on(\"zoom\", this.handleZoom);\n\n        // update state.lastZoomTransform so we can revert d3-zoom to this next time it's changed internally\n        this.setState({ lastZoomTransform: nextZoomTransform });\n      }\n    }\n    this._updateZoomProps(nextProps);\n  }\n\n  handleZoom = (...args) => {\n    const nextZoomTransform = d3.event.transform;\n\n    if (this.props.controlled) {\n      // zoom transform should be controlled by props, but d3-zoom has already applied new transform to this.zoom\n      // (even though props haven't changed), so we must *undo* it by applying lastZoomTransform to this.zoom\n      const { selection, lastZoomTransform } = this.state;\n\n      // unbind zoom event first, so that manually setting transform doesn't trigger handleZoom infinite loop\n      this.zoom.on(\"zoom\", null);\n      this.zoom.transform(selection, lastZoomTransform);\n      this.zoom.on(\"zoom\", this.handleZoom);\n    } else {\n      // *uncontrolled* (stateful) ZoomContainer, we want to keep the transform applied by d3-zoom;\n      // but since the state is inside d3-zoom, we need to update something on this.state to trigger re-render\n      this.setState({ zoomKey: Math.random() });\n    }\n\n    if (this.props.onZoom) this.props.onZoom(nextZoomTransform, ...args);\n  };\n\n  render() {\n    const zoomTransform = this.refs.svg\n      ? d3.zoomTransform(this.refs.svg)\n      : null;\n\n    return (\n      <svg ref=\"svg\" width={this.props.width} height={this.props.height}>\n        <g\n          width={this.props.width}\n          height={this.props.height}\n          transform={zoomTransform}\n        >\n          {this.props.children}\n        </g>\n      </svg>\n    );\n  }\n}\n"],"file":"ZoomContainer.js"}