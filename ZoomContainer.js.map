{"version":3,"sources":["src/ZoomContainer.js"],"names":["d3","zoomTransformFromProps","props","zoomScale","zoomX","zoomY","zoomIdentity","translate","scale","ZoomContainer","extent","scaleExtent","translateExtent","clickDistance","duration","interpolate","constrain","filter","touchable","wheelDelta","isArray","zoom","isFinite","isFunction","initialZoomTransform","selection","select","refs","svg","call","transform","_updateZoomProps","on","handleZoom","setState","lastZoomTransform","nextProps","controlled","hasChangedZoom","nextZoomTransform","state","zoomTransform","width","height","children","Component","propTypes","number","onZoom","func","bool","array","defaultProps","args","event","zoomKey","Math","random"],"mappings":"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","file":"ZoomContainer.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport * as d3 from \"d3\";\n\n// todo: make sure this correctly handles new props getting passed in, doesn't double bind events\n\nfunction zoomTransformFromProps(props) {\n  const { zoomScale, zoomX, zoomY } = props;\n  return d3.zoomIdentity\n    .translate(zoomX || 0, zoomY || 0)\n    .scale(zoomScale || 1);\n}\n\nexport default class ZoomContainer extends React.Component {\n  static propTypes = {\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    width: PropTypes.number,\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    height: PropTypes.number,\n    /**\n     * Zoom callback function, called when zoom changes.\n     * For controlled version of this component, you should update zoomX, zoomY and zoomScale props in this callback.\n     */\n    onZoom: PropTypes.func,\n    /**\n     * Boolean which determines whether the component is \"controlled\" (true) or \"stateful\" (false).\n     * When true, zoom transformation is controlled entirely by the `zoomX`, `zoomY` and `zoomScale` props, which\n     * you are responsible for updating in the `onZoom` callback function.\n     * When false, zoom transformation is handled by internal state, and the `zoomX`, `zoomY` and `zoomScale` props\n     * specify only the initial X, Y and scale transformation of the component.\n     */\n    controlled: PropTypes.bool,\n    /**\n     * The X-coordinate of the zoom transformation (or initial X-coordinate, if `controlled` is false)\n     */\n    zoomX: PropTypes.number,\n    /**\n     * The Y-coordinate of the zoom transformation (or initial Y-coordinate, if `controlled` is false)\n     */\n    zoomY: PropTypes.number,\n    /**\n     * The scaling factor of the zoom transformation (or initial scaling, if `controlled` is false).\n     * 1.0 is normal size, 2.0 is double size, 0.5 is half size.\n     */\n    zoomScale: PropTypes.number,\n\n    /**\n     * Sets the viewport extent to the specified array of points [[x0, y0], [x1, y1]],\n     * where [x0, y0] is the top-left corner of the viewport and [x1, y1] is the bottom-right corner of the viewport.\n     * See d3-zoom docs for more information.\n     */\n    extent: PropTypes.array,\n    /**\n     * Sets the scale extent to the specified array of numbers [k0, k1]\n     * where k0 is the minimum allowed scale factor and k1 is the maximum allowed scale factor.\n     * See d3-zoom docs for more information.\n     */\n    scaleExtent: PropTypes.array,\n    /**\n     * Sets the translate extent to the specified array of points [[x0, y0], [x1, y1]],\n     * where [x0, y0] is the top-left corner of the world and [x1, y1] is the bottom-right corner of the world.\n     * See d3-zoom docs for more information.\n     */\n    translateExtent: PropTypes.array,\n    /**\n     * Sets the maximum distance that the mouse can move between mousedown and mouseup that will trigger\n     * a subsequent click event.\n     * See d3-zoom docs for more information.\n     */\n    clickDistance: PropTypes.number,\n    /**\n     * Sets the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds.\n     * See d3-zoom docs for more information.\n     */\n    duration: PropTypes.number,\n    /**\n     * Sets the interpolation factory for zoom transitions to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    interpolate: PropTypes.func,\n    /**\n     * Sets the transform constraint function to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    constrain: PropTypes.func,\n    /**\n     * Sets the zoom event filter to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    filter: PropTypes.func,\n    /**\n     * Sets the touch support detector to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    touchable: PropTypes.func,\n    /**\n     * Sets the wheel delta function to the specified function.\n     * See d3-zoom docs for more information.\n     */\n    wheelDelta: PropTypes.func\n  };\n  static defaultProps = {\n    width: 800,\n    height: 600,\n    controlled: false,\n    zoomX: 0,\n    zoomY: 0,\n    zoomScale: 1\n  };\n\n  state = {\n    lastZoomTransform: null,\n    selection: null\n  };\n\n  _updateZoomProps(props) {\n    if (!props) props = this.props;\n    const {\n      extent,\n      scaleExtent,\n      translateExtent,\n      clickDistance,\n      duration,\n      interpolate\n    } = props;\n    const { constrain, filter, touchable, wheelDelta } = props;\n\n    if (_.isArray(extent)) this.zoom.extent(extent);\n    if (_.isArray(scaleExtent)) this.zoom.scaleExtent(scaleExtent);\n    if (_.isArray(translateExtent)) this.zoom.translateExtent(translateExtent);\n    if (_.isFinite(clickDistance)) this.zoom.clickDistance(clickDistance);\n    if (_.isFinite(duration)) this.zoom.duration(duration);\n    if (_.isFunction(interpolate)) this.zoom.interpolate(interpolate);\n    if (_.isFunction(constrain)) this.zoom.constrain(constrain);\n    if (_.isFunction(filter)) this.zoom.filter(filter);\n    if (_.isFunction(touchable)) this.zoom.touchable(touchable);\n    if (_.isFunction(wheelDelta)) this.zoom.wheelDelta(wheelDelta);\n  }\n\n  componentDidMount() {\n    const initialZoomTransform = zoomTransformFromProps(this.props);\n    const selection = d3.select(this.refs.svg);\n\n    this.zoom = d3.zoom();\n    selection.call(this.zoom);\n    this.zoom.transform(selection, initialZoomTransform);\n    this._updateZoomProps();\n    this.zoom.on(\"zoom\", this.handleZoom);\n\n    this.setState({\n      selection,\n      lastZoomTransform: initialZoomTransform\n    });\n  }\n\n  // React is deprecating componentWillReceiveProps, but it's pretty much necessary in this case\n  // TODO: change to UNSAFE_componentWillReceiveProps when upgrading React\n  componentWillReceiveProps(nextProps) {\n    if (this.props.controlled) {\n      // if controlled component and zoom props have changed, apply the new zoom props to d3-zoom\n      // (unbind handler first so as not to create infinite callback loop)\n      const hasChangedZoom =\n        nextProps.zoomX !== this.props.zoomX ||\n        nextProps.zoomY !== this.props.zoomY ||\n        nextProps.zoomScale !== this.props.zoomScale;\n\n      if (hasChangedZoom) {\n        this.zoom.on(\"zoom\", null);\n        const nextZoomTransform = zoomTransformFromProps(nextProps);\n        this.zoom.transform(this.state.selection, nextZoomTransform);\n        this.zoom.on(\"zoom\", this.handleZoom);\n\n        // update state.lastZoomTransform so we can revert d3-zoom to this next time it's changed internally\n        this.setState({ lastZoomTransform: nextZoomTransform });\n      }\n    }\n    this._updateZoomProps(nextProps);\n  }\n\n  handleZoom = (...args) => {\n    const nextZoomTransform = d3.event.transform;\n\n    if (this.props.controlled) {\n      // zoom transform should be controlled by props, but d3-zoom has already applied new transform to this.zoom\n      // (even though props haven't changed), so we must *undo* it by applying lastZoomTransform to this.zoom\n      const { selection, lastZoomTransform } = this.state;\n\n      // unbind zoom event first, so that manually setting transform doesn't trigger handleZoom infinite loop\n      this.zoom.on(\"zoom\", null);\n      this.zoom.transform(selection, lastZoomTransform);\n      this.zoom.on(\"zoom\", this.handleZoom);\n    } else {\n      // *uncontrolled* (stateful) ZoomContainer, we want to keep the transform applied by d3-zoom;\n      // but since the state is inside d3-zoom, we need to update something on this.state to trigger re-render\n      this.setState({ zoomKey: Math.random() });\n    }\n\n    if (this.props.onZoom) this.props.onZoom(nextZoomTransform, ...args);\n  };\n\n  render() {\n    const zoomTransform = this.refs.svg\n      ? d3.zoomTransform(this.refs.svg)\n      : null;\n\n    return (\n      <svg ref=\"svg\" width={this.props.width} height={this.props.height}>\n        <g\n          width={this.props.width}\n          height={this.props.height}\n          transform={zoomTransform}\n        >\n          {this.props.children}\n        </g>\n      </svg>\n    );\n  }\n}\n"]}