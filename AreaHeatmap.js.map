{"version":3,"sources":["src/AreaHeatmap.js"],"names":["CustomPropTypes","AreaHeatmap","onMouseEnter","props","e","onMouseLeave","onMouseMove","xScale","yScale","isFunction","boundBox","refs","background","getBoundingClientRect","x","clientX","left","y","clientY","top","invert","xVal","yVal","nextProps","nextState","shouldUpdate","data","area","xEnd","yEnd","scaleWidth","scaleHeight","rectClassName","rectStyle","map","areaAccessor","xAccessor","xEndAccessor","yAccessor","yEndAccessor","unitsPerPixel","Math","max","apply","d","i","abs","handlers","getter","xEndVal","yEndVal","areaVal","fullWidth","fullHeight","fullRectX","min","fullRectY","pixelArea","width","sqrt","height","rectX","rectY","every","isFinite","className","style","key","flatten","Component","propTypes","array","isRequired","valueOrAccessor","number","string","object","func","defaultProps"],"mappings":"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","file":"AreaHeatmap.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { extent } from \"d3\";\nimport PropTypes from \"prop-types\";\n\nimport { methodIfFuncProp } from \"./util.js\";\nimport { makeAccessor, makeAccessor2, getValue } from \"./utils/Data\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\n\nexport default class AreaHeatmap extends React.Component {\n  static propTypes = {\n    /**\n     * the array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    x: CustomPropTypes.valueOrAccessor,\n    xEnd: CustomPropTypes.valueOrAccessor,\n    y: CustomPropTypes.valueOrAccessor,\n    yEnd: CustomPropTypes.valueOrAccessor,\n    area: CustomPropTypes.valueOrAccessor,\n    unitsPerPixel: PropTypes.number,\n    rectClassName: PropTypes.string,\n    rectStyle: PropTypes.object,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func\n  };\n  static defaultProps = {\n    rectClassName: \"\",\n    rectStyle: {}\n  };\n\n  static getDomain(props) {\n    const { data, x, xEnd, y, yEnd } = props;\n    return {\n      // x: extent(_.flatten([data.map(makeAccessor(getX)), data.map(makeAccessor(getXEnd))])),\n      x: extent(\n        _.flatten([data.map(makeAccessor2(x)), data.map(makeAccessor2(xEnd))])\n      ),\n      y: extent(\n        _.flatten([data.map(makeAccessor2(y)), data.map(makeAccessor2(yEnd))])\n      )\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\"rectStyle\"]);\n    return shouldUpdate;\n  }\n\n  onMouseEnter = e => {\n    this.props.onMouseEnter(e);\n  };\n  onMouseLeave = e => {\n    this.props.onMouseLeave(e);\n  };\n  onMouseMove = e => {\n    const { xScale, yScale, onMouseMove } = this.props;\n    if (!_.isFunction(onMouseMove)) return;\n\n    const boundBox = this.refs.background.getBoundingClientRect();\n    if (!boundBox) return;\n    const [x, y] = [\n      e.clientX - (boundBox.left || 0),\n      e.clientY - (boundBox.top || 0)\n    ];\n    const [xVal, yVal] = [xScale.invert(x), yScale.invert(y)];\n\n    onMouseMove(e, { xVal, yVal });\n  };\n\n  render() {\n    const {\n      data,\n      area,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      xScale,\n      yScale,\n      scaleWidth,\n      scaleHeight,\n      rectClassName,\n      rectStyle\n    } = this.props;\n    const [areaAccessor, xAccessor, xEndAccessor, yAccessor, yEndAccessor] = [\n      area,\n      x,\n      xEnd,\n      y,\n      yEnd\n    ].map(makeAccessor2);\n\n    // to determine how many data units are represented by 1 square pixel of area,\n    // find the bin that would require the highest unit-per-pixel scale if its rectangle filled the whole container\n    const unitsPerPixel =\n      this.props.unitsPerPixel ||\n      Math.max.apply(\n        this,\n        data.map((d, i) => {\n          // ratio of this bin's area (in data units) to the entire area of its container rectangle (in pixels)\n          return (\n            getValue(area, d, i) /\n            Math.abs(\n              (xScale(getValue(xEnd, d, i)) - xScale(getValue(x, d, i))) *\n                (yScale(getValue(yEnd, d, i)) - yScale(getValue(y, d, i)))\n            )\n          );\n        })\n      );\n\n    const handlers = {\n      onMouseMove: methodIfFuncProp(\"onMouseMove\", this.props, this),\n      onMouseEnter: methodIfFuncProp(\"onMouseEnter\", this.props, this),\n      onMouseLeave: methodIfFuncProp(\"onMouseLeave\", this.props, this)\n    };\n\n    return (\n      <g className=\"area-heatmap-chart\" {...handlers}>\n        <rect\n          x=\"0\"\n          y=\"0\"\n          width={scaleWidth}\n          height={scaleHeight}\n          ref=\"background\"\n          fill=\"transparent\"\n        />\n        {data.map((d, i) => {\n          const [xVal, xEndVal, yVal, yEndVal, areaVal] = [\n            x,\n            xEnd,\n            y,\n            yEnd,\n            area\n          ].map(getter => getValue(getter, d, i));\n          // full width and height of the containing rectangle\n          const fullWidth = Math.abs(xScale(xEndVal) - xScale(xVal));\n          const fullHeight = Math.abs(yScale(yEndVal) - yScale(yVal));\n          // x / y position of top left of the containing rectangle\n          const fullRectX = Math.min(xScale(xEndVal), xScale(xVal));\n          const fullRectY = Math.min(yScale(yEndVal), yScale(yVal));\n\n          // we know two facts:\n          // 1. the (pixel) area of the rect will be the data value divided by the # of data units per pixel\n          //    ie. area = height * width = areaVal / unitsPerPixel\n          const pixelArea = areaVal / unitsPerPixel;\n          // 2. all rectangles, regardless of size, have the same shape (are congruent), so the ratio\n          //    of the rect's width to the full width is equal to the ratio of its height to the full height.\n          //    ie. (height / fullHeight) = (width / fullWidth)\n          // solve for height and width to get...\n          const width = Math.sqrt(pixelArea * (fullWidth / fullHeight));\n          const height = Math.sqrt(pixelArea * (fullHeight / fullWidth));\n\n          // center the data rect in the containing rectangle\n          const rectX = fullRectX + (fullWidth - width) / 2;\n          const rectY = fullRectY + (fullHeight - height) / 2;\n\n          if (!_.every([rectX, rectY, width, height], _.isFinite)) return null;\n\n          const className = `area-heatmap-rect ${getValue(\n            rectClassName,\n            d,\n            i\n          )}`;\n          const style = getValue(rectStyle, d, i);\n          const key = `rect-${i}`;\n\n          return (\n            <rect\n              {...{ x: rectX, y: rectY, width, height, className, style, key }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"]}