{"version":3,"sources":["src/AreaHeatmap.js"],"names":["AreaHeatmap","React","Component","e","props","onMouseEnter","onMouseLeave","xScale","yScale","onMouseMove","_","isFunction","boundBox","refs","background","getBoundingClientRect","x","y","clientX","left","clientY","top","xVal","yVal","invert","getDomain","data","xEnd","yEnd","flatten","map","shouldComponentUpdate","nextProps","shouldUpdate","render","area","scaleWidth","scaleHeight","rectClassName","rectStyle","areaAccessor","xAccessor","xEndAccessor","yAccessor","yEndAccessor","makeAccessor2","unitsPerPixel","Math","max","apply","d","i","abs","handlers","xEndVal","yEndVal","areaVal","getter","fullWidth","fullHeight","fullRectX","min","fullRectY","pixelArea","width","sqrt","height","rectX","rectY","every","isFinite","className","style","key","PropTypes","array","isRequired","CustomPropTypes","valueOrAccessor","number","oneOfType","string","func","object"],"mappings":"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","sourcesContent":["import { extent } from \"d3\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { methodIfFuncProp } from \"./util.js\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport { getValue, makeAccessor2 } from \"./utils/Data\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\n\n/**\n * `AreaHeatmap` is still undergoing experimental changes!\n * We do not consider this chart to be production ready as it does not support categorical data.\n */\n\n// todo support categorical data\n\nexport default class AreaHeatmap extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data objects.\n     */\n    data: PropTypes.array.isRequired,\n    x: CustomPropTypes.valueOrAccessor,\n    xEnd: CustomPropTypes.valueOrAccessor,\n    y: CustomPropTypes.valueOrAccessor,\n    yEnd: CustomPropTypes.valueOrAccessor,\n    area: CustomPropTypes.valueOrAccessor,\n    unitsPerPixel: PropTypes.number,\n    /**\n     * Class attribute to be applied to each rect\n     * or accessor function which returns a class\n     */\n    rectClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    /**\n     * Inline style object to be applied to each rect,\n     * or accessor function which returns a style object.\n     */\n    rectStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func\n  };\n  static defaultProps = { rectClassName: \"\", rectStyle: {} };\n\n  static getDomain(props) {\n    const { data, x, xEnd, y, yEnd } = props;\n    return {\n      x: extent(\n        _.flatten([data.map(makeAccessor2(x)), data.map(makeAccessor2(xEnd))])\n      ),\n      y: extent(\n        _.flatten([data.map(makeAccessor2(y)), data.map(makeAccessor2(yEnd))])\n      )\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const shouldUpdate = !xyPropsEqual(this.props, nextProps, [\"rectStyle\"]);\n    return shouldUpdate;\n  }\n\n  onMouseEnter = e => {\n    this.props.onMouseEnter(e);\n  };\n\n  onMouseLeave = e => {\n    this.props.onMouseLeave(e);\n  };\n\n  onMouseMove = e => {\n    const { xScale, yScale, onMouseMove } = this.props;\n    if (!_.isFunction(onMouseMove)) return;\n\n    const boundBox = this.refs.background.getBoundingClientRect();\n    if (!boundBox) return;\n    const [x, y] = [\n      e.clientX - (boundBox.left || 0),\n      e.clientY - (boundBox.top || 0)\n    ];\n    const [xVal, yVal] = [xScale.invert(x), yScale.invert(y)];\n\n    onMouseMove(e, { xVal, yVal });\n  };\n\n  render() {\n    const {\n      data,\n      area,\n      x,\n      xEnd,\n      y,\n      yEnd,\n      xScale,\n      yScale,\n      scaleWidth,\n      scaleHeight,\n      rectClassName,\n      rectStyle\n    } = this.props;\n    const [areaAccessor, xAccessor, xEndAccessor, yAccessor, yEndAccessor] = [\n      area,\n      x,\n      xEnd,\n      y,\n      yEnd\n    ].map(makeAccessor2);\n\n    // to determine how many data units are represented by 1 square pixel of area,\n    // find the bin that would require the highest unit-per-pixel scale if its rectangle filled the whole container\n    const unitsPerPixel =\n      this.props.unitsPerPixel ||\n      Math.max.apply(\n        this,\n        data.map((d, i) => {\n          // ratio of this bin's area (in data units) to the entire area of its container rectangle (in pixels)\n          return (\n            getValue(area, d, i) /\n            Math.abs(\n              (xScale(getValue(xEnd, d, i)) - xScale(getValue(x, d, i))) *\n                (yScale(getValue(yEnd, d, i)) - yScale(getValue(y, d, i)))\n            )\n          );\n        })\n      );\n\n    const handlers = {\n      onMouseMove: methodIfFuncProp(\"onMouseMove\", this.props, this),\n      onMouseEnter: methodIfFuncProp(\"onMouseEnter\", this.props, this),\n      onMouseLeave: methodIfFuncProp(\"onMouseLeave\", this.props, this)\n    };\n\n    return (\n      <g className=\"rct-area-heatmap-chart\" {...handlers}>\n        <rect\n          x=\"0\"\n          y=\"0\"\n          width={scaleWidth}\n          height={scaleHeight}\n          ref=\"background\"\n          fill=\"transparent\"\n        />\n        {data.map((d, i) => {\n          const [xVal, xEndVal, yVal, yEndVal, areaVal] = [\n            x,\n            xEnd,\n            y,\n            yEnd,\n            area\n          ].map(getter => getValue(getter, d, i));\n          // full width and height of the containing rectangle\n          const fullWidth = Math.abs(xScale(xEndVal) - xScale(xVal));\n          const fullHeight = Math.abs(yScale(yEndVal) - yScale(yVal));\n          // x / y position of top left of the containing rectangle\n          const fullRectX = Math.min(xScale(xEndVal), xScale(xVal));\n          const fullRectY = Math.min(yScale(yEndVal), yScale(yVal));\n\n          // we know two facts:\n          // 1. the (pixel) area of the rect will be the data value divided by the # of data units per pixel\n          //    ie. area = height * width = areaVal / unitsPerPixel\n          const pixelArea = areaVal / unitsPerPixel;\n          // 2. all rectangles, regardless of size, have the same shape (are congruent), so the ratio\n          //    of the rect's width to the full width is equal to the ratio of its height to the full height.\n          //    ie. (height / fullHeight) = (width / fullWidth)\n          // solve for height and width to get...\n          const width = Math.sqrt(pixelArea * (fullWidth / fullHeight));\n          const height = Math.sqrt(pixelArea * (fullHeight / fullWidth));\n\n          // center the data rect in the containing rectangle\n          const rectX = fullRectX + (fullWidth - width) / 2;\n          const rectY = fullRectY + (fullHeight - height) / 2;\n\n          if (!_.every([rectX, rectY, width, height], _.isFinite)) return null;\n\n          const className = `rct-area-heatmap-rect ${getValue(\n            rectClassName,\n            d,\n            i\n          )}`;\n          const style = getValue(rectStyle, d, i);\n          const key = `rect-${i}`;\n\n          return (\n            <rect\n              {...{ x: rectX, y: rectY, width, height, className, style, key }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"],"file":"AreaHeatmap.js"}