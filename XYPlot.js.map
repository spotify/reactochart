{"version":3,"sources":["src/XYPlot.js"],"names":["getMouseOptions","event","xScale","yScale","height","width","marginTop","marginBottom","marginLeft","marginRight","chartBB","currentTarget","getBoundingClientRect","outerX","Math","round","clientX","left","outerY","clientY","top","innerX","innerY","chartSize","bottom","right","xScaleType","yScaleType","xValue","_","inRange","invert","yValue","XYPlot","React","Component","callbackKey","callback","props","isFunction","options","partial","onXYMouseEvent","onMouseEnter","onMouseLeave","render","spacingTop","spacingBottom","spacingLeft","spacingRight","style","xyPlotStyle","xyPlotClassName","panelSize","handlerNames","handlers","fromPairs","map","n","scales","omittedProps","xyPlotPropKeys","Object","keys","propTypes","filter","k","indexOf","propsToPass","omit","pick","className","Children","children","child","isNull","isUndefined","cloneElement","PropTypes","number","xDomain","array","yDomain","string","invertXScale","bool","invertYScale","includeXZero","includeYZero","object","onMouseMove","func","onMouseDown","onMouseUp","XYPlotResolved"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,SAASA,eAAT,CACEC,KADF,EAEE;AACEC,EAAAA,MADF;AAEEC,EAAAA,MAFF;AAGEC,EAAAA,MAHF;AAIEC,EAAAA,KAJF;AAKEC,EAAAA,SALF;AAMEC,EAAAA,YANF;AAOEC,EAAAA,UAPF;AAQEC,EAAAA;AARF,CAFF,EAYE;AACA,QAAMC,OAAO,GAAGT,KAAK,CAACU,aAAN,CAAoBC,qBAApB,EAAhB;AACA,QAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWd,KAAK,CAACe,OAAN,GAAgBN,OAAO,CAACO,IAAnC,CAAf;AACA,QAAMC,MAAM,GAAGJ,IAAI,CAACC,KAAL,CAAWd,KAAK,CAACkB,OAAN,GAAgBT,OAAO,CAACU,GAAnC,CAAf;AACA,QAAMC,MAAM,GAAGR,MAAM,IAAIL,UAAU,IAAI,CAAlB,CAArB;AACA,QAAMc,MAAM,GAAGJ,MAAM,IAAIZ,SAAS,IAAI,CAAjB,CAArB;AACA,QAAMiB,SAAS,GAAG,uBAChB;AAAElB,IAAAA,KAAF;AAASD,IAAAA;AAAT,GADgB,EAEhB;AACEgB,IAAAA,GAAG,EAAEd,SADP;AAEEkB,IAAAA,MAAM,EAAEjB,YAFV;AAGEU,IAAAA,IAAI,EAAET,UAHR;AAIEiB,IAAAA,KAAK,EAAEhB;AAJT,GAFgB,CAAlB;AASA,QAAMiB,UAAU,GAAG,2BAAexB,MAAf,CAAnB;AACA,QAAMyB,UAAU,GAAG,2BAAexB,MAAf,CAAnB;AAEA,QAAMyB,MAAM,GAAG,CAACC,gBAAEC,OAAF,CAAUT,MAAV,EAAkB,CAAlB,EAAqBE,SAAS,CAAClB,KAA/B,CAAD,GACX,IADW,GAEXqB,UAAU,KAAK,SAAf,GACE,6BAAiBxB,MAAjB,EAAyBmB,MAAzB,CADF,GAEEnB,MAAM,CAAC6B,MAAP,CAAcV,MAAd,CAJN;AAMA,QAAMW,MAAM,GAAG,CAACH,gBAAEC,OAAF,CAAUR,MAAV,EAAkB,CAAlB,EAAqBC,SAAS,CAACnB,MAA/B,CAAD,GACX,IADW,GAEXuB,UAAU,KAAK,SAAf,GACE,6BAAiBxB,MAAjB,EAAyBmB,MAAzB,CADF,GAEEnB,MAAM,CAAC4B,MAAP,CAAcT,MAAd,CAJN;AAMA,SAAO;AACLrB,IAAAA,KADK;AAELY,IAAAA,MAFK;AAGLK,IAAAA,MAHK;AAILG,IAAAA,MAJK;AAKLC,IAAAA,MALK;AAMLM,IAAAA,MANK;AAOLI,IAAAA,MAPK;AAQL9B,IAAAA,MARK;AASLC,IAAAA,MATK;AAULG,IAAAA,SAVK;AAWLC,IAAAA,YAXK;AAYLC,IAAAA,UAZK;AAaLC,IAAAA;AAbK,GAAP;AAeD;;AAED,MAAMwB,MAAN,SAAqBC,eAAMC,SAA3B,CAAqC;AAAA;AAAA;;AAAA,4CAsHlB,CAACC,WAAD,EAAcnC,KAAd,KAAwB;AACvC,YAAMoC,QAAQ,GAAG,KAAKC,KAAL,CAAWF,WAAX,CAAjB;AACA,UAAI,CAACP,gBAAEU,UAAF,CAAaF,QAAb,CAAL,EAA6B;AAC7B,YAAMG,OAAO,GAAGxC,eAAe,CAACC,KAAD,EAAQ,KAAKqC,KAAb,CAA/B;AACAD,MAAAA,QAAQ,CAACG,OAAD,CAAR;AACD,KA3HkC;;AAAA,yCA4HrBX,gBAAEY,OAAF,CAAU,KAAKC,cAAf,EAA+B,aAA/B,CA5HqB;;AAAA,yCA6HrBb,gBAAEY,OAAF,CAAU,KAAKC,cAAf,EAA+B,aAA/B,CA7HqB;;AAAA,uCA8HvBb,gBAAEY,OAAF,CAAU,KAAKC,cAAf,EAA+B,WAA/B,CA9HuB;;AAAA,qCA+HzBb,gBAAEY,OAAF,CAAU,KAAKC,cAAf,EAA+B,SAA/B,CA/HyB;;AAAA,0CAgIpBzC,KAAK,IAAI,KAAKqC,KAAL,CAAWK,YAAX,CAAwB;AAAE1C,MAAAA;AAAF,KAAxB,CAhIW;;AAAA,0CAiIpBA,KAAK,IAAI,KAAKqC,KAAL,CAAWM,YAAX,CAAwB;AAAE3C,MAAAA;AAAF,KAAxB,CAjIW;AAAA;;AAmInC4C,EAAAA,MAAM,GAAG;AACP,UAAM;AACJxC,MAAAA,KADI;AAEJD,MAAAA,MAFI;AAGJE,MAAAA,SAHI;AAIJC,MAAAA,YAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA,WANI;AAOJqC,MAAAA,UAPI;AAQJC,MAAAA,aARI;AASJC,MAAAA,WATI;AAUJC,MAAAA,YAVI;AAWJC,MAAAA,KAXI;AAYJC,MAAAA,WAZI;AAaJC,MAAAA,eAbI;AAcJ;AACAlD,MAAAA,MAfI;AAgBJC,MAAAA;AAhBI,QAiBF,KAAKmC,KAjBT,CADO,CAmBP;AACA;AACA;;AACA,UAAMe,SAAS,GAAG,uBAChB;AAAEhD,MAAAA,KAAF;AAASD,MAAAA;AAAT,KADgB,EAEhB;AACEgB,MAAAA,GAAG,EAAEd,SADP;AAEEkB,MAAAA,MAAM,EAAEjB,YAFV;AAGEU,MAAAA,IAAI,EAAET,UAHR;AAIEiB,MAAAA,KAAK,EAAEhB;AAJT,KAFgB,CAAlB;AASA,UAAMc,SAAS,GAAG,uBAAU8B,SAAV,EAAqB;AACrCjC,MAAAA,GAAG,EAAE0B,UADgC;AAErCtB,MAAAA,MAAM,EAAEuB,aAF6B;AAGrC9B,MAAAA,IAAI,EAAE+B,WAH+B;AAIrCvB,MAAAA,KAAK,EAAEwB;AAJ8B,KAArB,CAAlB;AAOA,UAAMK,YAAY,GAAG,CACnB,aADmB,EAEnB,cAFmB,EAGnB,cAHmB,EAInB,aAJmB,EAKnB,WALmB,EAMnB,SANmB,CAArB;;AAQA,UAAMC,QAAQ,GAAG1B,gBAAE2B,SAAF,CACfF,YAAY,CAACG,GAAb,CAAiBC,CAAC,IAAI,CAACA,CAAD,EAAI,4BAAiBA,CAAjB,EAAoB,KAAKpB,KAAzB,EAAgC,IAAhC,CAAJ,CAAtB,CADe,CAAjB;;AAGA,UAAMqB,MAAM,GAAG;AACbzD,MAAAA,MADa;AAEbC,MAAAA;AAFa,KAAf,CAjDO,CAsDP;AACA;AACA;;AACA,UAAMyD,YAAY,GAAG,CACnB,OADmB,EAEnB,aAFmB,EAGnB,cAHmB,EAInB,cAJmB,CAArB;AAOA,UAAMC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAY9B,MAAM,CAAC+B,SAAnB,EAA8BC,MAA9B,CACrBC,CAAC,IAAIN,YAAY,CAACO,OAAb,CAAqBD,CAArB,MAA4B,CAAC,CADb,CAAvB;;AAIA,UAAME,WAAW,GAAGvC,gBAAEwC,IAAF,mBAEbxC,gBAAEyC,IAAF,CAAO,KAAKhC,KAAZ,EAAmBuB,cAAnB,CAFa,EAGbtC,SAHa,EAIboC,MAJa,GAMlBC,YANkB,CAApB;;AASA,UAAMW,SAAS,yBAAkBnB,eAAlB,CAAf;AAEA,WACE,6CAAS;AAAE/C,MAAAA,KAAF;AAASD,MAAAA,MAAT;AAAiBmE,MAAAA,SAAjB;AAA4BrB,MAAAA;AAA5B,KAAT,EAAkDK,QAAlD,GACE;AAAM,MAAA,SAAS,EAAC;AAAhB,OAA2C;AAAElD,MAAAA,KAAF;AAASD,MAAAA;AAAT,KAA3C,EADF,EAEE;AACE,MAAA,SAAS,sBAAeI,UAAU,GAAGwC,WAA5B,eAA4C1C,SAAS,GAC5DwC,UADO,MADX;AAGE,MAAA,SAAS,EAAC;AAHZ,OAKE;AACE,MAAA,SAAS,sBAAe,CAACE,WAAhB,eAAgC,CAACF,UAAjC,MADX;AAEE,MAAA,SAAS,EAAC,qBAFZ;AAGE,MAAA,KAAK,EAAEK;AAHT,OAIME,SAJN,EALF,EAWGnB,eAAMsC,QAAN,CAAef,GAAf,CAAmB,KAAKnB,KAAL,CAAWmC,QAA9B,EAAwCC,KAAK,IAAI;AAChD,aAAO7C,gBAAE8C,MAAF,CAASD,KAAT,KAAmB7C,gBAAE+C,WAAF,CAAcF,KAAd,CAAnB,GACH,IADG,GAEHxC,eAAM2C,YAAN,CAAmBH,KAAnB,EAA0BN,WAA1B,CAFJ;AAGD,KAJA,CAXH,CAFF,CADF;AAsBD;;AAxOkC;;gBAA/BnC,M,eACe;AACjB;;;AAGA5B,EAAAA,KAAK,EAAEyE,mBAAUC,MAJA;;AAKjB;;;AAGA3E,EAAAA,MAAM,EAAE0E,mBAAUC,MARD;;AASjB;;;;;;AAMAC,EAAAA,OAAO,EAAEF,mBAAUG,KAfF;;AAgBjB;;;;;;AAMAC,EAAAA,OAAO,EAAEJ,mBAAUG,KAtBF;AAwBjBvD,EAAAA,UAAU,EAAEoD,mBAAUK,MAxBL;AAyBjBxD,EAAAA,UAAU,EAAEmD,mBAAUK,MAzBL;;AA2BjB;;;AAGAC,EAAAA,YAAY,EAAEN,mBAAUO,IA9BP;;AA+BjB;;;AAGAC,EAAAA,YAAY,EAAER,mBAAUO,IAlCP;;AAoCjB;;;AAGAE,EAAAA,YAAY,EAAET,mBAAUO,IAvCP;;AAwCjB;;;AAGAG,EAAAA,YAAY,EAAEV,mBAAUO,IA3CP;;AA6CjB;;;AAGA/E,EAAAA,SAAS,EAAEwE,mBAAUC,MAhDJ;;AAiDjB;;;AAGAxE,EAAAA,YAAY,EAAEuE,mBAAUC,MApDP;;AAqDjB;;;AAGAvE,EAAAA,UAAU,EAAEsE,mBAAUC,MAxDL;;AAyDjB;;;AAGAtE,EAAAA,WAAW,EAAEqE,mBAAUC,MA5DN;;AA6DjB;;;AAGAjC,EAAAA,UAAU,EAAEgC,mBAAUC,MAhEL;;AAiEjB;;;AAGAhC,EAAAA,aAAa,EAAE+B,mBAAUC,MApER;;AAqEjB;;;AAGA/B,EAAAA,WAAW,EAAE8B,mBAAUC,MAxEN;;AAyEjB;;;AAGA9B,EAAAA,YAAY,EAAE6B,mBAAUC,MA5EP;;AA8EjB;;;AAGA7B,EAAAA,KAAK,EAAE4B,mBAAUW,MAjFA;;AAkFjB;;;;AAIAtC,EAAAA,WAAW,EAAE2B,mBAAUW,MAtFN;AAuFjB;AACA;AACA;AACA;AACA;AAEAC,EAAAA,WAAW,EAAEZ,mBAAUa,IA7FN;AA8FjBhD,EAAAA,YAAY,EAAEmC,mBAAUa,IA9FP;AA+FjB/C,EAAAA,YAAY,EAAEkC,mBAAUa,IA/FP;AAgGjBC,EAAAA,WAAW,EAAEd,mBAAUa,IAhGN;AAiGjBE,EAAAA,SAAS,EAAEf,mBAAUa,IAjGJ;;AAmGjB;;;AAGAvC,EAAAA,eAAe,EAAE0B,mBAAUK;AAtGV,C;;gBADflD,M,kBA0GkB;AACpB5B,EAAAA,KAAK,EAAE,GADa;AAEpBD,EAAAA,MAAM,EAAE,GAFY;AAGpBgF,EAAAA,YAAY,EAAE,KAHM;AAIpBE,EAAAA,YAAY,EAAE,KAJM;AAKpBC,EAAAA,YAAY,EAAE,KALM;AAMpBC,EAAAA,YAAY,EAAE,KANM;AAOpBtC,EAAAA,KAAK,EAAE,EAPa;AAQpBC,EAAAA,WAAW,EAAE,EARO;AASpBC,EAAAA,eAAe,EAAE;AATG,C;;AAiIxB,MAAM0C,cAAc,GAAG,8BAAgB7D,MAAhB,CAAvB;eAEe6D,c","sourcesContent":["import _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { methodIfFuncProp } from \"./util\";\nimport { innerSize } from \"./utils/Margin\";\nimport resolveXYScales from \"./utils/resolveXYScales\";\nimport { inferScaleType, invertPointScale } from \"./utils/Scale\";\n\nfunction getMouseOptions(\n  event,\n  {\n    xScale,\n    yScale,\n    height,\n    width,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight\n  }\n) {\n  const chartBB = event.currentTarget.getBoundingClientRect();\n  const outerX = Math.round(event.clientX - chartBB.left);\n  const outerY = Math.round(event.clientY - chartBB.top);\n  const innerX = outerX - (marginLeft || 0);\n  const innerY = outerY - (marginTop || 0);\n  const chartSize = innerSize(\n    { width, height },\n    {\n      top: marginTop,\n      bottom: marginBottom,\n      left: marginLeft,\n      right: marginRight\n    }\n  );\n  const xScaleType = inferScaleType(xScale);\n  const yScaleType = inferScaleType(yScale);\n\n  const xValue = !_.inRange(innerX, 0, chartSize.width)\n    ? null\n    : xScaleType === \"ordinal\"\n      ? invertPointScale(xScale, innerX)\n      : xScale.invert(innerX);\n\n  const yValue = !_.inRange(innerY, 0, chartSize.height)\n    ? null\n    : yScaleType === \"ordinal\"\n      ? invertPointScale(yScale, innerY)\n      : yScale.invert(innerY);\n\n  return {\n    event,\n    outerX,\n    outerY,\n    innerX,\n    innerY,\n    xValue,\n    yValue,\n    xScale,\n    yScale,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight\n  };\n}\n\nclass XYPlot extends React.Component {\n  static propTypes = {\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    width: PropTypes.number,\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    height: PropTypes.number,\n    /**\n     * The X domain of the data as an array.\n     * For numerical scales, this is represented as [min, max] of the data;\n     * for ordinal/categorical scales it is an array of known values ie. ['a', 'b', 'c'].\n     * Automatically determined from data if not passed.\n     */\n    xDomain: PropTypes.array,\n    /**\n     * The Y domain of the data as an array.\n     * For numerical scales, this is represented as [min, max] of the data;\n     * for ordinal/categorical scales it is an array of known values ie. ['a', 'b', 'c'].\n     * Automatically determined from data if not passed.\n     */\n    yDomain: PropTypes.array,\n\n    xScaleType: PropTypes.string,\n    yScaleType: PropTypes.string,\n\n    /**\n     * Whether or not to invert the x scale\n     */\n    invertXScale: PropTypes.bool,\n    /**\n     * Whether or not to invert the y scale\n     */\n    invertYScale: PropTypes.bool,\n\n    /**\n     * Whether or not to coerce 0 into your x domain\n     */\n    includeXZero: PropTypes.bool,\n    /**\n     * Whether or not to coerce 0 into your y domain\n     */\n    includeYZero: PropTypes.bool,\n\n    /**\n     * Internal top margin, in pixels.\n     */\n    marginTop: PropTypes.number,\n    /**\n     * Internal bottom margin, in pixels.\n     */\n    marginBottom: PropTypes.number,\n    /**\n     * Internal left margin, in pixels.\n     */\n    marginLeft: PropTypes.number,\n    /**\n     * Internal right margin, in pixels.\n     */\n    marginRight: PropTypes.number,\n    /**\n     * Internal top spacing of XYPlot, in pixels.\n     */\n    spacingTop: PropTypes.number,\n    /**\n     * Internal bottom spacing of XYPlot, in pixels.\n     */\n    spacingBottom: PropTypes.number,\n    /**\n     * Internal left spacing of XYPlot, in pixels.\n     */\n    spacingLeft: PropTypes.number,\n    /**\n     * Internal right spacing of XYPlot, in pixels.\n     */\n    spacingRight: PropTypes.number,\n\n    /**\n     * Inline style object to be applied to the parent SVG element.\n     */\n    style: PropTypes.object,\n    /**\n     * Inline style object to be applied to the plot.\n     * This is the inner rect DOM element where the graphs are rendered within the axes.\n     */\n    xyPlotStyle: PropTypes.object,\n    // todo implement padding (helper for spacing)\n    // paddingTop: PropTypes.number,\n    // paddingBottom: PropTypes.number,\n    // paddingLeft: PropTypes.number,\n    // paddingRight: PropTypes.number,\n\n    onMouseMove: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onMouseDown: PropTypes.func,\n    onMouseUp: PropTypes.func,\n\n    /**\n     * Class attribute applied to xy plot\n     */\n    xyPlotClassName: PropTypes.string\n  };\n\n  static defaultProps = {\n    width: 400,\n    height: 250,\n    invertXScale: false,\n    invertYScale: false,\n    includeXZero: false,\n    includeYZero: false,\n    style: {},\n    xyPlotStyle: {},\n    xyPlotClassName: \"\"\n  };\n\n  onXYMouseEvent = (callbackKey, event) => {\n    const callback = this.props[callbackKey];\n    if (!_.isFunction(callback)) return;\n    const options = getMouseOptions(event, this.props);\n    callback(options);\n  };\n  onMouseMove = _.partial(this.onXYMouseEvent, \"onMouseMove\");\n  onMouseDown = _.partial(this.onXYMouseEvent, \"onMouseDown\");\n  onMouseUp = _.partial(this.onXYMouseEvent, \"onMouseUp\");\n  onClick = _.partial(this.onXYMouseEvent, \"onClick\");\n  onMouseEnter = event => this.props.onMouseEnter({ event });\n  onMouseLeave = event => this.props.onMouseLeave({ event });\n\n  render() {\n    const {\n      width,\n      height,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      spacingTop,\n      spacingBottom,\n      spacingLeft,\n      spacingRight,\n      style,\n      xyPlotStyle,\n      xyPlotClassName,\n      // Passed in as prop from resolveXYScales\n      xScale,\n      yScale\n    } = this.props;\n    // subtract margin + spacing from width/height to obtain inner width/height of panel & chart area\n    // panelSize is the area including chart + spacing but NOT margin\n    // chartSize is smaller, chart *only*, not including margin or spacing\n    const panelSize = innerSize(\n      { width, height },\n      {\n        top: marginTop,\n        bottom: marginBottom,\n        left: marginLeft,\n        right: marginRight\n      }\n    );\n    const chartSize = innerSize(panelSize, {\n      top: spacingTop,\n      bottom: spacingBottom,\n      left: spacingLeft,\n      right: spacingRight\n    });\n\n    const handlerNames = [\n      \"onMouseMove\",\n      \"onMouseEnter\",\n      \"onMouseLeave\",\n      \"onMouseDown\",\n      \"onMouseUp\",\n      \"onClick\"\n    ];\n    const handlers = _.fromPairs(\n      handlerNames.map(n => [n, methodIfFuncProp(n, this.props, this)])\n    );\n    const scales = {\n      xScale,\n      yScale\n    };\n\n    // Props to omit since we don't want them to override child props\n    // TODO for v2: Namespace these props to be specific to XYPlot,\n    // but will be an incompatible API change\n    const omittedProps = [\n      \"style\",\n      \"onMouseMove\",\n      \"onMouseEnter\",\n      \"onMouseLeave\"\n    ];\n\n    const xyPlotPropKeys = Object.keys(XYPlot.propTypes).filter(\n      k => omittedProps.indexOf(k) === -1\n    );\n\n    const propsToPass = _.omit(\n      {\n        ..._.pick(this.props, xyPlotPropKeys),\n        ...chartSize,\n        ...scales\n      },\n      omittedProps\n    );\n\n    const className = `rct-xy-plot ${xyPlotClassName}`;\n\n    return (\n      <svg {...{ width, height, className, style }} {...handlers}>\n        <rect className=\"rct-chart-background\" {...{ width, height }} />\n        <g\n          transform={`translate(${marginLeft + spacingLeft}, ${marginTop +\n            spacingTop})`}\n          className=\"rct-chart-inner\"\n        >\n          <rect\n            transform={`translate(${-spacingLeft}, ${-spacingTop})`}\n            className=\"rct-plot-background\"\n            style={xyPlotStyle}\n            {...panelSize}\n          />\n          {React.Children.map(this.props.children, child => {\n            return _.isNull(child) || _.isUndefined(child)\n              ? null\n              : React.cloneElement(child, propsToPass);\n          })}\n        </g>\n      </svg>\n    );\n  }\n}\n\nconst XYPlotResolved = resolveXYScales(XYPlot);\n\nexport default XYPlotResolved;\n"],"file":"XYPlot.js"}