{"version":3,"sources":["src/XYPlot.js"],"names":["indexOfClosestNumberInList","number","list","reduce","closestI","current","i","Math","abs","invertPointScale","scale","rangeValue","rangePoints","domain","map","domainValue","nearestPointIndex","getMouseOptions","event","xScale","yScale","height","width","marginTop","marginBottom","marginLeft","marginRight","chartBB","currentTarget","getBoundingClientRect","outerX","round","clientX","left","outerY","clientY","top","innerX","innerY","chartSize","bottom","right","xScaleType","yScaleType","xValue","inRange","invert","yValue","XYPlot","onXYMouseEvent","callbackKey","callback","props","isFunction","options","onMouseMove","partial","onMouseDown","onMouseUp","onClick","onMouseEnter","onMouseLeave","spacingTop","spacingBottom","spacingLeft","spacingRight","panelSize","handlerNames","handlers","fromPairs","n","propsToPass","omit","className","Children","children","isNull","child","isUndefined","cloneElement","Component","propTypes","xDomain","array","yDomain","func","string","margin","object","paddingTop","paddingBottom","paddingLeft","paddingRight","invertXScale","bool","invertYScale","defaultProps","XYPlotResolved"],"mappings":"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","file":"XYPlot.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nimport resolveXYScales from \"./utils/resolveXYScales\";\nimport { innerSize } from \"./utils/Margin\";\nimport { inferScaleType } from \"./utils/Scale\";\nimport { methodIfFuncProp } from \"./util\";\n\nfunction indexOfClosestNumberInList(number, list) {\n  return list.reduce((closestI, current, i) => {\n    return Math.abs(current - number) < Math.abs(list[closestI] - number)\n      ? i\n      : closestI;\n  }, 0);\n}\n\nfunction invertPointScale(scale, rangeValue) {\n  // shim until d3.scalePoint.invert() is implemented for real\n  // given a value from the output range, returns the *nearest* corresponding value in the input domain\n  const rangePoints = scale.domain().map(domainValue => scale(domainValue));\n  const nearestPointIndex = indexOfClosestNumberInList(rangeValue, rangePoints);\n  return scale.domain()[nearestPointIndex];\n}\n\nfunction getMouseOptions(\n  event,\n  {\n    xScale,\n    yScale,\n    height,\n    width,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight\n  }\n) {\n  const chartBB = event.currentTarget.getBoundingClientRect();\n  const outerX = Math.round(event.clientX - chartBB.left);\n  const outerY = Math.round(event.clientY - chartBB.top);\n  const innerX = outerX - (marginLeft || 0);\n  const innerY = outerY - (marginTop || 0);\n  const chartSize = innerSize(\n    { width, height },\n    {\n      top: marginTop,\n      bottom: marginBottom,\n      left: marginLeft,\n      right: marginRight\n    }\n  );\n  const xScaleType = inferScaleType(xScale);\n  const yScaleType = inferScaleType(yScale);\n\n  const xValue = !_.inRange(\n    innerX,\n    0,\n    chartSize.width /* + padding.left + padding.right */\n  )\n    ? null\n    : xScaleType === \"ordinal\"\n      ? invertPointScale(xScale, innerX)\n      : xScale.invert(innerX);\n  const yValue = !_.inRange(\n    innerY,\n    0,\n    chartSize.height /* + padding.top + padding.bottom */\n  )\n    ? null\n    : yScaleType === \"ordinal\"\n      ? invertPointScale(yScale, innerY)\n      : yScale.invert(innerY);\n\n  return {\n    event,\n    outerX,\n    outerY,\n    innerX,\n    innerY,\n    xValue,\n    yValue,\n    xScale,\n    yScale,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight\n  };\n}\n\nclass XYPlot extends React.Component {\n  static propTypes = {\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    width: PropTypes.number,\n    /**\n     * (outer) width of the chart (SVG element).\n     */\n    height: PropTypes.number,\n    /**\n     * The X and/or Y domains of the data in {x: [...], y: [...]} format.\n     * For numerical scales, this is represented as [min, max] of the data;\n     * for ordinal/categorical scales it is an array of known values ie. ['a', 'b', 'c'].\n     * Automatically determined from data if not passed.\n     */\n    xDomain: PropTypes.array,\n    yDomain: PropTypes.array,\n    /**\n     * d3 scales for the X and Y axes of the chart, in {x, y} object format.\n     * (optional, normally determined automatically by XYPlot)\n     */\n    xScale: PropTypes.func,\n    yScale: PropTypes.func,\n\n    xScaleType: PropTypes.string,\n    yScaleType: PropTypes.string,\n\n    /**\n     *\n     */\n    margin: PropTypes.object,\n    marginTop: PropTypes.number,\n    marginBottom: PropTypes.number,\n    marginLeft: PropTypes.number,\n    marginRight: PropTypes.number,\n\n    // todo spacing & padding...\n    spacingTop: PropTypes.number,\n    spacingBottom: PropTypes.number,\n    spacingLeft: PropTypes.number,\n    spacingRight: PropTypes.number,\n\n    paddingTop: PropTypes.number,\n    paddingBottom: PropTypes.number,\n    paddingLeft: PropTypes.number,\n    paddingRight: PropTypes.number,\n\n    invertXScale: PropTypes.bool,\n    invertYScale: PropTypes.bool,\n\n    onMouseMove: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onMouseDown: PropTypes.func,\n    onMouseUp: PropTypes.func\n  };\n\n  static defaultProps = {\n    width: 400,\n    height: 250,\n    // invertScale: {x: false, y: false},\n    invertXScale: false,\n    invertYScale: false\n    // emptyLabel: \"Unknown\",\n\n    // these values are inferred from data if not provided, therefore empty defaults\n    // scaleType: {},\n    // domain: {},\n    // margin: {},\n    //spacing: {top: 0, bottom: 0, left: 0, right: 0}\n  };\n\n  onXYMouseEvent = (callbackKey, event) => {\n    const callback = this.props[callbackKey];\n    if (!_.isFunction(callback)) return;\n    const options = getMouseOptions(event, this.props);\n    callback(options);\n  };\n  onMouseMove = _.partial(this.onXYMouseEvent, \"onMouseMove\");\n  onMouseDown = _.partial(this.onXYMouseEvent, \"onMouseDown\");\n  onMouseUp = _.partial(this.onXYMouseEvent, \"onMouseUp\");\n  onClick = _.partial(this.onXYMouseEvent, \"onClick\");\n  onMouseEnter = event => this.props.onMouseEnter({ event });\n  onMouseLeave = event => this.props.onMouseLeave({ event });\n\n  render() {\n    const {\n      width,\n      height,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      spacingTop,\n      spacingBottom,\n      spacingLeft,\n      spacingRight\n    } = this.props;\n    // subtract margin + spacing from width/height to obtain inner width/height of panel & chart area\n    // panelSize is the area including chart + spacing but NOT margin\n    // chartSize is smaller, chart *only*, not including margin or spacing\n    const panelSize = innerSize(\n      { width, height },\n      {\n        top: marginTop,\n        bottom: marginBottom,\n        left: marginLeft,\n        right: marginRight\n      }\n    );\n    const chartSize = innerSize(panelSize, {\n      top: spacingTop,\n      bottom: spacingBottom,\n      left: spacingLeft,\n      right: spacingRight\n    });\n\n    const handlerNames = [\n      \"onMouseMove\",\n      \"onMouseEnter\",\n      \"onMouseLeave\",\n      \"onMouseDown\",\n      \"onMouseUp\",\n      \"onClick\"\n    ];\n    const handlers = _.fromPairs(\n      handlerNames.map(n => [n, methodIfFuncProp(n, this.props, this)])\n    );\n\n    const propsToPass = {\n      ..._.omit(this.props, [\"children\"]),\n      ...chartSize\n    };\n\n    return (\n      <svg {...{ width, height, className: \"xy-plot\" }} {...handlers}>\n        <rect className=\"chart-background\" {...{ width, height }} />\n        <g\n          transform={`translate(${marginLeft + spacingLeft}, ${marginTop +\n            spacingTop})`}\n          className=\"chart-inner\"\n        >\n          <rect\n            transform={`translate(${-spacingLeft}, ${-spacingTop})`}\n            className=\"plot-background\"\n            {...panelSize}\n          />\n          {React.Children.map(this.props.children, child => {\n            return _.isNull(child) || _.isUndefined(child)\n              ? null\n              : React.cloneElement(child, propsToPass);\n          })}\n        </g>\n      </svg>\n    );\n  }\n}\n\nconst XYPlotResolved = resolveXYScales(XYPlot);\n\nexport default XYPlotResolved;\n"]}