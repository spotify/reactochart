{"version":3,"sources":["src/LineChart.js"],"names":["CustomPropTypes","LineChart","getHovered","x","y","closestDataIndex","state","bisectX","props","data","initBisector","nextProps","nextState","setState","d","left","xScale","yScale","lineStyle","lineClassName","points","map","i","pathStr","pointsToPathStr","name","Component","propTypes","array","isRequired","valueOrAccessor","object","string","func","defaultProps","command","join"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;IAAYA,e;;AACZ;;AACA;;;;;;;;;;;;;;IAEqBC,S;;;;;;;;;;;;;;4LAmDnBC,U,GAAa,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACrB,UAAMC,mBAAmB,MAAKC,KAAL,CAAWC,OAAX,CAAmB,MAAKC,KAAL,CAAWC,IAA9B,EAAoCN,CAApC,CAAzB;AACA,aAAO,MAAKK,KAAL,CAAWC,IAAX,CAAgBJ,gBAAhB,CAAP;AACD,K;;;;;yCAlBoB;AACnB,WAAKK,YAAL,CAAkB,KAAKF,KAAvB;AACD;;;8CACyBG,S,EAAW;AACnC,WAAKD,YAAL,CAAkBC,SAAlB;AACD;;;0CAEqBA,S,EAAWC,S,EAAW;AAC1C,aAAO,CAAC,4BAAa,KAAKJ,KAAlB,EAAyBG,SAAzB,EAAoC,CAAC,WAAD,EAAc,eAAd,CAApC,CAAR;AACD;;;iCAEYH,K,EAAO;AAClB,WAAKK,QAAL,CAAc,EAAEN,SAAS,iBAAS;AAAA,iBAAK,oBAASC,MAAML,CAAf,EAAkBW,CAAlB,CAAL;AAAA,SAAT,EAAoCC,IAA/C,EAAd;AACD;;;6BAOQ;AAAA,mBAC0D,KAAKP,KAD/D;AAAA,UACCC,IADD,UACCA,IADD;AAAA,UACOO,MADP,UACOA,MADP;AAAA,UACeC,MADf,UACeA,MADf;AAAA,UACuBd,CADvB,UACuBA,CADvB;AAAA,UAC0BC,CAD1B,UAC0BA,CAD1B;AAAA,UAC6Bc,SAD7B,UAC6BA,SAD7B;AAAA,UACwCC,aADxC,UACwCA,aADxC;;;AAGP,UAAMC,SAAS,iBAAEC,GAAF,CAAMZ,IAAN,EAAY,UAACK,CAAD,EAAIQ,CAAJ;AAAA,eAAU,CACnCN,OAAO,oBAASb,CAAT,EAAYW,CAAZ,EAAeQ,CAAf,CAAP,CADmC,EAEnCL,OAAO,oBAASb,CAAT,EAAYU,CAAZ,EAAeQ,CAAf,CAAP,CAFmC,CAAV;AAAA,OAAZ,CAAf;AAIA,UAAMC,UAAUC,gBAAgBJ,MAAhB,CAAhB;;AAEA,aACE;AAAA;AAAA,UAAG,WAAc,KAAKZ,KAAL,CAAWiB,IAAzB,SAAiCN,aAApC;AACE,gDAAM,GAAGI,OAAT,EAAkB,OAAOL,SAAzB;AADF,OADF;AAKD;;;;EAtEoC,gBAAMQ,S;;AAAxBzB,S,CACZ0B,S,GAAY;AACjB;;;AAGAlB,QAAM,oBAAUmB,KAAV,CAAgBC,UAJL;AAKjB;;;AAGA1B,KAAGH,gBAAgB8B,eARF;AASjB;;;AAGA1B,KAAGJ,gBAAgB8B,eAZF;AAajB;;;AAGAZ,aAAW,oBAAUa,MAhBJ;AAiBjB;;;AAGAZ,iBAAe,oBAAUa,MApBR;AAqBjB;;;AAGAhB,UAAQ,oBAAUiB,IAxBD;AAyBjB;;;AAGAhB,UAAQ,oBAAUgB;AA5BD,C;AADAhC,S,CA+BZiC,Y,GAAe;AACpBhB,aAAW,EADS;AAEpBC,iBAAe;AAFK,C;kBA/BHlB,S;;;AAyErB,SAASuB,eAAT,CAAyBJ,MAAzB,EAAiC;AAC/B;AACA;AACA;AACA;AACA,SAAO,iBAAEC,GAAF,CAAMD,MAAN,EAAc,iBAASE,CAAT,EAAe;AAAA;AAAA,QAAbnB,CAAa;AAAA,QAAVC,CAAU;;AAClC,QAAM+B,UAAUb,MAAM,CAAN,GAAU,GAAV,GAAgB,GAAhC;AACA,WAAUa,OAAV,SAAqBhC,CAArB,SAA0BC,CAA1B;AACD,GAHM,EAGJgC,IAHI,CAGC,GAHD,CAAP;AAID","file":"LineChart.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { bisector } from \"d3\";\nimport shallowEqual from \"./utils/shallowEqual\";\nimport PropTypes from \"prop-types\";\n\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport { getValue } from \"./utils/Data\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\n\nexport default class LineChart extends React.Component {\n  static propTypes = {\n    /**\n     * the array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Accessor function for line X values, called once per datum, or a single X value to be used for the entire line.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for line Y values, called once per datum, or a single Y value to be used for the entire line.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Inline style object to be applied to the line path\n     */\n    lineStyle: PropTypes.object,\n    /**\n     * Class attribute to be applied to the line path\n     */\n    lineClassName: PropTypes.string,\n    /**\n     * D3 scale for X axis - provided by XYPlot\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot\n     */\n    yScale: PropTypes.func\n  };\n  static defaultProps = {\n    lineStyle: {},\n    lineClassName: \"\"\n  };\n\n  componentWillMount() {\n    this.initBisector(this.props);\n  }\n  componentWillReceiveProps(nextProps) {\n    this.initBisector(nextProps);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !xyPropsEqual(this.props, nextProps, [\"lineStyle\", \"lineClassName\"]);\n  }\n\n  initBisector(props) {\n    this.setState({ bisectX: bisector(d => getValue(props.x, d)).left });\n  }\n\n  getHovered = (x, y) => {\n    const closestDataIndex = this.state.bisectX(this.props.data, x);\n    return this.props.data[closestDataIndex];\n  };\n\n  render() {\n    const { data, xScale, yScale, x, y, lineStyle, lineClassName } = this.props;\n\n    const points = _.map(data, (d, i) => [\n      xScale(getValue(x, d, i)),\n      yScale(getValue(y, d, i))\n    ]);\n    const pathStr = pointsToPathStr(points);\n\n    return (\n      <g className={`${this.props.name} ${lineClassName}`}>\n        <path d={pathStr} style={lineStyle} />\n      </g>\n    );\n  }\n}\n\nfunction pointsToPathStr(points) {\n  // takes array of points in [[x, y], [x, y]... ] format\n  // returns SVG path string in \"M X Y L X Y\" format\n  // https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths#Line_commands\n  // todo: replace this with d3 path generator\n  return _.map(points, ([x, y], i) => {\n    const command = i === 0 ? \"M\" : \"L\";\n    return `${command} ${x} ${y}`;\n  }).join(\" \");\n}\n"]}