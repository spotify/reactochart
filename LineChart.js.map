{"version":3,"sources":["src/LineChart.js"],"names":["LineChart","React","Component","x","y","closestDataIndex","state","bisectX","props","data","componentWillMount","initBisector","componentWillReceiveProps","nextProps","shouldComponentUpdate","setState","d","left","render","xScale","yScale","curve","lineStyle","lineClassName","pathStr","i","PropTypes","array","isRequired","CustomPropTypes","valueOrAccessor","object","string","func","curveLinear"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;;;AAGe,MAAMA,SAAN,SAAwBC,eAAMC,SAA9B,CAAwC;AAAA;AAAA;;AAAA,wCAwDxC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,YAAMC,gBAAgB,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmB,KAAKC,KAAL,CAAWC,IAA9B,EAAoCN,CAApC,CAAzB;AACA,aAAO,KAAKK,KAAL,CAAWC,IAAX,CAAgBJ,gBAAhB,CAAP;AACD,KA3DoD;AAAA;;AAyCrDK,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,YAAL,CAAkB,KAAKH,KAAvB;AACD;;AACDI,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,SAAKF,YAAL,CAAkBE,SAAlB;AACD;;AAEDC,EAAAA,qBAAqB,CAACD,SAAD,EAAY;AAC/B,WAAO,CAAC,2BAAa,KAAKL,KAAlB,EAAyBK,SAAzB,EAAoC,CAAC,WAAD,EAAc,eAAd,CAApC,CAAR;AACD;;AAEDF,EAAAA,YAAY,CAACH,KAAD,EAAQ;AAClB,SAAKO,QAAL,CAAc;AAAER,MAAAA,OAAO,EAAE,iBAASS,CAAC,IAAI,oBAASR,KAAK,CAACL,CAAf,EAAkBa,CAAlB,CAAd,EAAoCC;AAA/C,KAAd;AACD;;AAODC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJT,MAAAA,IADI;AAEJU,MAAAA,MAFI;AAGJC,MAAAA,MAHI;AAIJjB,MAAAA,CAJI;AAKJC,MAAAA,CALI;AAMJiB,MAAAA,KANI;AAOJC,MAAAA,SAPI;AAQJC,MAAAA;AARI,QASF,KAAKf,KATT;AAWA,UAAMgB,OAAO,GAAG,eACbH,KADa,CACPA,KADO,EAEblB,CAFa,CAEX,CAACa,CAAD,EAAIS,CAAJ,KAAUN,MAAM,CAAC,oBAAShB,CAAT,EAAYa,CAAZ,EAAeS,CAAf,CAAD,CAFL,EAGbrB,CAHa,CAGX,CAACY,CAAD,EAAIS,CAAJ,KAAUL,MAAM,CAAC,oBAAShB,CAAT,EAAYY,CAAZ,EAAeS,CAAf,CAAD,CAHL,EAG0BhB,IAH1B,CAAhB;AAKA,WACE;AAAG,MAAA,SAAS,2BAAoBc,aAApB;AAAZ,OACE;AAAM,MAAA,SAAS,iBAAf;AAAkC,MAAA,CAAC,EAAEC,OAArC;AAA8C,MAAA,KAAK,EAAEF;AAArD,MADF,CADF;AAKD;;AAnFoD;;;;gBAAlCtB,S,eACA;AACjB;;;AAGAS,EAAAA,IAAI,EAAEiB,mBAAUC,KAAV,CAAgBC,UAJL;;AAKjB;;;AAGAzB,EAAAA,CAAC,EAAE0B,eAAe,CAACC,eARF;;AASjB;;;AAGA1B,EAAAA,CAAC,EAAEyB,eAAe,CAACC,eAZF;;AAajB;;;AAGAR,EAAAA,SAAS,EAAEI,mBAAUK,MAhBJ;;AAiBjB;;;AAGAR,EAAAA,aAAa,EAAEG,mBAAUM,MApBR;;AAqBjB;;;AAGAb,EAAAA,MAAM,EAAEO,mBAAUO,IAxBD;;AAyBjB;;;AAGAb,EAAAA,MAAM,EAAEM,mBAAUO,IA5BD;;AA6BjB;;;AAGAZ,EAAAA,KAAK,EAAEK,mBAAUO;AAhCA,C;;gBADAjC,S,kBAmCG;AACpBsB,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,aAAa,EAAE,EAFK;AAGpBF,EAAAA,KAAK,EAAEa;AAHa,C","sourcesContent":["import { bisector, line, curveLinear } from \"d3\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport * as CustomPropTypes from \"./utils/CustomPropTypes\";\nimport { getValue } from \"./utils/Data\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\n\n/**\n * `LineChart` displays data a series of points connected by straight line segments.\n */\nexport default class LineChart extends React.Component {\n  static propTypes = {\n    /**\n     * Array of data objects\n     */\n    data: PropTypes.array.isRequired,\n    /**\n     * Accessor function for line X values, called once per datum, or a single value to be used for the entire line.\n     */\n    x: CustomPropTypes.valueOrAccessor,\n    /**\n     * Accessor function for line Y values, called once per datum, or a single value to be used for the entire line.\n     */\n    y: CustomPropTypes.valueOrAccessor,\n    /**\n     * Inline style object to be applied to the line path.\n     */\n    lineStyle: PropTypes.object,\n    /**\n     * Class attribute to be applied to the line path.\n     */\n    lineClassName: PropTypes.string,\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * D3 scale for Y axis - provided by XYPlot.\n     */\n    yScale: PropTypes.func,\n    /**\n     * D3 curve for path generation\n     */\n    curve: PropTypes.func\n  };\n  static defaultProps = {\n    lineStyle: {},\n    lineClassName: \"\",\n    curve: curveLinear\n  };\n\n  componentWillMount() {\n    this.initBisector(this.props);\n  }\n  componentWillReceiveProps(nextProps) {\n    this.initBisector(nextProps);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return !xyPropsEqual(this.props, nextProps, [\"lineStyle\", \"lineClassName\"]);\n  }\n\n  initBisector(props) {\n    this.setState({ bisectX: bisector(d => getValue(props.x, d)).left });\n  }\n\n  getHovered = (x, y) => {\n    const closestDataIndex = this.state.bisectX(this.props.data, x);\n    return this.props.data[closestDataIndex];\n  };\n\n  render() {\n    const {\n      data,\n      xScale,\n      yScale,\n      x,\n      y,\n      curve,\n      lineStyle,\n      lineClassName\n    } = this.props;\n\n    const pathStr = line()\n      .curve(curve)\n      .x((d, i) => xScale(getValue(x, d, i)))\n      .y((d, i) => yScale(getValue(y, d, i)))(data);\n\n    return (\n      <g className={`rct-line-chart ${lineClassName}`}>\n        <path className={`rct-line-path`} d={pathStr} style={lineStyle} />\n      </g>\n    );\n  }\n}\n"],"file":"LineChart.js"}