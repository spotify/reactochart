{"version":3,"sources":["src/XTicks.js"],"names":["XTicks","React","Component","getTickDomain","props","xScale","_","defaults","defaultProps","xTickDomain","getMargin","tickLength","position","placement","zeroMargin","marginTop","marginBottom","marginLeft","marginRight","capitalize","render","height","tickCount","tickStyle","tickClassName","spacingTop","spacingBottom","ticks","className","transform","map","tick","i","x1","y2","x2","y1","style","key","PropTypes","func","oneOf","array","number","object","string","nice","bool"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { getScaleTicks, getTickDomain } from \"./utils/Scale\";\n\nexport default class XTicks extends React.Component {\n  static propTypes = {\n    /**\n     * D3 scale for X axis - provided by XYPlot.\n     */\n    xScale: PropTypes.func,\n    /**\n     * Position of x ticks. Accepted options are \"bottom\" or \"top\".\n     */\n    position: PropTypes.oneOf([\"bottom\", \"top\"]),\n    /**\n     * Placement of ticks in regards to the x axis. Accepted options are \"above\" or \"below\".\n     */\n    placement: PropTypes.oneOf([\"above\", \"below\"]),\n    /**\n     * Custom ticks to display.\n     */\n    ticks: PropTypes.array,\n    /**\n     * Number of ticks on axis.\n     */\n    tickCount: PropTypes.number,\n    tickLength: PropTypes.number,\n    /**\n     * Inline style object applied to each tick.\n     */\n    tickStyle: PropTypes.object,\n    /**\n     * Class attribute to be applied to each tick.\n     */\n    tickClassName: PropTypes.string,\n    /**\n     * Spacing - provided by XYPlot and used to determine the placement of the ticks given spacingTop.\n     */\n    spacingTop: PropTypes.number,\n    /**\n     * Spacing - provided by XYPlot and used to determine the placement of the ticks given spacingBottom.\n     */\n    spacingBottom: PropTypes.number,\n    /**\n     * Round ticks to capture extent of given x domain from XYPlot.\n     */\n    nice: PropTypes.bool\n  };\n  static defaultProps = {\n    position: \"bottom\",\n    nice: true,\n    tickLength: 5,\n    tickStyle: {},\n    tickClassName: \"\"\n  };\n\n  static getTickDomain(props) {\n    if (!props.xScale) return;\n    props = _.defaults({}, props, XTicks.defaultProps);\n    return { xTickDomain: getTickDomain(props.xScale, props) };\n  }\n\n  static getMargin(props) {\n    const { tickLength, position } = _.defaults({}, props, XTicks.defaultProps);\n    const placement =\n      props.placement || (position === \"top\" ? \"above\" : \"below\");\n    const zeroMargin = {\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0\n    };\n\n    if (\n      (position === \"bottom\" && placement === \"above\") ||\n      (position === \"top\" && placement === \"below\")\n    )\n      return zeroMargin;\n\n    return _.defaults(\n      { [`margin${_.capitalize(position)}`]: tickLength || 0 },\n      zeroMargin\n    );\n  }\n\n  render() {\n    const {\n      height,\n      xScale,\n      tickCount,\n      position,\n      tickLength,\n      tickStyle,\n      tickClassName,\n      spacingTop,\n      spacingBottom\n    } = this.props;\n\n    const placement =\n      this.props.placement || (position === \"top\" ? \"above\" : \"below\");\n    const ticks = this.props.ticks || getScaleTicks(xScale, null, tickCount);\n    const className = `rct-chart-tick rct-chart-tick-x ${tickClassName || \"\"}`;\n    const transform =\n      position === \"bottom\"\n        ? `translate(0, ${height + (spacingBottom || 0)})`\n        : `translate(0, ${-spacingTop || 0})`;\n\n    return (\n      <g className=\"rct-chart-ticks-x\" transform={transform}>\n        {ticks.map((tick, i) => {\n          const x1 = xScale(tick);\n          const y2 = placement === \"above\" ? -tickLength : tickLength;\n\n          return (\n            <line\n              {...{\n                x1,\n                x2: x1,\n                y1: 0,\n                y2,\n                className,\n                style: tickStyle,\n                key: `tick-${i}`\n              }}\n            />\n          );\n        })}\n      </g>\n    );\n  }\n}\n"],"file":"XTicks.js"}