{"version":3,"sources":["src/YAxisTitle.js"],"names":["YAxisTitle","React","Component","getMargin","props","_","defaults","defaultProps","distance","position","rotate","placement","zeroMargin","marginTop","marginBottom","marginLeft","marginRight","title","children","style","measured","assign","text","marginValue","Math","ceil","height","value","width","render","alignment","spacingLeft","spacingRight","posX","translateX","translateY","textAnchor","dy","PropTypes","number","oneOf","bool","object","undefined","fontFamily","fontSize","fontWeight","lineHeight"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport measureText from \"./utils/measureText\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nexport default class YAxisTitle extends React.Component {\n  static propTypes = {\n    height: PropTypes.number,\n    width: PropTypes.number,\n    /**\n     * Title distance from Y Axis\n     */\n    distance: PropTypes.number,\n    /**\n     * Position of title in regards to the y axis. Accepted options are \"left\" or \"right\"\n     */\n    position: PropTypes.oneOf([\"left\", \"right\"]),\n    alignment: PropTypes.oneOf([\"top\", \"middle\", \"bottom\"]),\n    /**\n     * Placement of title in regards to the y axis. Accepted options are \"before\" or \"after\"\n     */\n    placement: PropTypes.oneOf([\"before\", \"after\"]),\n    rotate: PropTypes.bool,\n    /**\n     * Object declaring styles for label.\n     *\n     * Disclaimer: style will merge its defaults with the given style prop\n     * in order to ensure that our collision library measureText is able to calculate the\n     * smallest amount of possible collisions along the axis. It's therefore dependent on\n     * fontFamily, size and fontStyle to always be passed in. If you're looking to have a centralized\n     * stylesheet, we suggest creating a styled title component that wraps YAxisTitle with your preferred styles.\n     */\n    style: PropTypes.object,\n    /**\n     * Spacing - provided by XYPlot\n     */\n    spacingLeft: PropTypes.number,\n    /**\n     * Spacing - provided by XYPlot\n     */\n    spacingRight: PropTypes.number\n  };\n\n  static defaultProps = {\n    height: 250,\n    width: 400,\n    distance: 5,\n    position: \"left\",\n    alignment: \"middle\",\n    placement: undefined,\n    rotate: true,\n    style: {\n      fontFamily: \"Helvetica, sans-serif\",\n      fontSize: \"24px\",\n      fontWeight: \"bold\",\n      lineHeight: 1\n    },\n    spacingLeft: 0,\n    spacingRight: 0\n  };\n\n  static getMargin(props) {\n    props = _.defaults({}, props, YAxisTitle.defaultProps);\n    const { distance, position, rotate } = props;\n    const placement =\n      props.placement || (position === \"left\" ? \"before\" : \"after\");\n    const zeroMargin = {\n      marginTop: 0,\n      marginBottom: 0,\n      marginLeft: 0,\n      marginRight: 0\n    };\n\n    if (\n      (position === \"left\" && placement === \"after\") ||\n      (position === \"right\" && placement === \"before\")\n    )\n      return zeroMargin;\n\n    const title = props.title || props.children;\n    const style = _.defaults(props.style, YAxisTitle.defaultProps.style);\n    const measured = measureText(_.assign({ text: title }, style));\n\n    const marginValue =\n      distance +\n      Math.ceil(rotate ? measured.height.value : measured.width.value);\n\n    return position === \"left\"\n      ? { ...zeroMargin, marginLeft: marginValue }\n      : { ...zeroMargin, marginRight: marginValue };\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      distance,\n      position,\n      alignment,\n      style,\n      spacingLeft,\n      spacingRight\n    } = this.props;\n    const title = this.props.title || this.props.children;\n    const placement =\n      this.props.placement || (position === \"left\" ? \"before\" : \"after\");\n\n    const rotate = this.props.rotate ? -90 : 0;\n    const posX = position === \"right\" ? width + spacingRight : -spacingLeft;\n    const translateX = posX + (placement === \"before\" ? -distance : distance);\n    const translateY =\n      alignment === \"middle\" ? height / 2 : alignment === \"bottom\" ? height : 0;\n    const textAnchor =\n      rotate && alignment === \"top\"\n        ? \"end\"\n        : rotate && alignment === \"middle\"\n          ? \"middle\"\n          : rotate && alignment === \"bottom\"\n            ? \"start\"\n            : placement === \"before\"\n              ? \"end\"\n              : \"start\";\n    const dy =\n      rotate && placement == \"before\"\n        ? \"-0.2em\"\n        : rotate\n          ? \"0.8em\"\n          : alignment === \"top\"\n            ? \"0.8em\"\n            : alignment === \"middle\"\n              ? \"0.3em\"\n              : null;\n\n    return (\n      <g transform={`translate(${translateX},${translateY})`}>\n        <text\n          style={{ ...style, textAnchor }}\n          transform={`rotate(${rotate})`}\n          dy={dy}\n        >\n          {title}\n        </text>\n      </g>\n    );\n  }\n}\n"],"file":"YAxisTitle.js"}