{"version":3,"sources":["src/XAxis.js"],"names":["XAxis","nextProps","nextState","props","width","height","position","spacingTop","spacingBottom","spacingLeft","spacingRight","tickLength","titleDistance","labelDistance","showTitle","showLabels","showTicks","showGrid","ticksProps","gridProps","labelsProps","titleProps","distance","labelsMargin","getMargin","upperFirst","axisLineY","axisLineWidth","xScale","defaults","defaultProps","xTickDomain","margins","push","title","Component","propTypes","func","number","string","placement","nice","bool","ticks","array","tickCount","titleAlign","titleRotate","titleStyle","object","labelClassName","labelStyle","labelFormat","oneOfType","labelFormats","labels","tickClassName","tickStyle","gridLineClassName","gridLineStyle","onMouseEnterLabel","onMouseMoveLabel","onMouseLeaveLabel"],"mappings":"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","file":"XAxis.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport shallowEqual from \"./utils/shallowEqual\";\nimport PropTypes from \"prop-types\";\n\nimport { getTickDomain, scaleEqual } from \"./utils/Scale\";\nimport { sumMargins } from \"./utils/Margin\";\nimport { getAxisChildProps } from \"./utils/Axis\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\n\nimport XTicks from \"./XTicks\";\nimport XGrid from \"./XGrid\";\nimport XAxisLabels from \"./XAxisLabels\";\nimport XAxisTitle from \"./XAxisTitle\";\n\nexport default class XAxis extends React.Component {\n  static propTypes = {\n    xScale: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    position: PropTypes.string,\n    placement: PropTypes.string,\n    nice: PropTypes.bool,\n    ticks: PropTypes.array,\n    tickCount: PropTypes.number,\n    spacingTop: PropTypes.number,\n    spacingBottom: PropTypes.number,\n    spacingLeft: PropTypes.number,\n    spacingRight: PropTypes.number,\n\n    showTitle: PropTypes.bool,\n    showLabels: PropTypes.bool,\n    showTicks: PropTypes.bool,\n    showGrid: PropTypes.bool,\n\n    title: PropTypes.string,\n    titleDistance: PropTypes.number,\n    titleAlign: PropTypes.string,\n    titleRotate: PropTypes.bool,\n    titleStyle: PropTypes.object,\n\n    labelDistance: PropTypes.number,\n    labelClassName: PropTypes.string,\n    labelStyle: PropTypes.object,\n    labelFormat: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    labelFormats: PropTypes.array,\n    labels: PropTypes.array,\n\n    tickLength: PropTypes.number,\n    tickClassName: PropTypes.string,\n    tickStyle: PropTypes.object,\n\n    gridLineClassName: PropTypes.string,\n    gridLineStyle: PropTypes.object,\n\n    onMouseEnterLabel: PropTypes.func,\n    onMouseMoveLabel: PropTypes.func,\n    onMouseLeaveLabel: PropTypes.func\n  };\n\n  static defaultProps = {\n    width: 400,\n    height: 250,\n    position: \"bottom\",\n    nice: true,\n    showTitle: true,\n    showLabels: true,\n    showTicks: true,\n    showGrid: true,\n    tickLength: 5,\n    labelDistance: 3,\n    titleDistance: 5,\n    spacingTop: 0,\n    spacingBottom: 0,\n    spacingLeft: 0,\n    spacingRight: 0\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !xyPropsEqual(this.props, nextProps);\n  }\n\n  static getTickDomain(props) {\n    if (!props.xScale) return;\n    props = _.defaults({}, props, XAxis.defaultProps);\n    return { xTickDomain: getTickDomain(props.xScale, props) };\n  }\n\n  static getMargin(props) {\n    // todo figure out margin if labels change after margin?\n    const { ticksProps, labelsProps, titleProps } = getAxisChildProps(props);\n    let margins = [];\n\n    if (props.showTicks) margins.push(XTicks.getMargin(ticksProps));\n\n    if (props.showTitle && props.title)\n      margins.push(XAxisTitle.getMargin(titleProps));\n\n    if (props.showLabels) margins.push(XAxisLabels.getMargin(labelsProps));\n\n    return sumMargins(margins, \"margin\");\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      position,\n      spacingTop,\n      spacingBottom,\n      spacingLeft,\n      spacingRight,\n      tickLength,\n      titleDistance,\n      labelDistance,\n      showTitle,\n      showLabels,\n      showTicks,\n      showGrid\n    } = this.props;\n\n    const {\n      ticksProps,\n      gridProps,\n      labelsProps,\n      titleProps\n    } = getAxisChildProps(this.props);\n\n    labelsProps.distance = labelDistance + (showTicks ? tickLength : 0);\n\n    if (showTitle && showLabels) {\n      // todo optimize so we don't generate labels twice\n      const labelsMargin = XAxisLabels.getMargin(labelsProps);\n      titleProps.distance =\n        titleDistance + labelsMargin[`margin${_.upperFirst(position)}`];\n    } else if (showTitle && showTicks) {\n      titleProps.distance = titleDistance + tickLength;\n    }\n\n    const axisLineY =\n      position === \"bottom\" ? height + spacingBottom : -spacingTop;\n    // `width` is width of inner chart *not* including spacing - add spacing to figure out where to draw line\n    const axisLineWidth = width + spacingLeft + spacingRight;\n\n    return (\n      <g className=\"chart-axis chart-axis-x\">\n        {showGrid ? <XGrid {...gridProps} /> : null}\n\n        {showTicks ? <XTicks {...ticksProps} /> : null}\n\n        {showLabels ? <XAxisLabels {...labelsProps} /> : null}\n\n        {showTitle ? <XAxisTitle {...titleProps} /> : null}\n\n        <line\n          className=\"chart-axis-line chart-axis-line-x\"\n          x1={-spacingLeft}\n          x2={width + spacingRight}\n          y1={axisLineY}\n          y2={axisLineY}\n        />\n      </g>\n    );\n  }\n}\n"]}