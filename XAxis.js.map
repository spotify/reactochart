{"version":3,"sources":["src/XAxis.js"],"names":["getMouseOptions","getMouseAxisOptions","bind","XAxis","React","Component","event","onMouseMoveAxis","xScale","props","_","isFunction","options","onMouseEnterAxis","onMouseLeaveAxis","onMouseClickAxis","shouldComponentUpdate","nextProps","nextState","getTickDomain","defaults","defaultProps","xTickDomain","getMargin","ticksProps","labelsProps","titleProps","margins","showTicks","push","XTicks","showTitle","title","XAxisTitle","showLabels","XAxisLabels","render","width","height","position","spacingTop","spacingBottom","spacingLeft","spacingRight","tickLength","titleDistance","labelDistance","showGrid","showLine","lineStyle","gridProps","distance","labelsMargin","upperFirst","axisLineY","handleOnMouseMove","handleOnMouseEnter","handleOnMouseLeave","handleOnClick","PropTypes","func","number","string","placement","nice","bool","ticks","array","tickCount","titleAlign","titleRotate","titleStyle","object","labelClassName","labelStyle","oneOfType","labelFormat","labelFormats","labels","labelOffset","tickClassName","tickStyle","gridLineClassName","gridLineStyle","onMouseClickLabel","onMouseEnterLabel","onMouseMoveLabel","onMouseLeaveLabel"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { getAxisChildProps, getMouseAxisOptions } from \"./utils/Axis\";\nimport { sumMargins } from \"./utils/Margin\";\nimport { getTickDomain, inferScaleType, invertPointScale } from \"./utils/Scale\";\nimport xyPropsEqual from \"./utils/xyPropsEqual\";\nimport XAxisLabels from \"./XAxisLabels\";\nimport XAxisTitle from \"./XAxisTitle\";\nimport XGrid from \"./XGrid\";\nimport XTicks from \"./XTicks\";\n\nconst getMouseOptions = getMouseAxisOptions.bind(null, \"x\");\n\n/**\n * `XAxis` is the horizontal axis of the chart. `XAxis` is a wrapper around `XGrid`, `XTicks`,\n * `XAxisLabels`, and `XAxisTitle`. See their respective docs for prop documentation.\n */\nexport default class XAxis extends React.Component {\n  static propTypes = {\n    xScale: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    position: PropTypes.string,\n    placement: PropTypes.string,\n    /**\n     * Extends the x domain to start and end on rounded values,\n     * guaranteeing the original domain will be covered.\n     * See d3 docs for more information\n     */\n    nice: PropTypes.bool,\n    ticks: PropTypes.array,\n    tickCount: PropTypes.number,\n    /**\n     * Internal top spacing of XAxis, in pixels.\n     */\n    spacingTop: PropTypes.number,\n    /**\n     * Internal bottom spacing of XAxis, in pixels.\n     */\n    spacingBottom: PropTypes.number,\n    /**\n     * Internal left spacing of XAxis, in pixels.\n     */\n    spacingLeft: PropTypes.number,\n    /**\n     * Internal right spacing of XAxis, in pixels.\n     */\n    spacingRight: PropTypes.number,\n\n    showTitle: PropTypes.bool,\n    showLabels: PropTypes.bool,\n    showTicks: PropTypes.bool,\n    showGrid: PropTypes.bool,\n\n    title: PropTypes.string,\n    titleDistance: PropTypes.number,\n    titleAlign: PropTypes.string,\n    titleRotate: PropTypes.bool,\n    titleStyle: PropTypes.object,\n\n    labelDistance: PropTypes.number,\n    labelClassName: PropTypes.string,\n    labelStyle: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    labelFormat: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    labelFormats: PropTypes.array,\n    labels: PropTypes.array,\n    /**\n     * Adds horizontal offset (along the XAxis) to the labels\n     */\n    labelOffset: PropTypes.number,\n\n    tickLength: PropTypes.number,\n    tickClassName: PropTypes.string,\n    tickStyle: PropTypes.object,\n\n    gridLineClassName: PropTypes.string,\n    gridLineStyle: PropTypes.object,\n\n    onMouseClickLabel: PropTypes.func,\n    onMouseEnterLabel: PropTypes.func,\n    onMouseMoveLabel: PropTypes.func,\n    onMouseLeaveLabel: PropTypes.func,\n\n    /**\n     * `mouseenter` event handler callback, called when user's mouse enters the x axis.\n     */\n    onMouseEnterAxis: PropTypes.func,\n    /**\n     * `mouseleave` event handler callback, called when user's mouse leaves the x axis.\n     */\n    onMouseLeaveAxis: PropTypes.func,\n    /**\n     * `mousemove` event handler callback, called when user's mouse moves within the x axis.\n     */\n    onMouseMoveAxis: PropTypes.func,\n    /**\n     * `click` event handler callback, called when user's mouse clicks on the x axis.\n     */\n    onMouseClickAxis: PropTypes.func,\n\n    /**\n     * Show X Axis line\n     */\n    showLine: PropTypes.bool,\n    /**\n     * Inline style object to be applied to the X Axis line\n     */\n    lineStyle: PropTypes.object\n  };\n\n  static defaultProps = {\n    width: 400,\n    height: 250,\n    position: \"bottom\",\n    nice: true,\n    showTitle: true,\n    showLabels: true,\n    showTicks: true,\n    showGrid: true,\n    tickLength: 5,\n    labelDistance: 3,\n    titleDistance: 5,\n    spacingTop: 0,\n    spacingBottom: 0,\n    spacingLeft: 0,\n    spacingRight: 0,\n    showLine: true,\n    lineStyle: {}\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !xyPropsEqual(this.props, nextProps);\n  }\n\n  static getTickDomain(props) {\n    if (!props.xScale) return;\n    props = _.defaults({}, props, XAxis.defaultProps);\n    return { xTickDomain: getTickDomain(props.xScale, props) };\n  }\n\n  static getMargin(props) {\n    const { ticksProps, labelsProps, titleProps } = getAxisChildProps(props);\n    let margins = [];\n\n    if (props.showTicks) margins.push(XTicks.getMargin(ticksProps));\n\n    if (props.showTitle && props.title)\n      margins.push(XAxisTitle.getMargin(titleProps));\n\n    if (props.showLabels) margins.push(XAxisLabels.getMargin(labelsProps));\n\n    return sumMargins(margins, \"margin\");\n  }\n\n  handleOnMouseMove = event => {\n    const { onMouseMoveAxis, xScale } = this.props;\n\n    if (!_.isFunction(onMouseMoveAxis)) {\n      return;\n    }\n\n    const options = getMouseOptions(event, xScale);\n    onMouseMoveAxis(options);\n  };\n\n  handleOnMouseEnter = event => {\n    const { onMouseEnterAxis, xScale } = this.props;\n\n    if (!_.isFunction(onMouseEnterAxis)) {\n      return;\n    }\n\n    const options = getMouseOptions(event, xScale);\n    onMouseEnterAxis(options);\n  };\n\n  handleOnMouseLeave = event => {\n    const { onMouseLeaveAxis, xScale } = this.props;\n\n    if (!_.isFunction(onMouseLeaveAxis)) {\n      return;\n    }\n\n    const options = getMouseOptions(event, xScale);\n    onMouseLeaveAxis(options);\n  };\n\n  handleOnClick = event => {\n    const { onMouseClickAxis, xScale } = this.props;\n\n    if (!_.isFunction(onMouseClickAxis)) {\n      return;\n    }\n\n    const options = getMouseOptions(event, xScale);\n    onMouseClickAxis(options);\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      position,\n      spacingTop,\n      spacingBottom,\n      spacingLeft,\n      spacingRight,\n      tickLength,\n      titleDistance,\n      labelDistance,\n      showTitle,\n      showLabels,\n      showTicks,\n      showGrid,\n      showLine,\n      lineStyle\n    } = this.props;\n\n    const {\n      ticksProps,\n      gridProps,\n      labelsProps,\n      titleProps\n    } = getAxisChildProps(this.props);\n\n    labelsProps.distance = labelDistance + (showTicks ? tickLength : 0);\n\n    if (showTitle && showLabels) {\n      // todo optimize so we don't generate labels twice\n      const labelsMargin = XAxisLabels.getMargin(labelsProps);\n      titleProps.distance =\n        titleDistance + labelsMargin[`margin${_.upperFirst(position)}`];\n    } else if (showTitle && showTicks) {\n      titleProps.distance = titleDistance + tickLength;\n    }\n\n    const axisLineY =\n      position === \"bottom\" ? height + spacingBottom : -spacingTop;\n\n    return (\n      <g\n        className=\"rct-chart-axis rct-chart-axis-x\"\n        onMouseMove={this.handleOnMouseMove}\n        onMouseEnter={this.handleOnMouseEnter}\n        onMouseLeave={this.handleOnMouseLeave}\n        onClick={this.handleOnClick}\n      >\n        {showGrid ? <XGrid {...gridProps} /> : null}\n\n        {showTicks ? <XTicks {...ticksProps} /> : null}\n\n        {showLabels ? <XAxisLabels {...labelsProps} /> : null}\n\n        {showTitle ? <XAxisTitle {...titleProps} /> : null}\n\n        {showLine ? (\n          <line\n            className=\"rct-chart-axis-line rct-chart-axis-line-x\"\n            x1={-spacingLeft}\n            x2={width + spacingRight}\n            y1={axisLineY}\n            y2={axisLineY}\n            style={lineStyle}\n          />\n        ) : null}\n      </g>\n    );\n  }\n}\n"],"file":"XAxis.js"}