{"version":3,"sources":["src/MeasuredValueLabel.js"],"names":["MeasuredValueLabel","props","value","format","passedProps","omit","Children","count","children","style","defaults","defaultProps","labelStr","measured","assign","text","height","width","Component","propTypes","any","identity","fontFamily","fontSize","lineHeight","textAnchor"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,kB;;;;;;;;;;;6BA8BV;AAAA,mBACmB,KAAKC,KADxB;AAAA,UACCC,KADD,UACCA,KADD;AAAA,UACQC,MADR,UACQA,MADR;;AAEP,UAAMC,cAAc,iBAAEC,IAAF,CAAO,KAAKJ,KAAZ,EAAmB,CAAC,OAAD,EAAU,QAAV,CAAnB,CAApB;;AAEA,aACE;AAAA;AAAUG,mBAAV;AACG,wBAAME,QAAN,CAAeC,KAAf,CAAqB,KAAKN,KAAL,CAAWO,QAAhC,IACG,KAAKP,KAAL,CAAWO,QADd,GAEGL,OAAOD,KAAP;AAHN,OADF;AAOD;;;6BA5BeD,K,EAAO;AAAA,UACbC,KADa,GACKD,KADL,CACbC,KADa;AAAA,UACNC,MADM,GACKF,KADL,CACNE,MADM;;AAErB,UAAMM,QAAQ,iBAAEC,QAAF,CACZT,MAAMQ,KADM,EAEZT,mBAAmBW,YAAnB,CAAgCF,KAFpB,CAAd;AAIA,UAAMG,WAAWT,OAAOD,KAAP,CAAjB;AACA,UAAMW,WAAW,2BAAY,iBAAEC,MAAF,CAAS,EAAEC,MAAMH,QAAR,EAAT,EAA6BH,KAA7B,CAAZ,CAAjB;;AAEA,aAAO;AACLP,eAAOD,MAAMC,KADR;AAELa,cAAMF,SAASE,IAFV;AAGLC,gBAAQH,SAASG,MAAT,CAAgBd,KAHnB;AAILe,eAAOJ,SAASI,KAAT,CAAef;AAJjB,OAAP;AAMD;;;;EA5B6C,gBAAMgB,S;;AAAjClB,kB,CACZmB,S,GAAY;AACjBjB,SAAO,oBAAUkB;AADA,C;AADApB,kB,CAIZW,Y,GAAe;AACpBR,UAAQ,iBAAEkB,QADU;AAEpBZ,SAAO;AACLa,gBAAY,uBADP;AAELC,cAAU,MAFL;AAGLC,gBAAY,CAHP;AAILC,gBAAY;AAJP;AAFa,C;kBAJHzB,kB","file":"MeasuredValueLabel.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport measureText from \"measure-text\";\nimport PropTypes from \"prop-types\";\n\nexport default class MeasuredValueLabel extends React.Component {\n  static propTypes = {\n    value: PropTypes.any\n  };\n  static defaultProps = {\n    format: _.identity,\n    style: {\n      fontFamily: \"Helvetica, sans-serif\",\n      fontSize: \"20px\",\n      lineHeight: 1,\n      textAnchor: \"middle\"\n    }\n  };\n  static getLabel(props) {\n    const { value, format } = props;\n    const style = _.defaults(\n      props.style,\n      MeasuredValueLabel.defaultProps.style\n    );\n    const labelStr = format(value);\n    const measured = measureText(_.assign({ text: labelStr }, style));\n\n    return {\n      value: props.value,\n      text: measured.text,\n      height: measured.height.value,\n      width: measured.width.value\n    };\n  }\n\n  render() {\n    const { value, format } = this.props;\n    const passedProps = _.omit(this.props, [\"value\", \"format\"]);\n\n    return (\n      <text {...passedProps}>\n        {React.Children.count(this.props.children)\n          ? this.props.children\n          : format(value)}\n      </text>\n    );\n  }\n}\n"]}