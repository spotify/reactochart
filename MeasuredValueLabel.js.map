{"version":3,"sources":["src/MeasuredValueLabel.js"],"names":["MeasuredValueLabel","React","Component","getLabel","props","value","format","style","_","defaults","defaultProps","labelStr","measured","assign","text","height","width","render","passedProps","omit","Children","count","children","PropTypes","any","identity","fontFamily","fontSize","lineHeight","textAnchor"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEe,MAAMA,kBAAN,SAAiCC,eAAMC,SAAvC,CAAiD;AAa9D,SAAOC,QAAP,CAAgBC,KAAhB,EAAuB;AACrB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoBF,KAA1B;;AACA,UAAMG,KAAK,GAAGC,gBAAEC,QAAF,CACZL,KAAK,CAACG,KADM,EAEZP,kBAAkB,CAACU,YAAnB,CAAgCH,KAFpB,CAAd;;AAIA,UAAMI,QAAQ,GAAGL,MAAM,CAACD,KAAD,CAAvB;AACA,UAAMO,QAAQ,GAAG,0BAAYJ,gBAAEK,MAAF,CAAS;AAAEC,MAAAA,IAAI,EAAEH;AAAR,KAAT,EAA6BJ,KAA7B,CAAZ,CAAjB;AAEA,WAAO;AACLF,MAAAA,KAAK,EAAED,KAAK,CAACC,KADR;AAELS,MAAAA,IAAI,EAAEF,QAAQ,CAACE,IAFV;AAGLC,MAAAA,MAAM,EAAEH,QAAQ,CAACG,MAAT,CAAgBV,KAHnB;AAILW,MAAAA,KAAK,EAAEJ,QAAQ,CAACI,KAAT,CAAeX;AAJjB,KAAP;AAMD;;AAEDY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoB,KAAKF,KAA/B;;AACA,UAAMc,WAAW,GAAGV,gBAAEW,IAAF,CAAO,KAAKf,KAAZ,EAAmB,CAAC,OAAD,EAAU,QAAV,CAAnB,CAApB;;AAEA,WACE,qCAAUc,WAAV,EACGjB,eAAMmB,QAAN,CAAeC,KAAf,CAAqB,KAAKjB,KAAL,CAAWkB,QAAhC,IACG,KAAKlB,KAAL,CAAWkB,QADd,GAEGhB,MAAM,CAACD,KAAD,CAHZ,CADF;AAOD;;AAzC6D;;;;gBAA3CL,kB,eACA;AACjBK,EAAAA,KAAK,EAAEkB,mBAAUC;AADA,C;;gBADAxB,kB,kBAIG;AACpBM,EAAAA,MAAM,EAAEE,gBAAEiB,QADU;AAEpBlB,EAAAA,KAAK,EAAE;AACLmB,IAAAA,UAAU,EAAE,uBADP;AAELC,IAAAA,QAAQ,EAAE,MAFL;AAGLC,IAAAA,UAAU,EAAE,CAHP;AAILC,IAAAA,UAAU,EAAE;AAJP;AAFa,C","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport measureText from \"./utils/measureText\";\nimport PropTypes from \"prop-types\";\n\nexport default class MeasuredValueLabel extends React.Component {\n  static propTypes = {\n    value: PropTypes.any\n  };\n  static defaultProps = {\n    format: _.identity,\n    style: {\n      fontFamily: \"Helvetica, sans-serif\",\n      fontSize: \"20px\",\n      lineHeight: 1,\n      textAnchor: \"middle\"\n    }\n  };\n  static getLabel(props) {\n    const { value, format } = props;\n    const style = _.defaults(\n      props.style,\n      MeasuredValueLabel.defaultProps.style\n    );\n    const labelStr = format(value);\n    const measured = measureText(_.assign({ text: labelStr }, style));\n\n    return {\n      value: props.value,\n      text: measured.text,\n      height: measured.height.value,\n      width: measured.width.value\n    };\n  }\n\n  render() {\n    const { value, format } = this.props;\n    const passedProps = _.omit(this.props, [\"value\", \"format\"]);\n\n    return (\n      <text {...passedProps}>\n        {React.Children.count(this.props.children)\n          ? this.props.children\n          : format(value)}\n      </text>\n    );\n  }\n}\n"],"file":"MeasuredValueLabel.js"}