{"version":3,"sources":["../src/utils/resolveXYScales.js"],"names":["resolveXYScales","errs","getDomain","componentName","C","Component","displayName","isValidScaleType","scaleType","isString","areValidScales","scales","every","areValidScaleTypes","scaleTypes","mapOverChildren","children","iteratee","iterateeArgs","isFunction","Error","compact","Children","map","child","isValidElement","props","type","omitNullUndefined","obj","omitBy","isUndefined","v","isNull","ComposedComponent","_makeScales","width","height","xScaleType","yScaleType","xDomain","yDomain","xScale","yScale","marginTop","marginBottom","marginLeft","marginRight","spacingTop","spacingBottom","spacingLeft","spacingRight","spacing","top","bottom","left","right","margin","innerChartWidth","innerChartHeight","xRange","domain","range","yRange","isDone","getScaleType","componentScaleTypes","assign","isArray","data","datasets","x","y","count","childrenScaleTypes","_resolveScaleType","bind","childXScaleTypes","uniq","childScaleTypes","length","console","warn","childYScaleTypes","xDataType","yDataType","isXDone","isYDone","componentXDomain","componentYDomain","childrenDomains","_resolveDomain","childXDomains","childDomains","childYDomains","getTickDomain","componentTickDomains","childrenTickDomains","_resolveTickDomain","childrenXTickDomains","childTickDomains","xTickDomain","undefined","childrenYTickDomains","yTickDomain","isNumber","getMargin","componentMargin","childrenMargins","_resolveMargin","childrenMargin","childMargins","getSpacing","componentSpacing","childrenSpacings","_resolveSpacing","childrenSpacing","childSpacing","invertXScale","invertYScale","slice","reverse","scaleOptions","scaleX","scaleY","tempScale","tempXScale","tempYScale","defaults","passedProps","defaultProps"],"mappings":"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","file":"resolveXYScales.js","sourcesContent":["import _ from \"lodash\";\nimport { scalePoint } from \"d3\";\nimport React from \"react\";\nimport invariant from \"invariant\";\n\nimport {\n  makeAccessor,\n  makeAccessor2,\n  getValue,\n  domainFromDatasets,\n  domainFromData,\n  inferDatasetsType,\n  datasetsFromPropsOrDescendants,\n  combineDomains,\n  combineBorderObjects,\n  isValidDomain\n} from \"./Data\";\n\nimport {\n  scaleTypeFromDataType,\n  dataTypeFromScaleType,\n  inferDataTypeFromDomain,\n  initScale,\n  isValidScale\n} from \"./Scale\";\n\nimport { innerRangeX, innerRangeY, innerWidth, innerHeight } from \"./Margin\";\n\n/**\n * `resolveXYScales` is a higher-order-component.\n *\n * @param {Component} Component - The React Component (class) which should be wrapped by this HOC\n * @returns {Component} - A Component which auto-resolves XY scales from given props\n */\n\nconst errs = {\n  getDomain: C =>\n    `Components enhanced by resolveXYScales must have a static getDomain method, ${componentName(\n      C\n    )} does not have one`\n};\nfunction componentName(Component) {\n  return Component.displayName || \"Component wrapped by resolveXYScales\";\n}\n\nfunction isValidScaleType(scaleType) {\n  // todo: check against whitelist?\n  return _.isString(scaleType);\n}\nfunction areValidScales(scales) {\n  return _.every(scales, isValidScale);\n}\nfunction areValidScaleTypes(scaleTypes) {\n  return _.every(scaleTypes, isValidScaleType);\n}\n\nfunction mapOverChildren(children, iteratee, ...iterateeArgs) {\n  // loop over all children (react elements) and call iteratee (a function) on each one\n  // iteratee is called with parameters (child.props, child.type, ...iterateeArgs)\n  if (!_.isFunction(iteratee))\n    throw new Error(\"mapOverChildren iteratee must be a function\");\n\n  return _.compact(\n    React.Children.map(children, child => {\n      if (!child || !React.isValidElement(child)) return null;\n      return iteratee(child.props, child.type, ...iterateeArgs);\n    })\n  );\n}\nfunction omitNullUndefined(obj) {\n  return _.omitBy(obj, v => _.isUndefined(v) || _.isNull(v));\n}\n\n// not currently being used but potentially has some learnings\n// function resolveXYPropsOnComponentOrChildren(propKeys, props, reducers = {}, validators = {}, result = {}) {\n//   const isDone = (o) => (_.every(propKeys, k => _.isObject(o[k]) && _.every(['x', 'y'], xy => _.has(o[k][xy]))));\n//   result = _.pick({...props, ...result}, propKeys);\n\n//   let resolved = {};\n//   _.forEach(propKeys, propKey => {\n//     _.forEach(['x', 'y'], k => {\n//       const isValid = validators[propKey] || (() => true);\n//       if(_.isObject(props[propKey]) && _.has(props[propKey], k) && isValid(props[propKey][k])) {\n//         if(!_.has(result, propKey)) result[propKey] = {};\n//         result[propKey][k] = props[propKey][k];\n//       }\n//     });\n//   });\n\n//   if(isDone(result)) return result;\n\n//   if(React.Children.count(props.children)) {\n//     let childProps = mapOverChildren(props.children, resolveXYPropsOnComponentOrChildren, propKeys, 'props', result);\n//     React.Children.forEach(props.children, child => {\n//       if(!child) return;\n//       childProps.push(resolveXYPropsOnComponentOrChildren(propKeys, child.props, result));\n//     });\n//       let childDomains = [];\n//       React.Children.forEach(props.children, child => {\n//         childDomains = childDomains.concat(this._resolveDomain(child.props, child.type, scaleType));\n//       });\n\n//       console.log('combining domains', childDomains);\n//       const childDomain =  _.fromPairs(['x', 'y'].map(k => {\n//         console.log(_.compact(_.map(childDomains, k)), scaleType[k]);\n//         const kDomain = combineDomains(_.compact(_.map(childDomains, k)), dataTypeFromScaleType(scaleType[k]));\n//         console.log(kDomain);\n//         return [k, kDomain];\n//       }));\n//       console.log('combined domains', childDomain);\n\n//       domain = _.assign(childDomain, domain);\n//       return domain;\n//   }\n\n//   propKeys.forEach(k => {\n//     result[propKeys] = props\n//   })\n// }\n\nexport default function resolveXYScales(ComposedComponent) {\n  return class extends React.Component {\n    static defaultProps = _.defaults(ComposedComponent.defaultProps, {\n      invertXScale: false,\n      invertYScale: false\n    });\n\n    // todo better way for HOC's to pass statics through?\n    static getScaleType = ComposedComponent.getScaleType;\n    static getSpacing = ComposedComponent.getSpacing;\n    static getDomain = ComposedComponent.getDomain;\n    static getMargin = ComposedComponent.getMargin;\n\n    _resolveScaleType(props, Component) {\n      let { xScaleType, yScaleType } = props;\n\n      const isDone = () => areValidScaleTypes([xScaleType, yScaleType]);\n\n      // short-circuit if both scale types provided\n      if (isDone()) return { xScaleType, yScaleType };\n\n      // if Component provides a custom static getScaleType method\n      // use it to determine remaining scale types\n      if (_.isFunction(Component.getScaleType)) {\n        const componentScaleTypes = omitNullUndefined(\n          Component.getScaleType(props)\n        );\n        ({ xScaleType, yScaleType } = _.assign(\n          componentScaleTypes,\n          omitNullUndefined({ xScaleType, yScaleType })\n        ));\n        if (isDone()) return { xScaleType, yScaleType };\n      }\n\n      // if component has domain props,\n      // infer the data type, & use that to get scale type\n      if (!isValidScaleType(xScaleType) && isValidDomain(props.xDomain)) {\n        xScaleType = scaleTypeFromDataType(\n          inferDataTypeFromDomain(props.xDomain)\n        );\n      }\n      if (!isValidScaleType(yScaleType) && isValidDomain(props.yDomain)) {\n        yScaleType = scaleTypeFromDataType(\n          inferDataTypeFromDomain(props.yDomain)\n        );\n      }\n      if (isDone()) return { xScaleType, yScaleType };\n\n      // if Component has data or datasets props,\n      // infer the data type, & use that to get scale type\n      if (_.isArray(props.data) || _.isArray(props.datasets)) {\n        const datasets = _.isArray(props.datasets)\n          ? props.datasets\n          : [props.data];\n\n        if (!isValidScaleType(xScaleType)) {\n          xScaleType = scaleTypeFromDataType(\n            inferDatasetsType(datasets, makeAccessor2(props.x))\n          );\n        }\n        if (!isValidScaleType(yScaleType)) {\n          yScaleType = scaleTypeFromDataType(\n            inferDatasetsType(datasets, makeAccessor2(props.y))\n          );\n        }\n        if (isDone()) return { xScaleType, yScaleType };\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their scale types the same way\n      if (React.Children.count(props.children)) {\n        let childrenScaleTypes = mapOverChildren(\n          props.children,\n          this._resolveScaleType.bind(this)\n        );\n\n        if (!isValidScaleType(xScaleType)) {\n          const childXScaleTypes = _.compact(\n            _.uniq(\n              childrenScaleTypes.map(\n                childScaleTypes => childScaleTypes.xScaleType\n              )\n            )\n          );\n          if (!childXScaleTypes.length === 1)\n            console.warn(\n              \"Multiple children with different X scale types found - defaulting to 'ordinal'\"\n            );\n          xScaleType =\n            childXScaleTypes.length === 1 ? childXScaleTypes[0] : \"ordinal\";\n        }\n        if (!isValidScaleType(yScaleType)) {\n          const childYScaleTypes = _.compact(\n            _.uniq(\n              childrenScaleTypes.map(\n                childScaleTypes => childScaleTypes.yScaleType\n              )\n            )\n          );\n          if (!childYScaleTypes.length === 1)\n            console.warn(\n              \"Multiple children with different Y scale types found - defaulting to 'ordinal'\"\n            );\n          yScaleType =\n            childYScaleTypes.length === 1 ? childYScaleTypes[0] : \"ordinal\";\n        }\n      }\n\n      // if(!isDone()) console.warn(`resolveXYScales was unable to resolve both scale types. xScaleType: ${xScaleType}, yScaleType: ${yScaleType}`);\n\n      return { xScaleType, yScaleType };\n    }\n\n    _resolveDomain(props, Component, xScaleType, yScaleType) {\n      let { xDomain, yDomain } = props;\n      const xDataType = dataTypeFromScaleType(xScaleType);\n      const yDataType = dataTypeFromScaleType(yScaleType);\n\n      const isXDone = () => isValidDomain(xDomain, xDataType);\n      const isYDone = () => isValidDomain(yDomain, yDataType);\n      const isDone = () => isXDone() && isYDone();\n\n      // short-circuit if all domains provided\n      if (isDone()) return { xDomain, yDomain };\n\n      // if Component provides a custom static getScaleType method\n      // use it to determine remaining scale types\n      if (_.isFunction(Component.getDomain)) {\n        const {\n          xDomain: componentXDomain,\n          yDomain: componentYDomain\n        } = Component.getDomain({ ...props, xScaleType, yScaleType });\n\n        if (\n          !isXDone() &&\n          componentXDomain &&\n          !isValidDomain(componentXDomain, xDataType)\n        )\n          console.warn(\n            `Component.getDomain returned an invalid domain for data type '${xDataType}': ${componentXDomain} - ignoring`\n          );\n        if (!isXDone() && isValidDomain(componentXDomain, xDataType))\n          xDomain = componentXDomain;\n\n        if (\n          !isYDone() &&\n          componentYDomain &&\n          !isValidDomain(componentYDomain, yDataType)\n        )\n          console.warn(\n            `Component.getDomain returned an invalid domain for data type '${yDataType}': ${componentYDomain} - ignoring`\n          );\n        if (!isYDone() && isValidDomain(componentYDomain, yDataType))\n          yDomain = componentYDomain;\n\n        if (isDone()) return { xDomain, yDomain };\n      }\n\n      // if Component has data or datasets props,\n      // use the default domainFromDatasets function to determine a domain from them\n      if (_.isArray(props.data) || _.isArray(props.datasets)) {\n        const datasets = _.isArray(props.datasets)\n          ? props.datasets\n          : [props.data];\n        if (!isXDone()) {\n          xDomain = domainFromDatasets(\n            datasets,\n            makeAccessor2(props.x),\n            xDataType\n          );\n        }\n        if (!isYDone()) {\n          yDomain = domainFromDatasets(\n            datasets,\n            makeAccessor2(props.y),\n            yDataType\n          );\n        }\n        if (isDone()) return { xDomain, yDomain };\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their domains the same way,\n      // and combine them into a single domain, if there are multiple\n      if (React.Children.count(props.children)) {\n        let childrenDomains = mapOverChildren(\n          props.children,\n          this._resolveDomain.bind(this),\n          xScaleType,\n          yScaleType\n        );\n\n        if (!isXDone()) {\n          const childXDomains = _.compact(\n            childrenDomains.map(childDomains => childDomains.xDomain)\n          );\n          xDomain = combineDomains(childXDomains, xDataType);\n        }\n        if (!isYDone()) {\n          const childYDomains = _.compact(\n            childrenDomains.map(childDomains => childDomains.yDomain)\n          );\n          yDomain = combineDomains(childYDomains, yDataType);\n        }\n      }\n\n      // if(!isDone()) console.warn(`resolveXYScales was unable to resolve both domains. xDomain: ${xDomain}, yDomain: ${yDomain}`);\n\n      return { xDomain, yDomain };\n    }\n\n    _resolveTickDomain(\n      props,\n      Component,\n      { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale }\n    ) {\n      // todo resolve directly from ticks/tickCount props?\n      if (_.isFunction(Component.getTickDomain)) {\n        const componentTickDomains = Component.getTickDomain({\n          xScaleType,\n          yScaleType,\n          xDomain,\n          yDomain,\n          xScale,\n          yScale,\n          ...props\n        });\n        return omitNullUndefined(componentTickDomains);\n      }\n\n      if (React.Children.count(props.children)) {\n        let childrenTickDomains = mapOverChildren(\n          props.children,\n          this._resolveTickDomain.bind(this),\n          { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale }\n        );\n\n        const childrenXTickDomains = _.compact(\n          childrenTickDomains.map(\n            childTickDomains => childTickDomains.xTickDomain\n          )\n        );\n        const xTickDomain = childrenXTickDomains.length\n          ? combineDomains(\n              childrenXTickDomains,\n              dataTypeFromScaleType(xScaleType)\n            )\n          : undefined;\n\n        const childrenYTickDomains = _.compact(\n          childrenTickDomains.map(\n            childTickDomains => childTickDomains.yTickDomain\n          )\n        );\n        const yTickDomain = childrenYTickDomains.length\n          ? combineDomains(\n              childrenYTickDomains,\n              dataTypeFromScaleType(yScaleType)\n            )\n          : undefined;\n\n        return omitNullUndefined({ xTickDomain, yTickDomain });\n      }\n\n      return {};\n    }\n\n    _resolveMargin(\n      props,\n      Component,\n      { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale }\n    ) {\n      let { marginTop, marginBottom, marginLeft, marginRight } = props;\n\n      const isDone = () =>\n        _.every([marginTop, marginBottom, marginLeft, marginRight], _.isNumber);\n\n      // short-circuit if all margins provided\n      if (isDone()) return { marginTop, marginBottom, marginLeft, marginRight };\n\n      // if Component provides a custom static getMargin method\n      // use it to determine remaining domains\n      if (_.isFunction(Component.getMargin)) {\n        const componentMargin = omitNullUndefined(\n          Component.getMargin({\n            ...props,\n            xScaleType,\n            yScaleType,\n            xDomain,\n            yDomain,\n            xScale,\n            yScale\n          })\n        );\n        ({ marginTop, marginBottom, marginLeft, marginRight } = _.assign(\n          componentMargin,\n          omitNullUndefined({\n            marginTop,\n            marginBottom,\n            marginLeft,\n            marginRight\n          })\n        ));\n        if (isDone())\n          return { marginTop, marginBottom, marginLeft, marginRight };\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their margins the same way,\n      // and combine them into a single margin, if there are multiple\n      if (React.Children.count(props.children)) {\n        let childrenMargins = mapOverChildren(\n          props.children,\n          this._resolveMargin.bind(this),\n          { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale }\n        );\n\n        // console.log('combining child margins', childMargins);\n        const childrenMargin = combineBorderObjects(\n          childrenMargins.map(childMargins => ({\n            top: childMargins.marginTop,\n            bottom: childMargins.marginBottom,\n            left: childMargins.marginLeft,\n            right: childMargins.marginRight\n          }))\n        );\n\n        marginTop = _.isUndefined(marginTop) ? childrenMargin.top : marginTop;\n        marginBottom = _.isUndefined(marginBottom)\n          ? childrenMargin.bottom\n          : marginBottom;\n        marginLeft = _.isUndefined(marginLeft)\n          ? childrenMargin.left\n          : marginLeft;\n        marginRight = _.isUndefined(marginRight)\n          ? childrenMargin.right\n          : marginRight;\n      }\n\n      return { marginTop, marginBottom, marginLeft, marginRight };\n    }\n\n    _resolveSpacing(\n      props,\n      Component,\n      { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale }\n    ) {\n      let { spacingTop, spacingBottom, spacingLeft, spacingRight } = props;\n\n      const isDone = () =>\n        _.every(\n          [spacingTop, spacingBottom, spacingLeft, spacingRight],\n          _.isNumber\n        );\n\n      // short-circuit if all spacing provided\n      if (isDone())\n        return { spacingTop, spacingBottom, spacingLeft, spacingRight };\n\n      // if Component provides a custom static getSpacing method\n      // use it to determine remaining domains\n      if (_.isFunction(Component.getSpacing)) {\n        const componentSpacing = omitNullUndefined(\n          Component.getSpacing({\n            ...props,\n            xScaleType,\n            yScaleType,\n            xDomain,\n            yDomain,\n            xScale,\n            yScale\n          })\n        );\n        ({ spacingTop, spacingBottom, spacingLeft, spacingRight } = _.assign(\n          componentSpacing,\n          omitNullUndefined({\n            spacingTop,\n            spacingBottom,\n            spacingLeft,\n            spacingRight\n          })\n        ));\n        if (isDone())\n          return { spacingTop, spacingBottom, spacingLeft, spacingRight };\n      }\n\n      // if Component has children,\n      // recurse through descendants to resolve their spacings the same way,\n      // and combine them into a single spacing, if there are multiple\n      if (React.Children.count(props.children)) {\n        let childrenSpacings = mapOverChildren(\n          props.children,\n          this._resolveSpacing.bind(this),\n          { xScaleType, yScaleType, xDomain, yDomain, xScale, yScale }\n        );\n\n        const childrenSpacing = combineBorderObjects(\n          childrenSpacings.map(childSpacing => ({\n            top: childSpacing.spacingTop,\n            bottom: childSpacing.spacingBottom,\n            left: childSpacing.spacingLeft,\n            right: childSpacing.spacingRight\n          }))\n        );\n\n        spacingTop = _.isUndefined(spacingTop)\n          ? childrenSpacing.top\n          : spacingTop;\n        spacingBottom = _.isUndefined(spacingBottom)\n          ? childrenSpacing.bottom\n          : spacingBottom;\n        spacingLeft = _.isUndefined(spacingLeft)\n          ? childrenSpacing.left\n          : spacingLeft;\n        spacingRight = _.isUndefined(spacingRight)\n          ? childrenSpacing.right\n          : spacingRight;\n      }\n\n      if (isDone())\n        return { spacingTop, spacingBottom, spacingLeft, spacingRight };\n    }\n\n    _makeScales = ({\n      width,\n      height,\n      xScaleType,\n      yScaleType,\n      xDomain,\n      yDomain,\n      xScale,\n      yScale,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      spacingTop,\n      spacingBottom,\n      spacingLeft,\n      spacingRight\n    }) => {\n      const spacing = {\n        top: spacingTop,\n        bottom: spacingBottom,\n        left: spacingLeft,\n        right: spacingRight\n      };\n      const margin = {\n        top: marginTop,\n        bottom: marginBottom,\n        left: marginLeft,\n        right: marginRight\n      };\n      const innerChartWidth = innerWidth(width, margin);\n      const innerChartHeight = innerHeight(height, margin);\n\n      // use existing scales if provided, otherwise create new\n      if (!isValidScale(xScale)) {\n        //innerRange functions produce range (i.e. [5,20]) and map function normalizes to 0 (i.e. [0,15])\n        const xRange = innerRangeX(innerChartWidth, spacing).map(\n          v => v - (spacing.left || 0)\n        );\n        xScale = initScale(xScaleType)\n          .domain(xDomain)\n          .range(xRange);\n      }\n      if (!isValidScale(yScale)) {\n        const yRange = innerRangeY(innerChartHeight, spacing).map(\n          v => v - (spacing.top || 0)\n        );\n        yScale = initScale(yScaleType)\n          .domain(yDomain)\n          .range(yRange);\n      }\n\n      // todo - ticks, nice and getDomain should be an axis prop instead, and axis should have getDomain\n\n      // set `nice` option to round scale domains to nicer numbers\n      // const kTickCount = tickCount ? tickCount[k] : 10;\n      // if(nice && nice[k] && _.isFunction(kScale.nice)) kScale.nice(kTickCount);\n\n      // extend scale domain to include custom `ticks` if passed\n      //\n      // if(ticks[k]) {\n      //   const dataType = dataTypeFromScaleType(scaleType[k]);\n      //   const tickDomain = domainFromData(ticks[k], _.identity, dataType);\n      //   kScale.domain(combineDomains([kScale.domain(), tickDomain]), dataType);\n      // }\n\n      // reverse scale domain if `invertScale` is passed\n      // if(invertScale[k]) kScale.domain(kScale.domain().reverse());\n\n      return { xScale, yScale };\n    };\n\n    render() {\n      const { props } = this;\n      const { width, height, invertXScale, invertYScale } = props;\n\n      // short-circuit if scales provided\n      // todo warn/throw if bad scales are passed\n      // todo also pass domain/scaleType/etc from scales??\n      if (isValidScale(props.xScale) && isValidScale(props.yScale))\n        return <ComposedComponent {...this.props} />;\n\n      // scales not provided, so we have to resolve them\n      // first resolve scale types and domains\n      // const scaleType = this._resolveScaleType(props, ComposedComponent);\n      const { xScaleType, yScaleType } = this._resolveScaleType(\n        props,\n        ComposedComponent\n      );\n\n      // const domain = this._resolveDomain(props, ComposedComponent, scaleType);\n      let { xDomain, yDomain } = this._resolveDomain(\n        props,\n        ComposedComponent,\n        xScaleType,\n        yScaleType\n      );\n      if (invertXScale) xDomain = xDomain.slice().reverse();\n      if (invertYScale) yDomain = yDomain.slice().reverse();\n\n      // create a temporary scale with size & domain, which may be used by the Component to calculate margin/tickDomain\n      // (eg. to create and measure labels for the scales)\n      // let tempScale = this._makeScales(scaleOptions);\n      let scaleOptions = {\n        width,\n        height,\n        xScaleType,\n        yScaleType,\n        xDomain,\n        yDomain,\n        scaleX: props.scaleX,\n        scaleY: props.scaleY,\n        marginTop: props.marginTop,\n        marginBottom: props.marginBottom,\n        marginLeft: props.marginLeft,\n        marginRight: props.marginRight,\n        spacingTop: props.spacingTop,\n        spacingBottom: props.spacingBottom,\n        spacingLeft: props.spacingLeft,\n        spacingRight: props.spacingRight,\n        xScale: props.xScale,\n        yScale: props.yScale\n      };\n      // create a temporary scale with size & domain, which may be used by the Component to calculate margin/tickDomain\n      // (eg. to create and measure labels for the scales)\n      let tempScale = this._makeScales(scaleOptions);\n      let { xScale: tempXScale, yScale: tempYScale } = tempScale;\n\n      // getTickDomain gives children the opportunity to modify the domain to include their scale ticks\n      // (can't happen in getDomain, because it can't be done until the base domain/tempScale has been created)\n      // nice-ing happens in the getTickDomain function inside of _resolveTickDomain\n      const { xTickDomain, yTickDomain } = this._resolveTickDomain(\n        props,\n        ComposedComponent,\n        {\n          xScaleType,\n          yScaleType,\n          xDomain,\n          yDomain,\n          xScale: tempXScale,\n          yScale: tempYScale\n        }\n      );\n      if (isValidDomain(xTickDomain, dataTypeFromScaleType(xScaleType))) {\n        xDomain = combineDomains(\n          [xDomain, xTickDomain],\n          dataTypeFromScaleType(xScaleType)\n        );\n      }\n      if (isValidDomain(yTickDomain, dataTypeFromScaleType(yScaleType))) {\n        yDomain = combineDomains(\n          [yDomain, yTickDomain],\n          dataTypeFromScaleType(yScaleType)\n        );\n      }\n\n      // update tempScale to use new domain before creating margins\n      scaleOptions = { ...scaleOptions, xDomain, yDomain };\n      tempScale = this._makeScales(scaleOptions);\n\n      // then resolve the margins\n      const { marginTop, marginBottom, marginLeft, marginRight } = _.defaults(\n        this._resolveMargin(props, ComposedComponent, {\n          xScaleType,\n          yScaleType,\n          xDomain,\n          yDomain,\n          xScale: tempScale.xScale,\n          yScale: tempScale.yScale\n        }),\n        { marginTop: 0, marginBottom: 0, marginLeft: 0, marginRight: 0 }\n      );\n\n      const {\n        spacingTop,\n        spacingBottom,\n        spacingLeft,\n        spacingRight\n      } = _.defaults(\n        this._resolveSpacing(props, ComposedComponent, {\n          xScaleType,\n          yScaleType,\n          xDomain,\n          yDomain,\n          xScale: tempScale.xScale,\n          yScale: tempScale.yScale\n        }),\n        { spacingTop: 0, spacingBottom: 0, spacingLeft: 0, spacingRight: 0 }\n      );\n\n      // create real scales from resolved margins\n      scaleOptions = {\n        ...scaleOptions,\n        marginTop,\n        marginBottom,\n        marginLeft,\n        marginRight,\n        spacingTop,\n        spacingBottom,\n        spacingLeft,\n        spacingRight\n      };\n      const { xScale, yScale } = this._makeScales(scaleOptions);\n\n      const passedProps = _.assign({}, this.props, {\n        //legacy\n        // scale: {x: xScale, y: yScale},\n        // domain: {x: xDomain, y: yDomain},\n        // scaleType: {x: xScaleType, y: yScaleType},\n        // margin: {top: marginTop, bottom: marginBottom, left: marginLeft, right: marginRight},\n        // 0.4.0\n        xScale,\n        yScale,\n        xDomain,\n        yDomain,\n        xScaleType,\n        yScaleType,\n        marginTop,\n        marginBottom,\n        marginLeft,\n        marginRight,\n        spacingTop,\n        spacingBottom,\n        spacingLeft,\n        spacingRight\n      });\n      return <ComposedComponent {...passedProps} />;\n\n      // todo spacing/padding\n      // todo includeZero\n      // todo purerender/shouldcomponentupdate?\n      // todo resolve margins if scales are present\n      // todo throw if cannot resolve scaleType\n      // todo throw if cannot resolve domain\n      // todo check to make sure margins didn't change after scales resolved?\n    }\n  };\n}\n"]}