{"version":3,"sources":["../src/utils/xyPropsEqual.js"],"names":["defaultPropKeysToDeepCheck","xyPropsEqual","propsA","propsB","customKeysToDeepCheck","includeDefaults","propKeysToDeepCheck","concat","propKeysToSkipShallowCheck","isEqual","_","omit","every","key","get","xyPropsEqualDebug","isDeepEqual","console","log","isScaleEqual","scale"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACO,MAAMA,0BAA0B,GAAG,CACxC,QADwC,EAExC,WAFwC,EAGxC,SAHwC,EAIxC,QAJwC,EAKxC,OALwC,EAMxC,MANwC,CAMjC;AANiC,CAAnC;;;AASQ,SAASC,YAAT,CACbC,MADa,EAEbC,MAFa,EAGbC,qBAAqB,GAAG,EAHX,EAIbC,eAAe,GAAG,IAJL,EAKb;AACA,QAAMC,mBAAmB,GAAGD,eAAe,GACvCL,0BAA0B,CAACO,MAA3B,CAAkCH,qBAAlC,CADuC,GAEvCA,qBAFJ;AAIA,QAAMI,0BAA0B,GAAGF,mBAAmB,CAACC,MAApB,CAA2B,OAA3B,CAAnC;;AAEA,QAAME,OAAO,GACX;AACA,6BACEC,gBAAEC,IAAF,CAAOT,MAAP,EAAeM,0BAAf,CADF,EAEEE,gBAAEC,IAAF,CAAOR,MAAP,EAAeK,0BAAf,CAFF,KAIA;AACAE,kBAAEE,KAAF,CAAQN,mBAAR,EAA6BO,GAAG,IAAIH,gBAAED,OAAF,CAAUP,MAAM,CAACW,GAAD,CAAhB,EAAuBV,MAAM,CAACU,GAAD,CAA7B,CAApC,CALA,IAMA;AACAH,kBAAEE,KAAF,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,EAAoBC,GAAG,IAAI;AACzB,WAAO,uBACLH,gBAAEI,GAAF,CAAMZ,MAAN,kBAAuBW,GAAvB,OADK,EAELH,gBAAEI,GAAF,CAAMZ,MAAN,kBAAuBW,GAAvB,OAFK,CAAP;AAID,GALD,CATF;;AAgBA,SAAOJ,OAAP;AACD;;AAEM,SAASM,iBAAT,CACLb,MADK,EAELC,MAFK,EAGLC,qBAAqB,GAAG,EAHnB,EAILC,eAAe,GAAG,IAJb,EAKL;AACA,QAAMC,mBAAmB,GAAGD,eAAe,GACvCL,0BAA0B,CAACO,MAA3B,CAAkCH,qBAAlC,CADuC,GAEvCA,qBAFJ,CADA,CAIA;AACA;;AACA,QAAMI,0BAA0B,GAAGF,mBAAmB,CAACC,MAApB,CAA2B,OAA3B,CAAnC;;AAEA,QAAME,OAAO,GACX;AACA,6BACEC,gBAAEC,IAAF,CAAOT,MAAP,EAAeM,0BAAf,CADF,EAEEE,gBAAEC,IAAF,CAAOR,MAAP,EAAeK,0BAAf,CAFF,KAIAE,gBAAEE,KAAF,CAAQN,mBAAR,EAA6BO,GAAG,IAAI;AAClC,UAAMG,WAAW,GAAGN,gBAAED,OAAF,CAAUP,MAAM,CAACW,GAAD,CAAhB,EAAuBV,MAAM,CAACU,GAAD,CAA7B,CAApB;;AACA,QAAI,CAACG,WAAL,EAAkBC,OAAO,CAACC,GAAR,oBAAwBL,GAAxB;AAClB,WAAOG,WAAP;AACD,GAJD,CAJA,IASAN,gBAAEE,KAAF,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,EAAoBC,GAAG,IAAI;AACzB,UAAMM,YAAY,GAAG,uBAAWjB,MAAM,CAACkB,KAAP,CAAaP,GAAb,CAAX,EAA8BV,MAAM,CAACiB,KAAP,CAAaP,GAAb,CAA9B,CAArB;AACA,QAAI,CAACM,YAAL,EAAmBF,OAAO,CAACC,GAAR,0BAA8BL,GAA9B;AACnB,WAAOM,YAAP;AACD,GAJD,CAXF,CARA,CAyBA;AACA;;;AACA,SAAOV,OAAP;AACD","sourcesContent":["import _ from \"lodash\";\nimport shallowEqual from \"./shallowEqual\";\nimport { scaleEqual } from \"./Scale\";\n\n// xyPropsEqual is a function used by XYPlot-type charts,\n// in their `shouldComponentUpdate` methods, for determining whether next props are the same as previous props.\n// in a perfect world this would just be a simple shallow equality check,\n// however some props are almost always passed as object/array literals (so they never ===)\n// or require special equality checks (eg. d3 scales)\n\n// default list of props to check for *deep equality* using _.isEqual\n// can be overridden by components by passing `propKeysToDeepCheck` argument\n// todo: decide whether data really belongs on this list? deep-checking data can be slow, but re-rendering is even slower\nexport const defaultPropKeysToDeepCheck = [\n  \"margin\",\n  \"scaleType\",\n  \"spacing\",\n  \"domain\",\n  \"style\",\n  \"data\" // not worth deepchecking data due to perf issues\n];\n\nexport default function xyPropsEqual(\n  propsA,\n  propsB,\n  customKeysToDeepCheck = [],\n  includeDefaults = true\n) {\n  const propKeysToDeepCheck = includeDefaults\n    ? defaultPropKeysToDeepCheck.concat(customKeysToDeepCheck)\n    : customKeysToDeepCheck;\n\n  const propKeysToSkipShallowCheck = propKeysToDeepCheck.concat(\"scale\");\n\n  const isEqual =\n    // most keys just get shallow-equality checked\n    shallowEqual(\n      _.omit(propsA, propKeysToSkipShallowCheck),\n      _.omit(propsB, propKeysToSkipShallowCheck)\n    ) &&\n    // propKeysToDeepCheck get deep-equality checked using _.isEqual\n    _.every(propKeysToDeepCheck, key => _.isEqual(propsA[key], propsB[key])) &&\n    // d3 scales are special, get deep-checked using custom `scaleEqual` utility\n    _.every([\"x\", \"y\"], key => {\n      return scaleEqual(\n        _.get(propsA, `scale[${key}]`),\n        _.get(propsA, `scale[${key}]`)\n      );\n    });\n\n  return isEqual;\n}\n\nexport function xyPropsEqualDebug(\n  propsA,\n  propsB,\n  customKeysToDeepCheck = [],\n  includeDefaults = true\n) {\n  const propKeysToDeepCheck = includeDefaults\n    ? defaultPropKeysToDeepCheck.concat(customKeysToDeepCheck)\n    : customKeysToDeepCheck;\n  // debug version of xyPropsEqual which console.logs, for figuring out which props are failing equality check\n  // const start = performance.now();\n  const propKeysToSkipShallowCheck = propKeysToDeepCheck.concat(\"scale\");\n\n  const isEqual =\n    // most keys just get shallow-equality checked\n    shallowEqual(\n      _.omit(propsA, propKeysToSkipShallowCheck),\n      _.omit(propsB, propKeysToSkipShallowCheck)\n    ) &&\n    _.every(propKeysToDeepCheck, key => {\n      const isDeepEqual = _.isEqual(propsA[key], propsB[key]);\n      if (!isDeepEqual) console.log(`xyProps: ${key} not equal`);\n      return isDeepEqual;\n    }) &&\n    _.every([\"x\", \"y\"], key => {\n      const isScaleEqual = scaleEqual(propsA.scale[key], propsB.scale[key]);\n      if (!isScaleEqual) console.log(`xyProps: scale.${key} not equal`);\n      return isScaleEqual;\n    });\n\n  // console.log('xyProps isEqual', isEqual);\n  // console.log('took', performance.now() - start);\n  return isEqual;\n}\n"],"file":"xyPropsEqual.js"}