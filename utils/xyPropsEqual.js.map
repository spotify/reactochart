{"version":3,"sources":["../src/utils/xyPropsEqual.js"],"names":["xyPropsEqual","xyPropsEqualDebug","defaultPropKeysToDeepCheck","propsA","propsB","customKeysToDeepCheck","includeDefaults","propKeysToDeepCheck","concat","propKeysToSkipShallowCheck","isEqual","omit","every","key","get","isDeepEqual","console","log","isScaleEqual","scale"],"mappings":";;;;;;kBAsBwBA,Y;QA+BRC,iB,GAAAA,iB;;AArDhB;;;;AACA;;;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO,IAAMC,kEAA6B,CACxC,QADwC,EAExC,WAFwC,EAGxC,SAHwC,EAIxC,QAJwC,EAKxC,OALwC,EAMxC,MANwC,CAAnC;;AASQ,SAASF,YAAT,CACbG,MADa,EAEbC,MAFa,EAKb;AAAA,MAFAC,qBAEA,uEAFwB,EAExB;AAAA,MADAC,eACA,uEADkB,IAClB;;AACA,MAAMC,sBAAsBD,kBACxBJ,2BAA2BM,MAA3B,CAAkCH,qBAAlC,CADwB,GAExBA,qBAFJ;;AAIA,MAAMI,6BAA6BF,oBAAoBC,MAApB,CAA2B,OAA3B,CAAnC;;AAEA,MAAME;AACJ;AACA,8BACE,iBAAEC,IAAF,CAAOR,MAAP,EAAeM,0BAAf,CADF,EAEE,iBAAEE,IAAF,CAAOP,MAAP,EAAeK,0BAAf,CAFF;AAIA;AACA,mBAAEG,KAAF,CAAQL,mBAAR,EAA6B;AAAA,WAAO,iBAAEG,OAAF,CAAUP,OAAOU,GAAP,CAAV,EAAuBT,OAAOS,GAAP,CAAvB,CAAP;AAAA,GAA7B,CALA;AAMA;AACA,mBAAED,KAAF,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,EAAoB,eAAO;AACzB,WAAO,uBACL,iBAAEE,GAAF,CAAMX,MAAN,aAAuBU,GAAvB,OADK,EAEL,iBAAEC,GAAF,CAAMX,MAAN,aAAuBU,GAAvB,OAFK,CAAP;AAID,GALD,CATF;;AAgBA,SAAOH,OAAP;AACD;;AAEM,SAAST,iBAAT,CACLE,MADK,EAELC,MAFK,EAKL;AAAA,MAFAC,qBAEA,uEAFwB,EAExB;AAAA,MADAC,eACA,uEADkB,IAClB;;AACA,MAAMC,sBAAsBD,kBACxBJ,2BAA2BM,MAA3B,CAAkCH,qBAAlC,CADwB,GAExBA,qBAFJ;AAGA;AACA;AACA,MAAMI,6BAA6BF,oBAAoBC,MAApB,CAA2B,OAA3B,CAAnC;;AAEA,MAAME;AACJ;AACA,8BACE,iBAAEC,IAAF,CAAOR,MAAP,EAAeM,0BAAf,CADF,EAEE,iBAAEE,IAAF,CAAOP,MAAP,EAAeK,0BAAf,CAFF,KAIA,iBAAEG,KAAF,CAAQL,mBAAR,EAA6B,eAAO;AAClC,QAAMQ,cAAc,iBAAEL,OAAF,CAAUP,OAAOU,GAAP,CAAV,EAAuBT,OAAOS,GAAP,CAAvB,CAApB;AACA,QAAI,CAACE,WAAL,EAAkBC,QAAQC,GAAR,eAAwBJ,GAAxB;AAClB,WAAOE,WAAP;AACD,GAJD,CAJA,IASA,iBAAEH,KAAF,CAAQ,CAAC,GAAD,EAAM,GAAN,CAAR,EAAoB,eAAO;AACzB,QAAMM,eAAe,uBAAWf,OAAOgB,KAAP,CAAaN,GAAb,CAAX,EAA8BT,OAAOe,KAAP,CAAaN,GAAb,CAA9B,CAArB;AACA,QAAI,CAACK,YAAL,EAAmBF,QAAQC,GAAR,qBAA8BJ,GAA9B;AACnB,WAAOK,YAAP;AACD,GAJD,CAXF;;AAiBA;AACA;AACA,SAAOR,OAAP;AACD","file":"xyPropsEqual.js","sourcesContent":["import _ from \"lodash\";\nimport shallowEqual from \"./shallowEqual\";\nimport { scaleEqual } from \"./Scale\";\n\n// xyPropsEqual is a function used by XYPlot-type charts,\n// in their `shouldComponentUpdate` methods, for determining whether next props are the same as previous props.\n// in a perfect world this would just be a simple shallow equality check,\n// however some props are almost always passed as object/array literals (so they never ===)\n// or require special equality checks (eg. d3 scales)\n\n// default list of props to check for *deep equality* using _.isEqual\n// can be overridden by components by passing `propKeysToDeepCheck` argument\n// todo: decide whether data really belongs on this list? deep-checking data can be slow, but re-rendering is even slower\nexport const defaultPropKeysToDeepCheck = [\n  \"margin\",\n  \"scaleType\",\n  \"spacing\",\n  \"domain\",\n  \"style\",\n  \"data\"\n];\n\nexport default function xyPropsEqual(\n  propsA,\n  propsB,\n  customKeysToDeepCheck = [],\n  includeDefaults = true\n) {\n  const propKeysToDeepCheck = includeDefaults\n    ? defaultPropKeysToDeepCheck.concat(customKeysToDeepCheck)\n    : customKeysToDeepCheck;\n\n  const propKeysToSkipShallowCheck = propKeysToDeepCheck.concat(\"scale\");\n\n  const isEqual =\n    // most keys just get shallow-equality checked\n    shallowEqual(\n      _.omit(propsA, propKeysToSkipShallowCheck),\n      _.omit(propsB, propKeysToSkipShallowCheck)\n    ) &&\n    // propKeysToDeepCheck get deep-equality checked using _.isEqual\n    _.every(propKeysToDeepCheck, key => _.isEqual(propsA[key], propsB[key])) &&\n    // d3 scales are special, get deep-checked using custom `scaleEqual` utility\n    _.every([\"x\", \"y\"], key => {\n      return scaleEqual(\n        _.get(propsA, `scale[${key}]`),\n        _.get(propsA, `scale[${key}]`)\n      );\n    });\n\n  return isEqual;\n}\n\nexport function xyPropsEqualDebug(\n  propsA,\n  propsB,\n  customKeysToDeepCheck = [],\n  includeDefaults = true\n) {\n  const propKeysToDeepCheck = includeDefaults\n    ? defaultPropKeysToDeepCheck.concat(customKeysToDeepCheck)\n    : customKeysToDeepCheck;\n  // debug version of xyPropsEqual which console.logs, for figuring out which props are failing equality check\n  // const start = performance.now();\n  const propKeysToSkipShallowCheck = propKeysToDeepCheck.concat(\"scale\");\n\n  const isEqual =\n    // most keys just get shallow-equality checked\n    shallowEqual(\n      _.omit(propsA, propKeysToSkipShallowCheck),\n      _.omit(propsB, propKeysToSkipShallowCheck)\n    ) &&\n    _.every(propKeysToDeepCheck, key => {\n      const isDeepEqual = _.isEqual(propsA[key], propsB[key]);\n      if (!isDeepEqual) console.log(`xyProps: ${key} not equal`);\n      return isDeepEqual;\n    }) &&\n    _.every([\"x\", \"y\"], key => {\n      const isScaleEqual = scaleEqual(propsA.scale[key], propsB.scale[key]);\n      if (!isScaleEqual) console.log(`xyProps: scale.${key} not equal`);\n      return isScaleEqual;\n    });\n\n  // console.log('xyProps isEqual', isEqual);\n  // console.log('took', performance.now() - start);\n  return isEqual;\n}\n"]}